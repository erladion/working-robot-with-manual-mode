
Sensormodul_6_2(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000200a  00800100  0000147a  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  0080210a  0080210a  00003518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000220f  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acc  00000000  00000000  0000594f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000124a  00000000  00000000  0000641b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00007668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069e  00000000  00000000  00007b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8f  00000000  00000000  000081ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c7       	rjmp	.+3746   	; 0xeb4 <__vector_4>
      12:	00 00       	nop
      14:	21 c6       	rjmp	.+3138   	; 0xc58 <__vector_5>
      16:	00 00       	nop
      18:	f9 c6       	rjmp	.+3570   	; 0xe0c <__vector_6>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c3       	rjmp	.+1704   	; 0x6ce <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c6       	rjmp	.+3506   	; 0xde8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e2       	ldi	r17, 0x21	; 33
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e7       	ldi	r30, 0x7A	; 122
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e2       	ldi	r18, 0x21	; 33
      b4:	aa e0       	ldi	r26, 0x0A	; 10
      b6:	b1 e2       	ldi	r27, 0x21	; 33
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3f       	cpi	r26, 0xF2	; 242
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ec d5       	rcall	.+3032   	; 0xc9c <main>
      c4:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_26>:
#include "BusSlave.h"
//#include <util/twi.h>
#include "DebugHelp.h"


ISR(TWI_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	// SEND DATA - sensormodul
	pulse(PORTC, 7);
      f0:	47 98       	cbi	0x08, 7	; 8
      f2:	47 9a       	sbi	0x08, 7	; 8
      f4:	47 98       	cbi	0x08, 7	; 8
	// The Slave has been addressed by the Master
	if ((TWSR & 0xF8) == 0xA8){ // use TW_ST_DATA_ACK instead of 0xA8 maybe?
      f6:	80 91 b9 00 	lds	r24, 0x00B9
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 3a       	cpi	r24, 0xA8	; 168
      fe:	39 f5       	brne	.+78     	; 0x14e <__vector_26+0x84>
		sending = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 30 21 	sts	0x2130, r25
     108:	80 93 2f 21 	sts	0x212F, r24
		pulse(PORTD,0);
     10c:	58 98       	cbi	0x0b, 0	; 11
     10e:	58 9a       	sbi	0x0b, 0	; 11
     110:	58 98       	cbi	0x0b, 0	; 11
		TWIcounter = 0;
     112:	10 92 34 21 	sts	0x2134, r1
     116:	10 92 33 21 	sts	0x2133, r1
		TWDR = TWIdata[TWIcounter];
     11a:	80 91 33 21 	lds	r24, 0x2133
     11e:	90 91 34 21 	lds	r25, 0x2134
     122:	e0 91 31 21 	lds	r30, 0x2131
     126:	f0 91 32 21 	lds	r31, 0x2132
     12a:	e8 0f       	add	r30, r24
     12c:	f9 1f       	adc	r31, r25
     12e:	80 81       	ld	r24, Z
     130:	80 93 bb 00 	sts	0x00BB, r24
		TWIcounter++;
     134:	80 91 33 21 	lds	r24, 0x2133
     138:	90 91 34 21 	lds	r25, 0x2134
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	90 93 34 21 	sts	0x2134, r25
     142:	80 93 33 21 	sts	0x2133, r24
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     146:	85 ec       	ldi	r24, 0xC5	; 197
     148:	80 93 bc 00 	sts	0x00BC, r24
     14c:	56 c0       	rjmp	.+172    	; 0x1fa <__vector_26+0x130>
	}
	// Send data now
	else if ((TWSR & 0xF8) == 0xB8){
     14e:	80 91 b9 00 	lds	r24, 0x00B9
     152:	88 7f       	andi	r24, 0xF8	; 248
     154:	88 3b       	cpi	r24, 0xB8	; 184
     156:	01 f5       	brne	.+64     	; 0x198 <__vector_26+0xce>
		pulse(PORTC, 7);
     158:	47 98       	cbi	0x08, 7	; 8
     15a:	47 9a       	sbi	0x08, 7	; 8
     15c:	47 98       	cbi	0x08, 7	; 8
		pulse(PORTC, 7);
     15e:	47 98       	cbi	0x08, 7	; 8
     160:	47 9a       	sbi	0x08, 7	; 8
     162:	47 98       	cbi	0x08, 7	; 8
		TWDR = TWIdata[TWIcounter];
     164:	80 91 33 21 	lds	r24, 0x2133
     168:	90 91 34 21 	lds	r25, 0x2134
     16c:	e0 91 31 21 	lds	r30, 0x2131
     170:	f0 91 32 21 	lds	r31, 0x2132
     174:	e8 0f       	add	r30, r24
     176:	f9 1f       	adc	r31, r25
     178:	80 81       	ld	r24, Z
     17a:	80 93 bb 00 	sts	0x00BB, r24
		TWIcounter++;
     17e:	80 91 33 21 	lds	r24, 0x2133
     182:	90 91 34 21 	lds	r25, 0x2134
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	90 93 34 21 	sts	0x2134, r25
     18c:	80 93 33 21 	sts	0x2133, r24
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     190:	85 ec       	ldi	r24, 0xC5	; 197
     192:	80 93 bc 00 	sts	0x00BC, r24
     196:	31 c0       	rjmp	.+98     	; 0x1fa <__vector_26+0x130>
	}
	// Done with sending data
	else if ((TWSR & 0xF8) == 0xC0){
     198:	80 91 b9 00 	lds	r24, 0x00B9
     19c:	88 7f       	andi	r24, 0xF8	; 248
     19e:	80 3c       	cpi	r24, 0xC0	; 192
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <__vector_26+0xe8>
		sending = 0;
     1a2:	10 92 30 21 	sts	0x2130, r1
     1a6:	10 92 2f 21 	sts	0x212F, r1
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);		
     1aa:	85 ec       	ldi	r24, 0xC5	; 197
     1ac:	80 93 bc 00 	sts	0x00BC, r24
     1b0:	24 c0       	rjmp	.+72     	; 0x1fa <__vector_26+0x130>
	}
	
	//RECEIVE DATA - styrmodul
	
	// The Slave has been addressed by the Master
	else if ((TWSR & 0xF8) == 0x60){
     1b2:	80 91 b9 00 	lds	r24, 0x00B9
     1b6:	88 7f       	andi	r24, 0xF8	; 248
     1b8:	80 36       	cpi	r24, 0x60	; 96
     1ba:	49 f4       	brne	.+18     	; 0x1ce <__vector_26+0x104>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1bc:	85 ec       	ldi	r24, 0xC5	; 197
     1be:	80 93 bc 00 	sts	0x00BC, r24
		calibrateReflexSensors();
     1c2:	cf d4       	rcall	.+2462   	; 0xb62 <calibrateReflexSensors>
		TWIcounter = 0;
     1c4:	10 92 34 21 	sts	0x2134, r1
     1c8:	10 92 33 21 	sts	0x2133, r1
     1cc:	16 c0       	rjmp	.+44     	; 0x1fa <__vector_26+0x130>
	}
	
	// Data is received
	else if ((TWSR & 0xF8) == 0x80){	
     1ce:	80 91 b9 00 	lds	r24, 0x00B9
     1d2:	88 7f       	andi	r24, 0xF8	; 248
     1d4:	80 38       	cpi	r24, 0x80	; 128
     1d6:	21 f4       	brne	.+8      	; 0x1e0 <__vector_26+0x116>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1d8:	85 ec       	ldi	r24, 0xC5	; 197
     1da:	80 93 bc 00 	sts	0x00BC, r24
     1de:	0d c0       	rjmp	.+26     	; 0x1fa <__vector_26+0x130>
	}
	
	// STOP condition is received
	else if ((TWSR & 0xF8) == 0xA0){
     1e0:	80 91 b9 00 	lds	r24, 0x00B9
     1e4:	88 7f       	andi	r24, 0xF8	; 248
     1e6:	80 3a       	cpi	r24, 0xA0	; 160
     1e8:	21 f4       	brne	.+8      	; 0x1f2 <__vector_26+0x128>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1ea:	85 ec       	ldi	r24, 0xC5	; 197
     1ec:	80 93 bc 00 	sts	0x00BC, r24
     1f0:	04 c0       	rjmp	.+8      	; 0x1fa <__vector_26+0x130>
	}
	else{
		sending = 0;
     1f2:	10 92 30 21 	sts	0x2130, r1
     1f6:	10 92 2f 21 	sts	0x212F, r1
	}
}
     1fa:	ff 91       	pop	r31
     1fc:	ef 91       	pop	r30
     1fe:	bf 91       	pop	r27
     200:	af 91       	pop	r26
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	7f 91       	pop	r23
     208:	6f 91       	pop	r22
     20a:	5f 91       	pop	r21
     20c:	4f 91       	pop	r20
     20e:	3f 91       	pop	r19
     210:	2f 91       	pop	r18
     212:	0f 90       	pop	r0
     214:	0b be       	out	0x3b, r0	; 59
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <initBuss>:

void initBuss(char address){
	DDRC |= (1 << 7);
     220:	3f 9a       	sbi	0x07, 7	; 7
	DDRD |= (1 << 0);
     222:	50 9a       	sbi	0x0a, 0	; 10
	//pulse(PORTC, 7);
	sending = 0;
     224:	10 92 30 21 	sts	0x2130, r1
     228:	10 92 2f 21 	sts	0x212F, r1
	
	TWAR = address;
     22c:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE); // set the TWCR to enable address matching and enable TWI, enable TWI interrupt
     230:	ec eb       	ldi	r30, 0xBC	; 188
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	85 e4       	ldi	r24, 0x45	; 69
     236:	80 83       	st	Z, r24
	TWCR |= (1 << TWINT); // clear TWINT
     238:	80 81       	ld	r24, Z
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	80 83       	st	Z, r24
	cbi(TWCR, TWSTA);
     23e:	80 81       	ld	r24, Z
     240:	8f 7d       	andi	r24, 0xDF	; 223
     242:	80 83       	st	Z, r24
	cbi(TWCR, TWSTO);
     244:	80 81       	ld	r24, Z
     246:	8f 7e       	andi	r24, 0xEF	; 239
     248:	80 83       	st	Z, r24
     24a:	08 95       	ret

0000024c <lcd_cmd>:
	_delay_ms(100);	
}

void lcd_cmd(unsigned char cmd)
{
	PORTD = (cmd & 0xF0) | LCD_EN;
     24c:	98 2f       	mov	r25, r24
     24e:	90 7f       	andi	r25, 0xF0	; 240
     250:	29 2f       	mov	r18, r25
     252:	22 60       	ori	r18, 0x02	; 2
     254:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     256:	e9 ef       	ldi	r30, 0xF9	; 249
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_cmd+0xe>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_cmd+0x14>
     260:	00 00       	nop
	_delay_ms(1);
	PORTD = (cmd & 0xF0);
     262:	9b b9       	out	0x0b, r25	; 11
     264:	e9 ef       	ldi	r30, 0xF9	; 249
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_cmd+0x1c>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_cmd+0x22>
     26e:	00 00       	nop
	_delay_ms(1);
	PORTD = ((cmd << 4) & 0xF0) | LCD_EN;
     270:	f0 e1       	ldi	r31, 0x10	; 16
     272:	8f 9f       	mul	r24, r31
     274:	c0 01       	movw	r24, r0
     276:	11 24       	eor	r1, r1
     278:	98 2f       	mov	r25, r24
     27a:	92 60       	ori	r25, 0x02	; 2
     27c:	9b b9       	out	0x0b, r25	; 11
     27e:	e9 ef       	ldi	r30, 0xF9	; 249
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_cmd+0x36>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_cmd+0x3c>
     288:	00 00       	nop
	_delay_ms(1);
	PORTD = ((cmd << 4) & 0xF0);
     28a:	8b b9       	out	0x0b, r24	; 11
     28c:	89 ef       	ldi	r24, 0xF9	; 249
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <lcd_cmd+0x44>
     294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_cmd+0x4a>
     296:	00 00       	nop
     298:	08 95       	ret

0000029a <lcd_init>:

volatile bool whiteSpaceSwitch = true;

void lcd_init()
{	
	DDRD |= 0xFF;
     29a:	8a b1       	in	r24, 0x0a	; 10
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	8a b9       	out	0x0a, r24	; 10
     2a0:	2f e3       	ldi	r18, 0x3F	; 63
     2a2:	8d e0       	ldi	r24, 0x0D	; 13
     2a4:	93 e0       	ldi	r25, 0x03	; 3
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <lcd_init+0xc>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x16>
     2b0:	00 00       	nop
	
	//Wait for power
	_delay_ms(1000);
	
	//Function set, 2-line mode, 5x7 Dots
	PORTD = (1<<DB5) | (1<<EN);
     2b2:	92 e2       	ldi	r25, 0x22	; 34
     2b4:	9b b9       	out	0x0b, r25	; 11
     2b6:	e9 ef       	ldi	r30, 0xF9	; 249
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x20>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x26>
     2c0:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB5);
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	8b b9       	out	0x0b, r24	; 11
     2c6:	e9 ef       	ldi	r30, 0xF9	; 249
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_init+0x30>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_init+0x36>
     2d0:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB5) | (1<<EN);
     2d2:	9b b9       	out	0x0b, r25	; 11
     2d4:	e9 ef       	ldi	r30, 0xF9	; 249
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_init+0x3e>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_init+0x44>
     2de:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB5);
     2e0:	8b b9       	out	0x0b, r24	; 11
     2e2:	89 ef       	ldi	r24, 0xF9	; 249
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_init+0x4c>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_init+0x52>
     2ec:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7) | (1<<EN);
     2ee:	82 e8       	ldi	r24, 0x82	; 130
     2f0:	8b b9       	out	0x0b, r24	; 11
     2f2:	e9 ef       	ldi	r30, 0xF9	; 249
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0x5c>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0x62>
     2fc:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7);
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	8b b9       	out	0x0b, r24	; 11
     302:	89 ef       	ldi	r24, 0xF9	; 249
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x6c>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x72>
     30c:	00 00       	nop
	_delay_ms(1);
	
	//Display on, cursor off, blink off
	PORTD = (1<<EN);
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	8b b9       	out	0x0b, r24	; 11
     312:	e9 ef       	ldi	r30, 0xF9	; 249
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <lcd_init+0x7c>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_init+0x82>
     31c:	00 00       	nop
	_delay_ms(1);
	PORTD = 0x00;
     31e:	1b b8       	out	0x0b, r1	; 11
     320:	89 ef       	ldi	r24, 0xF9	; 249
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x8a>
     328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_init+0x90>
     32a:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7) | (1<<DB6) | (1<<EN);
     32c:	82 ec       	ldi	r24, 0xC2	; 194
     32e:	8b b9       	out	0x0b, r24	; 11
     330:	e9 ef       	ldi	r30, 0xF9	; 249
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_init+0x9a>
     338:	00 c0       	rjmp	.+0      	; 0x33a <lcd_init+0xa0>
     33a:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7) | (1<<DB6);
     33c:	80 ec       	ldi	r24, 0xC0	; 192
     33e:	8b b9       	out	0x0b, r24	; 11
     340:	89 ef       	ldi	r24, 0xF9	; 249
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_init+0xaa>
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0xb0>
     34a:	00 00       	nop
	_delay_ms(1);
	
	lcd_cmd(0x01);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	7e df       	rcall	.-260    	; 0x24c <lcd_cmd>
     350:	e7 ea       	ldi	r30, 0xA7	; 167
     352:	f1 e6       	ldi	r31, 0x61	; 97
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0xba>
     358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_init+0xc0>
     35a:	00 00       	nop
     35c:	08 95       	ret

0000035e <lcd_data>:
	_delay_ms(1);
}

void lcd_data(unsigned char data)
{
	PORTD = (data & 0xF0) | LCD_EN | LCD_RS;
     35e:	98 2f       	mov	r25, r24
     360:	90 7f       	andi	r25, 0xF0	; 240
     362:	29 2f       	mov	r18, r25
     364:	26 60       	ori	r18, 0x06	; 6
     366:	2b b9       	out	0x0b, r18	; 11
     368:	e9 ef       	ldi	r30, 0xF9	; 249
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_data+0xe>
     370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_data+0x14>
     372:	00 00       	nop
	_delay_ms(1);
	PORTD = (data & 0xF0) | LCD_RS;
     374:	94 60       	ori	r25, 0x04	; 4
     376:	9b b9       	out	0x0b, r25	; 11
     378:	e9 ef       	ldi	r30, 0xF9	; 249
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_data+0x1e>
     380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_data+0x24>
     382:	00 00       	nop
	_delay_ms(1);
	PORTD = ((data << 4) & 0xF0) | LCD_EN | LCD_RS;
     384:	f0 e1       	ldi	r31, 0x10	; 16
     386:	8f 9f       	mul	r24, r31
     388:	c0 01       	movw	r24, r0
     38a:	11 24       	eor	r1, r1
     38c:	98 2f       	mov	r25, r24
     38e:	96 60       	ori	r25, 0x06	; 6
     390:	9b b9       	out	0x0b, r25	; 11
     392:	e9 ef       	ldi	r30, 0xF9	; 249
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <lcd_data+0x38>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <lcd_data+0x3e>
     39c:	00 00       	nop
	_delay_ms(1);
	PORTD = ((data << 4) & 0xF0) | LCD_RS;
     39e:	84 60       	ori	r24, 0x04	; 4
     3a0:	8b b9       	out	0x0b, r24	; 11
     3a2:	89 ef       	ldi	r24, 0xF9	; 249
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_data+0x48>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lcd_data+0x4e>
     3ac:	00 00       	nop
     3ae:	08 95       	ret

000003b0 <lcd_print>:
	_delay_ms(1);
}

void lcd_print(char *string)
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
	unsigned int i;
	for (i = 0; string[i]!=0; i++) {
     3b6:	88 81       	ld	r24, Y
     3b8:	88 23       	and	r24, r24
     3ba:	29 f0       	breq	.+10     	; 0x3c6 <lcd_print+0x16>
     3bc:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(string[i]);
     3be:	cf df       	rcall	.-98     	; 0x35e <lcd_data>
}

void lcd_print(char *string)
{
	unsigned int i;
	for (i = 0; string[i]!=0; i++) {
     3c0:	89 91       	ld	r24, Y+
     3c2:	81 11       	cpse	r24, r1
     3c4:	fc cf       	rjmp	.-8      	; 0x3be <lcd_print+0xe>
		lcd_data(string[i]);
	}
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <lcd_build_row>:

char* lcd_build_row(char *label1, char *data1, char *label2, char *data2)
{
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	7b 01       	movw	r14, r22
     3da:	8a 01       	movw	r16, r20
     3dc:	e9 01       	movw	r28, r18
	static char tmpStr[17];
	strcpy(tmpStr, label1);
     3de:	bc 01       	movw	r22, r24
     3e0:	86 e1       	ldi	r24, 0x16	; 22
     3e2:	91 e2       	ldi	r25, 0x21	; 33
     3e4:	0e 94 01 0a 	call	0x1402	; 0x1402 <strcpy>
	strcat(tmpStr, data1);
     3e8:	b7 01       	movw	r22, r14
     3ea:	86 e1       	ldi	r24, 0x16	; 22
     3ec:	91 e2       	ldi	r25, 0x21	; 33
     3ee:	fe d7       	rcall	.+4092   	; 0x13ec <strcat>
	strcat(tmpStr, label2);
     3f0:	b8 01       	movw	r22, r16
     3f2:	86 e1       	ldi	r24, 0x16	; 22
     3f4:	91 e2       	ldi	r25, 0x21	; 33
     3f6:	fa d7       	rcall	.+4084   	; 0x13ec <strcat>
	strcat(tmpStr, data2);
     3f8:	be 01       	movw	r22, r28
     3fa:	86 e1       	ldi	r24, 0x16	; 22
     3fc:	91 e2       	ldi	r25, 0x21	; 33
     3fe:	f6 d7       	rcall	.+4076   	; 0x13ec <strcat>
	return tmpStr;
}
     400:	86 e1       	ldi	r24, 0x16	; 22
     402:	91 e2       	ldi	r25, 0x21	; 33
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	08 95       	ret

00000412 <lcd_whitespace_adder>:

//Adds whitespace in front of the the inputed string until it reaches max_length+1.
char* lcd_whitespace_adder(char *str, int max_length)
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ab 01       	movw	r20, r22
	static char result1[6];
	static char result2[6];
	int length = strlen(str);
     418:	fc 01       	movw	r30, r24
     41a:	01 90       	ld	r0, Z+
     41c:	00 20       	and	r0, r0
     41e:	e9 f7       	brne	.-6      	; 0x41a <lcd_whitespace_adder+0x8>
     420:	31 97       	sbiw	r30, 0x01	; 1
     422:	9f 01       	movw	r18, r30
     424:	28 1b       	sub	r18, r24
     426:	39 0b       	sbc	r19, r25
	if (whiteSpaceSwitch)
     428:	60 91 00 01 	lds	r22, 0x0100
     42c:	66 23       	and	r22, r22
     42e:	01 f1       	breq	.+64     	; 0x470 <lcd_whitespace_adder+0x5e>
	{
		strcpy(result1, " ");
     430:	60 e2       	ldi	r22, 0x20	; 32
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	70 93 11 21 	sts	0x2111, r23
     438:	60 93 10 21 	sts	0x2110, r22
		while(length < max_length) {
     43c:	24 17       	cp	r18, r20
     43e:	35 07       	cpc	r19, r21
     440:	74 f4       	brge	.+28     	; 0x45e <lcd_whitespace_adder+0x4c>
			strcat(result1, " ");
     442:	a0 e1       	ldi	r26, 0x10	; 16
     444:	b1 e2       	ldi	r27, 0x21	; 33
     446:	fd 01       	movw	r30, r26
     448:	01 90       	ld	r0, Z+
     44a:	00 20       	and	r0, r0
     44c:	e9 f7       	brne	.-6      	; 0x448 <lcd_whitespace_adder+0x36>
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	71 83       	std	Z+1, r23	; 0x01
     452:	60 83       	st	Z, r22
			length++;
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	3f 4f       	sbci	r19, 0xFF	; 255
	static char result2[6];
	int length = strlen(str);
	if (whiteSpaceSwitch)
	{
		strcpy(result1, " ");
		while(length < max_length) {
     458:	24 17       	cp	r18, r20
     45a:	35 07       	cpc	r19, r21
     45c:	a4 f3       	brlt	.-24     	; 0x446 <lcd_whitespace_adder+0x34>
			strcat(result1, " ");
			length++;
		}
		strcat(result1, str);
     45e:	bc 01       	movw	r22, r24
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	91 e2       	ldi	r25, 0x21	; 33
     464:	c3 d7       	rcall	.+3974   	; 0x13ec <strcat>
		whiteSpaceSwitch = false;
     466:	10 92 00 01 	sts	0x0100, r1
		return result1;
     46a:	80 e1       	ldi	r24, 0x10	; 16
     46c:	91 e2       	ldi	r25, 0x21	; 33
     46e:	22 c0       	rjmp	.+68     	; 0x4b4 <lcd_whitespace_adder+0xa2>
	}
	else
	{
		strcpy(result2, " ");
     470:	60 e2       	ldi	r22, 0x20	; 32
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	70 93 0b 21 	sts	0x210B, r23
     478:	60 93 0a 21 	sts	0x210A, r22
		while(length < max_length) {
     47c:	24 17       	cp	r18, r20
     47e:	35 07       	cpc	r19, r21
     480:	84 f4       	brge	.+32     	; 0x4a2 <lcd_whitespace_adder+0x90>
			strcat(result2, " ");
     482:	ca e0       	ldi	r28, 0x0A	; 10
     484:	d1 e2       	ldi	r29, 0x21	; 33
     486:	a0 e2       	ldi	r26, 0x20	; 32
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	fe 01       	movw	r30, r28
     48c:	01 90       	ld	r0, Z+
     48e:	00 20       	and	r0, r0
     490:	e9 f7       	brne	.-6      	; 0x48c <lcd_whitespace_adder+0x7a>
     492:	31 97       	sbiw	r30, 0x01	; 1
     494:	b1 83       	std	Z+1, r27	; 0x01
     496:	a0 83       	st	Z, r26
			length++;
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
		return result1;
	}
	else
	{
		strcpy(result2, " ");
		while(length < max_length) {
     49c:	24 17       	cp	r18, r20
     49e:	35 07       	cpc	r19, r21
     4a0:	a4 f3       	brlt	.-24     	; 0x48a <lcd_whitespace_adder+0x78>
			strcat(result2, " ");
			length++;
		}
		strcat(result2, str);
     4a2:	bc 01       	movw	r22, r24
     4a4:	8a e0       	ldi	r24, 0x0A	; 10
     4a6:	91 e2       	ldi	r25, 0x21	; 33
     4a8:	a1 d7       	rcall	.+3906   	; 0x13ec <strcat>
		whiteSpaceSwitch = true;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 00 01 	sts	0x0100, r24
		return result2;
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	91 e2       	ldi	r25, 0x21	; 33
	}
	
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <lcd_update>:

void lcd_update(bool manualMode, int gyro, int usf, int usr,int irfl, int irfr, int irrl, int irrr)
{
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	6e 97       	sbiw	r28, 0x1e	; 30
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
	//lcd_print(lcd_build_row("USF", lcd_whitespace_adder(str1, 3), "  USR", lcd_whitespace_adder(str2, 3)));
	//lcd_print(lcd_build_row("USF ",str1, " REF ", str2));
	*/
	
	
	lcd_cmd(0x01);
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	b9 de       	rcall	.-654    	; 0x24c <lcd_cmd>
     4da:	87 ea       	ldi	r24, 0xA7	; 167
     4dc:	91 e6       	ldi	r25, 0x61	; 97
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_update+0x24>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <lcd_update+0x2a>
     4e4:	00 00       	nop
	_delay_ms(100);
	
	lcd_cmd(0x80);	//Set row 1 on the displa
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	b1 de       	rcall	.-670    	; 0x24c <lcd_cmd>
	itoa(reflexValues[0],str1,10);
     4ea:	03 e8       	ldi	r16, 0x83	; 131
     4ec:	11 e2       	ldi	r17, 0x21	; 33
     4ee:	f8 01       	movw	r30, r16
     4f0:	80 81       	ld	r24, Z
     4f2:	91 81       	ldd	r25, Z+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4f4:	4a e0       	ldi	r20, 0x0A	; 10
     4f6:	be 01       	movw	r22, r28
     4f8:	6f 5f       	subi	r22, 0xFF	; 255
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	89 d7       	rcall	.+3858   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[1],str2,10);
     4fe:	f8 01       	movw	r30, r16
     500:	82 81       	ldd	r24, Z+2	; 0x02
     502:	93 81       	ldd	r25, Z+3	; 0x03
     504:	4a e0       	ldi	r20, 0x0A	; 10
     506:	be 01       	movw	r22, r28
     508:	65 5f       	subi	r22, 0xF5	; 245
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	81 d7       	rcall	.+3842   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[2],str3,10);
     50e:	f8 01       	movw	r30, r16
     510:	84 81       	ldd	r24, Z+4	; 0x04
     512:	95 81       	ldd	r25, Z+5	; 0x05
     514:	4a e0       	ldi	r20, 0x0A	; 10
     516:	be 01       	movw	r22, r28
     518:	6b 5e       	subi	r22, 0xEB	; 235
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	79 d7       	rcall	.+3826   	; 0x1410 <__itoa_ncheck>
	lcd_print(lcd_build_row(str1, lcd_whitespace_adder(str2, 4), lcd_whitespace_adder(str3, 4), ""));
     51e:	64 e0       	ldi	r22, 0x04	; 4
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	ce 01       	movw	r24, r28
     524:	45 96       	adiw	r24, 0x15	; 21
     526:	75 df       	rcall	.-278    	; 0x412 <lcd_whitespace_adder>
     528:	7c 01       	movw	r14, r24
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	ce 01       	movw	r24, r28
     530:	0b 96       	adiw	r24, 0x0b	; 11
     532:	6f df       	rcall	.-290    	; 0x412 <lcd_whitespace_adder>
     534:	bc 01       	movw	r22, r24
     536:	29 e0       	ldi	r18, 0x09	; 9
     538:	31 e2       	ldi	r19, 0x21	; 33
     53a:	a7 01       	movw	r20, r14
     53c:	ce 01       	movw	r24, r28
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	45 df       	rcall	.-374    	; 0x3cc <lcd_build_row>
     542:	36 df       	rcall	.-404    	; 0x3b0 <lcd_print>
	
	
	lcd_cmd(0xc0);	//Set row 2 on the display
     544:	80 ec       	ldi	r24, 0xC0	; 192
     546:	82 de       	rcall	.-764    	; 0x24c <lcd_cmd>
	itoa(reflexValues[3],str1,10);
     548:	f8 01       	movw	r30, r16
     54a:	86 81       	ldd	r24, Z+6	; 0x06
     54c:	97 81       	ldd	r25, Z+7	; 0x07
     54e:	4a e0       	ldi	r20, 0x0A	; 10
     550:	be 01       	movw	r22, r28
     552:	6f 5f       	subi	r22, 0xFF	; 255
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	5c d7       	rcall	.+3768   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[4],str2,10);
     558:	f8 01       	movw	r30, r16
     55a:	80 85       	ldd	r24, Z+8	; 0x08
     55c:	91 85       	ldd	r25, Z+9	; 0x09
     55e:	4a e0       	ldi	r20, 0x0A	; 10
     560:	be 01       	movw	r22, r28
     562:	65 5f       	subi	r22, 0xF5	; 245
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	54 d7       	rcall	.+3752   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[5],str3,10);
     568:	f8 01       	movw	r30, r16
     56a:	82 85       	ldd	r24, Z+10	; 0x0a
     56c:	93 85       	ldd	r25, Z+11	; 0x0b
     56e:	4a e0       	ldi	r20, 0x0A	; 10
     570:	be 01       	movw	r22, r28
     572:	6b 5e       	subi	r22, 0xEB	; 235
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	4c d7       	rcall	.+3736   	; 0x1410 <__itoa_ncheck>
	lcd_print(lcd_build_row(str1, lcd_whitespace_adder(str2, 4), lcd_whitespace_adder(str3, 4), ""));
     578:	64 e0       	ldi	r22, 0x04	; 4
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	ce 01       	movw	r24, r28
     57e:	45 96       	adiw	r24, 0x15	; 21
     580:	48 df       	rcall	.-368    	; 0x412 <lcd_whitespace_adder>
     582:	7c 01       	movw	r14, r24
     584:	64 e0       	ldi	r22, 0x04	; 4
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	ce 01       	movw	r24, r28
     58a:	0b 96       	adiw	r24, 0x0b	; 11
     58c:	42 df       	rcall	.-380    	; 0x412 <lcd_whitespace_adder>
     58e:	bc 01       	movw	r22, r24
     590:	29 e0       	ldi	r18, 0x09	; 9
     592:	31 e2       	ldi	r19, 0x21	; 33
     594:	a7 01       	movw	r20, r14
     596:	ce 01       	movw	r24, r28
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	18 df       	rcall	.-464    	; 0x3cc <lcd_build_row>
     59c:	09 df       	rcall	.-494    	; 0x3b0 <lcd_print>
	
	
	lcd_cmd(0x90);	//Set row 3 the display
     59e:	80 e9       	ldi	r24, 0x90	; 144
     5a0:	55 de       	rcall	.-854    	; 0x24c <lcd_cmd>
	itoa(reflexValues[6], str1,10);
     5a2:	f8 01       	movw	r30, r16
     5a4:	84 85       	ldd	r24, Z+12	; 0x0c
     5a6:	95 85       	ldd	r25, Z+13	; 0x0d
     5a8:	4a e0       	ldi	r20, 0x0A	; 10
     5aa:	be 01       	movw	r22, r28
     5ac:	6f 5f       	subi	r22, 0xFF	; 255
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	2f d7       	rcall	.+3678   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[7], str2,10);
     5b2:	f8 01       	movw	r30, r16
     5b4:	86 85       	ldd	r24, Z+14	; 0x0e
     5b6:	97 85       	ldd	r25, Z+15	; 0x0f
     5b8:	4a e0       	ldi	r20, 0x0A	; 10
     5ba:	be 01       	movw	r22, r28
     5bc:	65 5f       	subi	r22, 0xF5	; 245
     5be:	7f 4f       	sbci	r23, 0xFF	; 255
     5c0:	27 d7       	rcall	.+3662   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[8], str3,10);
     5c2:	f8 01       	movw	r30, r16
     5c4:	80 89       	ldd	r24, Z+16	; 0x10
     5c6:	91 89       	ldd	r25, Z+17	; 0x11
     5c8:	4a e0       	ldi	r20, 0x0A	; 10
     5ca:	be 01       	movw	r22, r28
     5cc:	6b 5e       	subi	r22, 0xEB	; 235
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	1f d7       	rcall	.+3646   	; 0x1410 <__itoa_ncheck>
	lcd_print(lcd_build_row(str1, lcd_whitespace_adder(str2, 4), lcd_whitespace_adder(str3, 4), ""));
     5d2:	64 e0       	ldi	r22, 0x04	; 4
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	ce 01       	movw	r24, r28
     5d8:	45 96       	adiw	r24, 0x15	; 21
     5da:	1b df       	rcall	.-458    	; 0x412 <lcd_whitespace_adder>
     5dc:	7c 01       	movw	r14, r24
     5de:	64 e0       	ldi	r22, 0x04	; 4
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	0b 96       	adiw	r24, 0x0b	; 11
     5e6:	15 df       	rcall	.-470    	; 0x412 <lcd_whitespace_adder>
     5e8:	bc 01       	movw	r22, r24
     5ea:	29 e0       	ldi	r18, 0x09	; 9
     5ec:	31 e2       	ldi	r19, 0x21	; 33
     5ee:	a7 01       	movw	r20, r14
     5f0:	ce 01       	movw	r24, r28
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	eb de       	rcall	.-554    	; 0x3cc <lcd_build_row>
     5f6:	dc de       	rcall	.-584    	; 0x3b0 <lcd_print>
	
	
	lcd_cmd(0xd0);	//Set row 4 the display
     5f8:	80 ed       	ldi	r24, 0xD0	; 208
     5fa:	28 de       	rcall	.-944    	; 0x24c <lcd_cmd>
	itoa(reflexValues[9], str1,10);
     5fc:	f8 01       	movw	r30, r16
     5fe:	82 89       	ldd	r24, Z+18	; 0x12
     600:	93 89       	ldd	r25, Z+19	; 0x13
     602:	4a e0       	ldi	r20, 0x0A	; 10
     604:	be 01       	movw	r22, r28
     606:	6f 5f       	subi	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	02 d7       	rcall	.+3588   	; 0x1410 <__itoa_ncheck>
	itoa(reflexValues[10],str2,10);
     60c:	f8 01       	movw	r30, r16
     60e:	84 89       	ldd	r24, Z+20	; 0x14
     610:	95 89       	ldd	r25, Z+21	; 0x15
     612:	4a e0       	ldi	r20, 0x0A	; 10
     614:	be 01       	movw	r22, r28
     616:	65 5f       	subi	r22, 0xF5	; 245
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	fa d6       	rcall	.+3572   	; 0x1410 <__itoa_ncheck>
	lcd_print(lcd_build_row(str1, lcd_whitespace_adder(str2, 4), "", ""));
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	ce 01       	movw	r24, r28
     622:	0b 96       	adiw	r24, 0x0b	; 11
     624:	f6 de       	rcall	.-532    	; 0x412 <lcd_whitespace_adder>
     626:	29 e0       	ldi	r18, 0x09	; 9
     628:	31 e2       	ldi	r19, 0x21	; 33
     62a:	a9 01       	movw	r20, r18
     62c:	bc 01       	movw	r22, r24
     62e:	ce 01       	movw	r24, r28
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	cc de       	rcall	.-616    	; 0x3cc <lcd_build_row>
     634:	bd de       	rcall	.-646    	; 0x3b0 <lcd_print>
	////Write IRRL, IRRR
	lcd_cmd(0xd0);	//Set row 4 the display
	lcd_print(lcd_build_row("IRRL ", "CM_", "IRRR ", "CM"));
	*/
	
}
     636:	6e 96       	adiw	r28, 0x1e	; 30
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <adcGyro>:
 */
uint16_t adcGyro(){
	// Select which channel to make the ADC (Analog-digital converter) read on, since the gyro is connected to PA4 make a read on port 4.
	// The three bits MUX2-MUX0 selects which channel to read from where MUX2 is MSB and MUX0 is LSB
	// Clear MUX3 so no overflow occurs since sbi uses or.		
	cbi(ADMUX, MUX3);
     650:	ec e7       	ldi	r30, 0x7C	; 124
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	87 7f       	andi	r24, 0xF7	; 247
     658:	80 83       	st	Z, r24
	sbi(ADMUX, MUX2);
     65a:	80 81       	ld	r24, Z
     65c:	84 60       	ori	r24, 0x04	; 4
     65e:	80 83       	st	Z, r24
	cbi(ADMUX, MUX1);
     660:	80 81       	ld	r24, Z
     662:	8d 7f       	andi	r24, 0xFD	; 253
     664:	80 83       	st	Z, r24
	cbi(ADMUX, MUX0);
     666:	80 81       	ld	r24, Z
     668:	8e 7f       	andi	r24, 0xFE	; 254
     66a:	80 83       	st	Z, r24
	
	// For the ADC to give reliable output we have to make an extra read every time we change channel.
	//(We are also using IR-sensors which need the ADC so we have to do this extra read every time we want a value from the gyro)
	// This read is useless, see AVRs documentation for analog-digital converter.	
	sbi(ADCSRA, ADSC);
     66c:	ea e7       	ldi	r30, 0x7A	; 122
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	80 64       	ori	r24, 0x40	; 64
     674:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     676:	80 81       	ld	r24, Z
     678:	86 fd       	sbrc	r24, 6
     67a:	fd cf       	rjmp	.-6      	; 0x676 <adcGyro+0x26>
		
	// Reads the current output from the gyro
	sbi(ADCSRA, ADSC);
     67c:	ea e7       	ldi	r30, 0x7A	; 122
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	80 64       	ori	r24, 0x40	; 64
     684:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     686:	80 81       	ld	r24, Z
     688:	86 fd       	sbrc	r24, 6
     68a:	fd cf       	rjmp	.-6      	; 0x686 <adcGyro+0x36>
	
	// Since the ad converted value is saved in 2 8-bit registers
	// we have to read the first 8 low bits to not corrupt the read.
	int low = ADCL;
     68c:	80 91 78 00 	lds	r24, 0x0078
	
	// Shift the 2 high bits 8 steps, and then add the low bits 
	return (ADCH << 8) | low;
     690:	20 91 79 00 	lds	r18, 0x0079
     694:	90 e0       	ldi	r25, 0x00	; 0
}
     696:	92 2b       	or	r25, r18
     698:	08 95       	ret

0000069a <adcInit>:

void adcInit(){
	// Set the reference voltage to AVCC, 5V
	sbi(ADMUX, REFS0);
     69a:	ec e7       	ldi	r30, 0x7C	; 124
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	80 64       	ori	r24, 0x40	; 64
     6a2:	80 83       	st	Z, r24
	cbi(ADMUX, REFS1);
     6a4:	80 81       	ld	r24, Z
     6a6:	8f 77       	andi	r24, 0x7F	; 127
     6a8:	80 83       	st	Z, r24
	
	// Disable the digital input buffer
	DIDR0 = 0x0F;
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	80 93 7e 00 	sts	0x007E, r24
	
	// Enable the ADC
	sbi(ADCSRA, ADEN);	
     6b0:	ea e7       	ldi	r30, 0x7A	; 122
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	80 83       	st	Z, r24
	//		0		1		1	8
	//		1		0		0	16
	//		1		0		1	32
	//		1		1		0	64
	//		1		1		1	128
	sbi(ADCSRA,ADPS0);
     6ba:	80 81       	ld	r24, Z
     6bc:	81 60       	ori	r24, 0x01	; 1
     6be:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS1);
     6c0:	80 81       	ld	r24, Z
     6c2:	82 60       	ori	r24, 0x02	; 2
     6c4:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS2);
     6c6:	80 81       	ld	r24, Z
     6c8:	84 60       	ori	r24, 0x04	; 4
     6ca:	80 83       	st	Z, r24
     6cc:	08 95       	ret

000006ce <__vector_9>:
}


ISR(TIMER2_COMPA_vect){	
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	0b b6       	in	r0, 0x3b	; 59
     6da:	0f 92       	push	r0
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	// Read the current output from the ADC
	gyroADCValue = adcGyro();
     700:	a7 df       	rcall	.-178    	; 0x650 <adcGyro>
     702:	90 93 c6 21 	sts	0x21C6, r25
     706:	80 93 c5 21 	sts	0x21C5, r24
	
	// Calculate the difference in the newly read value and the one read at the start
	int val = gyroADCValue - defaultAngle;	
     70a:	20 91 c9 21 	lds	r18, 0x21C9
     70e:	30 91 ca 21 	lds	r19, 0x21CA
     712:	ec 01       	movw	r28, r24
     714:	c2 1b       	sub	r28, r18
     716:	d3 0b       	sbc	r29, r19
	
	// Since the ADC doesn't give the same value every time even while standing still we set a threshold
	if (abs(val) > angleThreshold){		
     718:	be 01       	movw	r22, r28
     71a:	22 f4       	brpl	.+8      	; 0x724 <__vector_9+0x56>
     71c:	66 27       	eor	r22, r22
     71e:	77 27       	eor	r23, r23
     720:	6c 1b       	sub	r22, r28
     722:	7d 0b       	sbc	r23, r29
     724:	07 2e       	mov	r0, r23
     726:	00 0c       	add	r0, r0
     728:	88 0b       	sbc	r24, r24
     72a:	99 0b       	sbc	r25, r25
     72c:	21 d5       	rcall	.+2626   	; 0x1170 <__floatsisf>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e2       	ldi	r20, 0x20	; 32
     734:	51 e4       	ldi	r21, 0x41	; 65
     736:	cc d5       	rcall	.+2968   	; 0x12d0 <__gesf2>
     738:	18 16       	cp	r1, r24
     73a:	0c f0       	brlt	.+2      	; 0x73e <__vector_9+0x70>
     73c:	90 c0       	rjmp	.+288    	; 0x85e <__vector_9+0x190>
		// Integrate the angular rate to get the new difference in angle
		float angle = angularRate*gyrotime;
		
		// Add the change to our current angle which gives us the angle which 
		// we are standing in compared to the original angle
		currentAngle += angle;
     73e:	c0 90 27 21 	lds	r12, 0x2127
     742:	d0 90 28 21 	lds	r13, 0x2128
     746:	e0 90 29 21 	lds	r14, 0x2129
     74a:	f0 90 2a 21 	lds	r15, 0x212A
	int val = gyroADCValue - defaultAngle;	
	
	// Since the ADC doesn't give the same value every time even while standing still we set a threshold
	if (abs(val) > angleThreshold){		
		// To calculate the angular rate (the current speed we are turning at)
		float angularRate = val/gain;
     74e:	be 01       	movw	r22, r28
     750:	dd 0f       	add	r29, r29
     752:	88 0b       	sbc	r24, r24
     754:	99 0b       	sbc	r25, r25
     756:	0c d5       	rcall	.+2584   	; 0x1170 <__floatsisf>
     758:	20 91 05 01 	lds	r18, 0x0105
     75c:	30 91 06 01 	lds	r19, 0x0106
     760:	40 91 07 01 	lds	r20, 0x0107
     764:	50 91 08 01 	lds	r21, 0x0108
     768:	68 d4       	rcall	.+2256   	; 0x103a <__divsf3>
		
		// Integrate the angular rate to get the new difference in angle
		float angle = angularRate*gyrotime;
     76a:	20 91 01 01 	lds	r18, 0x0101
     76e:	30 91 02 01 	lds	r19, 0x0102
     772:	40 91 03 01 	lds	r20, 0x0103
     776:	50 91 04 01 	lds	r21, 0x0104
     77a:	ae d5       	rcall	.+2908   	; 0x12d8 <__mulsf3>
     77c:	9b 01       	movw	r18, r22
     77e:	ac 01       	movw	r20, r24
		
		// Add the change to our current angle which gives us the angle which 
		// we are standing in compared to the original angle
		currentAngle += angle;
     780:	c7 01       	movw	r24, r14
     782:	b6 01       	movw	r22, r12
     784:	f2 d3       	rcall	.+2020   	; 0xf6a <__addsf3>
     786:	60 93 27 21 	sts	0x2127, r22
     78a:	70 93 28 21 	sts	0x2128, r23
     78e:	80 93 29 21 	sts	0x2129, r24
     792:	90 93 2a 21 	sts	0x212A, r25
		
		// To keep the angle within 0 to 360 degrees we either subtract or add 360 degrees 
		// as soon as we go over 360 degrees or below 0 degrees
		while (currentAngle > 359){
     796:	60 91 27 21 	lds	r22, 0x2127
     79a:	70 91 28 21 	lds	r23, 0x2128
     79e:	80 91 29 21 	lds	r24, 0x2129
     7a2:	90 91 2a 21 	lds	r25, 0x212A
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e8       	ldi	r19, 0x80	; 128
     7aa:	43 eb       	ldi	r20, 0xB3	; 179
     7ac:	53 e4       	ldi	r21, 0x43	; 67
     7ae:	90 d5       	rcall	.+2848   	; 0x12d0 <__gesf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	24 f5       	brge	.+72     	; 0x7fc <__vector_9+0x12e>
			currentAngle -= 360;
     7b4:	60 91 27 21 	lds	r22, 0x2127
     7b8:	70 91 28 21 	lds	r23, 0x2128
     7bc:	80 91 29 21 	lds	r24, 0x2129
     7c0:	90 91 2a 21 	lds	r25, 0x212A
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	44 eb       	ldi	r20, 0xB4	; 180
     7ca:	53 e4       	ldi	r21, 0x43	; 67
     7cc:	cd d3       	rcall	.+1946   	; 0xf68 <__subsf3>
     7ce:	60 93 27 21 	sts	0x2127, r22
     7d2:	70 93 28 21 	sts	0x2128, r23
     7d6:	80 93 29 21 	sts	0x2129, r24
     7da:	90 93 2a 21 	sts	0x212A, r25
		// we are standing in compared to the original angle
		currentAngle += angle;
		
		// To keep the angle within 0 to 360 degrees we either subtract or add 360 degrees 
		// as soon as we go over 360 degrees or below 0 degrees
		while (currentAngle > 359){
     7de:	60 91 27 21 	lds	r22, 0x2127
     7e2:	70 91 28 21 	lds	r23, 0x2128
     7e6:	80 91 29 21 	lds	r24, 0x2129
     7ea:	90 91 2a 21 	lds	r25, 0x212A
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e8       	ldi	r19, 0x80	; 128
     7f2:	43 eb       	ldi	r20, 0xB3	; 179
     7f4:	53 e4       	ldi	r21, 0x43	; 67
     7f6:	6c d5       	rcall	.+2776   	; 0x12d0 <__gesf2>
     7f8:	18 16       	cp	r1, r24
     7fa:	e4 f2       	brlt	.-72     	; 0x7b4 <__vector_9+0xe6>
			currentAngle -= 360;
		}
		while (currentAngle < 0){
     7fc:	60 91 27 21 	lds	r22, 0x2127
     800:	70 91 28 21 	lds	r23, 0x2128
     804:	80 91 29 21 	lds	r24, 0x2129
     808:	90 91 2a 21 	lds	r25, 0x212A
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	a9 01       	movw	r20, r18
     812:	0f d4       	rcall	.+2078   	; 0x1032 <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	1c f5       	brge	.+70     	; 0x85e <__vector_9+0x190>
			currentAngle += 360;
     818:	60 91 27 21 	lds	r22, 0x2127
     81c:	70 91 28 21 	lds	r23, 0x2128
     820:	80 91 29 21 	lds	r24, 0x2129
     824:	90 91 2a 21 	lds	r25, 0x212A
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	44 eb       	ldi	r20, 0xB4	; 180
     82e:	53 e4       	ldi	r21, 0x43	; 67
     830:	9c d3       	rcall	.+1848   	; 0xf6a <__addsf3>
     832:	60 93 27 21 	sts	0x2127, r22
     836:	70 93 28 21 	sts	0x2128, r23
     83a:	80 93 29 21 	sts	0x2129, r24
     83e:	90 93 2a 21 	sts	0x212A, r25
		// To keep the angle within 0 to 360 degrees we either subtract or add 360 degrees 
		// as soon as we go over 360 degrees or below 0 degrees
		while (currentAngle > 359){
			currentAngle -= 360;
		}
		while (currentAngle < 0){
     842:	60 91 27 21 	lds	r22, 0x2127
     846:	70 91 28 21 	lds	r23, 0x2128
     84a:	80 91 29 21 	lds	r24, 0x2129
     84e:	90 91 2a 21 	lds	r25, 0x212A
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	ec d3       	rcall	.+2008   	; 0x1032 <__cmpsf2>
     85a:	88 23       	and	r24, r24
     85c:	ec f2       	brlt	.-70     	; 0x818 <__vector_9+0x14a>
			currentAngle += 360;
		}
	}
}
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	bf 91       	pop	r27
     868:	af 91       	pop	r26
     86a:	9f 91       	pop	r25
     86c:	8f 91       	pop	r24
     86e:	7f 91       	pop	r23
     870:	6f 91       	pop	r22
     872:	5f 91       	pop	r21
     874:	4f 91       	pop	r20
     876:	3f 91       	pop	r19
     878:	2f 91       	pop	r18
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	0f 90       	pop	r0
     884:	0b be       	out	0x3b, r0	; 59
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <getBias>:

void getBias()
{
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	89 ef       	ldi	r24, 0xF9	; 249
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <getBias+0xc>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <getBias+0x12>
     8a2:	00 00       	nop
     8a4:	c5 e0       	ldi	r28, 0x05	; 5
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
	
	_delay_ms(1);
	// Make a read straight in the beginning to give a value which will count as 0 degrees
	
	int sum = 0;	
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
     8ac:	89 ef       	ldi	r24, 0xF9	; 249
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <getBias+0x20>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <getBias+0x26>
     8b6:	00 00       	nop
	
	for (int i = 0; i < 5; i++)
	{
		_delay_ms(1);
		sum += adcGyro();
     8b8:	cb de       	rcall	.-618    	; 0x650 <adcGyro>
     8ba:	08 0f       	add	r16, r24
     8bc:	19 1f       	adc	r17, r25
     8be:	21 97       	sbiw	r28, 0x01	; 1
	_delay_ms(1);
	// Make a read straight in the beginning to give a value which will count as 0 degrees
	
	int sum = 0;	
	
	for (int i = 0; i < 5; i++)
     8c0:	a9 f7       	brne	.-22     	; 0x8ac <getBias+0x1c>
	{
		_delay_ms(1);
		sum += adcGyro();
	}	
	
	int average = sum/5;
     8c2:	c8 01       	movw	r24, r16
     8c4:	65 e0       	ldi	r22, 0x05	; 5
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	6a d5       	rcall	.+2772   	; 0x139e <__divmodhi4>
	
	
	defaultAngle = average;
     8ca:	70 93 ca 21 	sts	0x21CA, r23
     8ce:	60 93 c9 21 	sts	0x21C9, r22
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	08 95       	ret

000008dc <initTimer>:

void initTimer(){	
	// Set what frequency the timer will run on, setting the prescalar to 1024
	// will give us a clock which counts to 15625, since we have a 16MHz clock 
	// Set prescalar to 1024
	sbi(TCCR2B, CS22);
     8dc:	e1 eb       	ldi	r30, 0xB1	; 177
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	84 60       	ori	r24, 0x04	; 4
     8e4:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     8e6:	80 81       	ld	r24, Z
     8e8:	82 60       	ori	r24, 0x02	; 2
     8ea:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);
     8ec:	80 81       	ld	r24, Z
     8ee:	81 60       	ori	r24, 0x01	; 1
     8f0:	80 83       	st	Z, r24
	
	// Enables the timer interrupt
	sbi(TIMSK2, OCIE2A);
     8f2:	a0 e7       	ldi	r26, 0x70	; 112
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	8c 91       	ld	r24, X
     8f8:	82 60       	ori	r24, 0x02	; 2
     8fa:	8c 93       	st	X, r24
	
	// Set the timer mode to be CTC(Clear timer on Compare match)
	// Making the timer to count to the value specified in OCR2A and then reset
	sbi(TCCR2B,WGM12);
     8fc:	80 81       	ld	r24, Z
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	80 83       	st	Z, r24
	
	// Setting the OCR2A to 50 will give us an interrupt which occurs every 3ms 
	OCR2A = 50;
     902:	82 e3       	ldi	r24, 0x32	; 50
     904:	80 93 b3 00 	sts	0x00B3, r24
     908:	08 95       	ret

0000090a <gyroInit>:
}

void gyroInit()
{
	// Initiate the ADC
	adcInit();	
     90a:	c7 de       	rcall	.-626    	; 0x69a <adcInit>
	// Initatate the timer used for the gyro
	initTimer();
     90c:	e7 cf       	rjmp	.-50     	; 0x8dc <initTimer>
     90e:	08 95       	ret

00000910 <irRead>:

#pragma IR sensor
int irRead(uint8_t channel){
	// Read from ADMUX channel
	channel &= 0b00000011;
	ADMUX &= 0b11111000;
     910:	ec e7       	ldi	r30, 0x7C	; 124
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	90 81       	ld	r25, Z
     916:	98 7f       	andi	r25, 0xF8	; 248
     918:	90 83       	st	Z, r25
	ADMUX |= channel;
     91a:	90 81       	ld	r25, Z


#pragma IR sensor
int irRead(uint8_t channel){
	// Read from ADMUX channel
	channel &= 0b00000011;
     91c:	83 70       	andi	r24, 0x03	; 3
	ADMUX &= 0b11111000;
	ADMUX |= channel;
     91e:	98 2b       	or	r25, r24
     920:	90 83       	st	Z, r25
	
	// Start first conversion (useless)
	sbi(ADCSRA, ADSC);
     922:	ea e7       	ldi	r30, 0x7A	; 122
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	80 64       	ori	r24, 0x40	; 64
     92a:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA,ADSC);
     92c:	80 81       	ld	r24, Z
     92e:	86 fd       	sbrc	r24, 6
     930:	fd cf       	rjmp	.-6      	; 0x92c <irRead+0x1c>
	
	//_delay_ms(5);
	
	// Start second conversion
	sbi(ADCSRA, ADSC);
     932:	ea e7       	ldi	r30, 0x7A	; 122
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	80 64       	ori	r24, 0x40	; 64
     93a:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA,ADSC);
     93c:	80 81       	ld	r24, Z
     93e:	86 fd       	sbrc	r24, 6
     940:	fd cf       	rjmp	.-6      	; 0x93c <irRead+0x2c>
	
	int low = ADCL;
     942:	80 91 78 00 	lds	r24, 0x0078
	int highAndLow = (ADCH << 8) | low;	
     946:	20 91 79 00 	lds	r18, 0x0079
     94a:	90 e0       	ldi	r25, 0x00	; 0
	
	return highAndLow;
}
     94c:	92 2b       	or	r25, r18
     94e:	08 95       	ret

00000950 <irInit>:

void irInit(){
	
	//DDRA = 0x00;
	// Use AREF = AVCC
	sbi(ADMUX, REFS0);
     950:	ec e7       	ldi	r30, 0x7C	; 124
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	80 64       	ori	r24, 0x40	; 64
     958:	80 83       	st	Z, r24
	cbi(ADMUX, REFS1);	
     95a:	80 81       	ld	r24, Z
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	80 83       	st	Z, r24
	
	DIDR0 = 0xFF;
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	80 93 7e 00 	sts	0x007E, r24
	
	// Enable ADC
	sbi(ADCSRA, ADEN);
     966:	ea e7       	ldi	r30, 0x7A	; 122
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	80 68       	ori	r24, 0x80	; 128
     96e:	80 83       	st	Z, r24
	//		0		1		1	8
	//		1		0		0	16
	//		1		0		1	32	
	//		1		1		0	64
	//		1		1		1	128	
	sbi(ADCSRA,ADPS0);
     970:	80 81       	ld	r24, Z
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS1);	
     976:	80 81       	ld	r24, Z
     978:	82 60       	ori	r24, 0x02	; 2
     97a:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS2);	
     97c:	80 81       	ld	r24, Z
     97e:	84 60       	ori	r24, 0x04	; 4
     980:	80 83       	st	Z, r24
     982:	08 95       	ret

00000984 <readAllIr>:
}

#pragma endregion

void readAllIr()
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	// OBS! ULTRA SOUND WORKS WORSE WHEN YOU USE CLI AND SEI
	cli();
     988:	f8 94       	cli
	//IR_read(IR_channel);
	IR_values[0] = irRead(0);
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	c1 df       	rcall	.-126    	; 0x910 <irRead>
     98e:	cb ec       	ldi	r28, 0xCB	; 203
     990:	d1 e2       	ldi	r29, 0x21	; 33
     992:	99 83       	std	Y+1, r25	; 0x01
     994:	88 83       	st	Y, r24
	IR_values[1] = irRead(1);
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	bb df       	rcall	.-138    	; 0x910 <irRead>
     99a:	9b 83       	std	Y+3, r25	; 0x03
     99c:	8a 83       	std	Y+2, r24	; 0x02
	IR_values[2] = irRead(2);
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	b7 df       	rcall	.-146    	; 0x910 <irRead>
     9a2:	9d 83       	std	Y+5, r25	; 0x05
     9a4:	8c 83       	std	Y+4, r24	; 0x04
	IR_values[3] = irRead(3);
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	b3 df       	rcall	.-154    	; 0x910 <irRead>
     9aa:	9f 83       	std	Y+7, r25	; 0x07
     9ac:	8e 83       	std	Y+6, r24	; 0x06
	sei();	
     9ae:	78 94       	sei
		
	// Needs adjustment, just placeholding
	IRBL = sensorZero[IR_values[0]];
     9b0:	e8 81       	ld	r30, Y
     9b2:	f9 81       	ldd	r31, Y+1	; 0x01
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	e7 5f       	subi	r30, 0xF7	; 247
     9ba:	f6 4e       	sbci	r31, 0xE6	; 230
     9bc:	80 81       	ld	r24, Z
     9be:	80 93 2c 21 	sts	0x212C, r24
	IRBR = sensorOne[IR_values[1]];
     9c2:	ea 81       	ldd	r30, Y+2	; 0x02
     9c4:	fb 81       	ldd	r31, Y+3	; 0x03
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	e7 5f       	subi	r30, 0xF7	; 247
     9cc:	fe 4e       	sbci	r31, 0xEE	; 238
     9ce:	80 81       	ld	r24, Z
     9d0:	80 93 2b 21 	sts	0x212B, r24
	IRFR = sensorTwo[IR_values[2]];
     9d4:	ec 81       	ldd	r30, Y+4	; 0x04
     9d6:	fd 81       	ldd	r31, Y+5	; 0x05
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	e7 5f       	subi	r30, 0xF7	; 247
     9de:	f6 4f       	sbci	r31, 0xF6	; 246
     9e0:	80 81       	ld	r24, Z
     9e2:	80 93 2d 21 	sts	0x212D, r24
	IRFL = sensorThree[IR_values[3]];	
     9e6:	ee 81       	ldd	r30, Y+6	; 0x06
     9e8:	ff 81       	ldd	r31, Y+7	; 0x07
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	e7 5f       	subi	r30, 0xF7	; 247
     9f0:	fe 4f       	sbci	r31, 0xFE	; 254
     9f2:	80 81       	ld	r24, Z
     9f4:	80 93 2e 21 	sts	0x212E, r24
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <reflex_init>:
#include "Reflexsensormodul.h"

void reflex_init()
{
	//PORTB set to output
	DDRB = 0xff;
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	84 b9       	out	0x04, r24	; 4
	//PB0 set as input
	DDRB &= ~(1<<DDB0);
     a02:	20 98       	cbi	0x04, 0	; 4
	reflex_data = 0;
     a04:	10 92 b0 21 	sts	0x21B0, r1
     a08:	10 92 af 21 	sts	0x21AF, r1
	reflexValue1 = 0;
     a0c:	10 92 6c 21 	sts	0x216C, r1
     a10:	10 92 6b 21 	sts	0x216B, r1
	reflexValue11 = 0;
     a14:	10 92 ae 21 	sts	0x21AE, r1
     a18:	10 92 ad 21 	sts	0x21AD, r1
	threshold[0] = 1024;
     a1c:	ed e6       	ldi	r30, 0x6D	; 109
     a1e:	f1 e2       	ldi	r31, 0x21	; 33
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
	threshold[1] = 780;
     a28:	2c e0       	ldi	r18, 0x0C	; 12
     a2a:	33 e0       	ldi	r19, 0x03	; 3
     a2c:	33 83       	std	Z+3, r19	; 0x03
     a2e:	22 83       	std	Z+2, r18	; 0x02
	threshold[2] = 580;
     a30:	24 e4       	ldi	r18, 0x44	; 68
     a32:	32 e0       	ldi	r19, 0x02	; 2
     a34:	35 83       	std	Z+5, r19	; 0x05
     a36:	24 83       	std	Z+4, r18	; 0x04
	threshold[3] = 710;
     a38:	26 ec       	ldi	r18, 0xC6	; 198
     a3a:	32 e0       	ldi	r19, 0x02	; 2
     a3c:	37 83       	std	Z+7, r19	; 0x07
     a3e:	26 83       	std	Z+6, r18	; 0x06
	threshold[4] = 750;
     a40:	2e ee       	ldi	r18, 0xEE	; 238
     a42:	32 e0       	ldi	r19, 0x02	; 2
     a44:	31 87       	std	Z+9, r19	; 0x09
     a46:	20 87       	std	Z+8, r18	; 0x08
	threshold[5] = 620;
     a48:	2c e6       	ldi	r18, 0x6C	; 108
     a4a:	32 e0       	ldi	r19, 0x02	; 2
     a4c:	33 87       	std	Z+11, r19	; 0x0b
     a4e:	22 87       	std	Z+10, r18	; 0x0a
	threshold[6] = 670;
     a50:	4e e9       	ldi	r20, 0x9E	; 158
     a52:	52 e0       	ldi	r21, 0x02	; 2
     a54:	55 87       	std	Z+13, r21	; 0x0d
     a56:	44 87       	std	Z+12, r20	; 0x0c
	threshold[7] = 650;
     a58:	4a e8       	ldi	r20, 0x8A	; 138
     a5a:	52 e0       	ldi	r21, 0x02	; 2
     a5c:	57 87       	std	Z+15, r21	; 0x0f
     a5e:	46 87       	std	Z+14, r20	; 0x0e
	threshold[8] = 660;
     a60:	44 e9       	ldi	r20, 0x94	; 148
     a62:	52 e0       	ldi	r21, 0x02	; 2
     a64:	51 8b       	std	Z+17, r21	; 0x11
     a66:	40 8b       	std	Z+16, r20	; 0x10
	threshold[9] = 620;
     a68:	33 8b       	std	Z+19, r19	; 0x13
     a6a:	22 8b       	std	Z+18, r18	; 0x12
	threshold[10] = 1024;
     a6c:	95 8b       	std	Z+21, r25	; 0x15
     a6e:	84 8b       	std	Z+20, r24	; 0x14
     a70:	08 95       	ret

00000a72 <adcRead>:
}

int adcRead(){	
	cbi(ADMUX, MUX3);
     a72:	ec e7       	ldi	r30, 0x7C	; 124
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	87 7f       	andi	r24, 0xF7	; 247
     a7a:	80 83       	st	Z, r24
	sbi(ADMUX, MUX2);
     a7c:	80 81       	ld	r24, Z
     a7e:	84 60       	ori	r24, 0x04	; 4
     a80:	80 83       	st	Z, r24
	cbi(ADMUX, MUX1);
     a82:	80 81       	ld	r24, Z
     a84:	8d 7f       	andi	r24, 0xFD	; 253
     a86:	80 83       	st	Z, r24
	sbi(ADMUX, MUX0);	
     a88:	80 81       	ld	r24, Z
     a8a:	81 60       	ori	r24, 0x01	; 1
     a8c:	80 83       	st	Z, r24
	
	// For the ADC to give reliable output we have to make an extra read every time we change channel.
	//(We are also using IR-sensors which need the ADC so we have to do this extra read every time we want a value from the gyro)
	// This read is useless, see AVRs documentation for analog-digital converter.
	sbi(ADCSRA, ADSC);
     a8e:	ea e7       	ldi	r30, 0x7A	; 122
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	80 64       	ori	r24, 0x40	; 64
     a96:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     a98:	80 81       	ld	r24, Z
     a9a:	86 fd       	sbrc	r24, 6
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <adcRead+0x26>
	
	// Reads the current output from the gyro
	sbi(ADCSRA, ADSC);
     a9e:	ea e7       	ldi	r30, 0x7A	; 122
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	80 64       	ori	r24, 0x40	; 64
     aa6:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     aa8:	80 81       	ld	r24, Z
     aaa:	86 fd       	sbrc	r24, 6
     aac:	fd cf       	rjmp	.-6      	; 0xaa8 <adcRead+0x36>
	
	// Since the ad converted value is saved in 2 8-bit registers
	// we have to read the first 8 low bits to not corrupt the read.
	int low = ADCL;
     aae:	80 91 78 00 	lds	r24, 0x0078
	
	// Shift the 2 high bits 8 steps, and then add the low bits
	return (ADCH << 8) | low;	
     ab2:	20 91 79 00 	lds	r18, 0x0079
     ab6:	90 e0       	ldi	r25, 0x00	; 0
}
     ab8:	92 2b       	or	r25, r18
     aba:	08 95       	ret

00000abc <reflex_run>:

void reflex_run(int channel_select)
{
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	8c 01       	movw	r16, r24
	//Sends channel data on PB1-PB4 and enable signal on PB5.
	PORTB = (channel_select<<1) | (1<<PB5);
     ac6:	ec 01       	movw	r28, r24
     ac8:	cc 0f       	add	r28, r28
     aca:	dd 1f       	adc	r29, r29
     acc:	8c 2f       	mov	r24, r28
     ace:	80 62       	ori	r24, 0x20	; 32
     ad0:	85 b9       	out	0x05, r24	; 5
     ad2:	87 e8       	ldi	r24, 0x87	; 135
     ad4:	93 e1       	ldi	r25, 0x13	; 19
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <reflex_run+0x1a>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <reflex_run+0x20>
     adc:	00 00       	nop
	//int testing = 0b00000111111;
	//Receives response data on PB0
	_delay_ms(20);
	int compareData = adcRead();
     ade:	c9 df       	rcall	.-110    	; 0xa72 <adcRead>
	// Saves the values of sensor 1 and 11 in seperate variables, used for the display and to calibrate the threshold
	//if (reflexValues[channel_select] < threshold[channel_select]){
		reflexValues[channel_select] = compareData;
     ae0:	fe 01       	movw	r30, r28
     ae2:	ed 57       	subi	r30, 0x7D	; 125
     ae4:	fe 4d       	sbci	r31, 0xDE	; 222
     ae6:	91 83       	std	Z+1, r25	; 0x01
     ae8:	80 83       	st	Z, r24
	//}
	if (compareData < threshold[channel_select]){
     aea:	c3 59       	subi	r28, 0x93	; 147
     aec:	de 4d       	sbci	r29, 0xDE	; 222
     aee:	28 81       	ld	r18, Y
     af0:	39 81       	ldd	r19, Y+1	; 0x01
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	a4 f4       	brge	.+40     	; 0xb20 <reflex_run+0x64>
		reflex_data &= ~(1 << channel_select);
     af8:	20 91 af 21 	lds	r18, 0x21AF
     afc:	30 91 b0 21 	lds	r19, 0x21B0
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <reflex_run+0x4e>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 95       	dec	r16
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <reflex_run+0x4a>
     b0e:	80 95       	com	r24
     b10:	90 95       	com	r25
     b12:	82 23       	and	r24, r18
     b14:	93 23       	and	r25, r19
     b16:	90 93 b0 21 	sts	0x21B0, r25
     b1a:	80 93 af 21 	sts	0x21AF, r24
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <reflex_run+0x86>
	}
	else{
		reflex_data |= (1 << channel_select);
     b20:	20 91 af 21 	lds	r18, 0x21AF
     b24:	30 91 b0 21 	lds	r19, 0x21B0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <reflex_run+0x76>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	0a 95       	dec	r16
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <reflex_run+0x72>
     b36:	82 2b       	or	r24, r18
     b38:	93 2b       	or	r25, r19
     b3a:	90 93 b0 21 	sts	0x21B0, r25
     b3e:	80 93 af 21 	sts	0x21AF, r24
	}
	
	/*
	reflex_data[channel_select] = (PINB & (1<<PB0));	
	*/
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <reflex_run_all>:

void reflex_run_all(){
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	for (int i = 10; i >= 0; i--)
     b50:	ca e0       	ldi	r28, 0x0A	; 10
     b52:	d0 e0       	ldi	r29, 0x00	; 0
	{
		reflex_run(i);
     b54:	ce 01       	movw	r24, r28
     b56:	b2 df       	rcall	.-156    	; 0xabc <reflex_run>
	reflex_data[channel_select] = (PINB & (1<<PB0));	
	*/
}

void reflex_run_all(){
	for (int i = 10; i >= 0; i--)
     b58:	21 97       	sbiw	r28, 0x01	; 1
     b5a:	e0 f7       	brcc	.-8      	; 0xb54 <reflex_run_all+0x8>
	{
		reflex_run(i);
	}
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <calibrateReflexSensors>:


void calibrateReflexSensors(){	
     b62:	08 95       	ret

00000b64 <combineData>:
bool startButton;
//bool mode;
int reflex;
volatile int mode; 

void combineData(){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	//startButton = false;
	TWIdata[0] = 0x00; // trash data because the first two bytes dont work
     b68:	e0 91 31 21 	lds	r30, 0x2131
     b6c:	f0 91 32 21 	lds	r31, 0x2132
     b70:	10 82       	st	Z, r1
	TWIdata[1] = 0x00;
     b72:	e0 91 31 21 	lds	r30, 0x2131
     b76:	f0 91 32 21 	lds	r31, 0x2132
     b7a:	11 82       	std	Z+1, r1	; 0x01
	TWIdata[2] = (1<<7) | (startButton << 6) | ( 1 < mode);
     b7c:	c0 91 31 21 	lds	r28, 0x2131
     b80:	d0 91 32 21 	lds	r29, 0x2132
     b84:	20 91 d9 21 	lds	r18, 0x21D9
     b88:	30 91 da 21 	lds	r19, 0x21DA
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	31 05       	cpc	r19, r1
     b92:	0c f4       	brge	.+2      	; 0xb96 <combineData+0x32>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	28 2f       	mov	r18, r24
     b98:	20 68       	ori	r18, 0x80	; 128
     b9a:	90 91 db 21 	lds	r25, 0x21DB
     b9e:	30 e4       	ldi	r19, 0x40	; 64
     ba0:	93 9f       	mul	r25, r19
     ba2:	c0 01       	movw	r24, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	82 2b       	or	r24, r18
     ba8:	8a 83       	std	Y+2, r24	; 0x02
	TWIdata[3] = (reflex_data >> 8);
     baa:	80 91 af 21 	lds	r24, 0x21AF
     bae:	90 91 b0 21 	lds	r25, 0x21B0
     bb2:	9b 83       	std	Y+3, r25	; 0x03
	TWIdata[4] = reflex_data;
     bb4:	80 91 af 21 	lds	r24, 0x21AF
     bb8:	90 91 b0 21 	lds	r25, 0x21B0
     bbc:	8c 83       	std	Y+4, r24	; 0x04
	TWIdata[5] = ((int)currentAngle >> 8);
     bbe:	60 91 27 21 	lds	r22, 0x2127
     bc2:	70 91 28 21 	lds	r23, 0x2128
     bc6:	80 91 29 21 	lds	r24, 0x2129
     bca:	90 91 2a 21 	lds	r25, 0x212A
     bce:	9d d2       	rcall	.+1338   	; 0x110a <__fixsfsi>
     bd0:	7d 83       	std	Y+5, r23	; 0x05
	TWIdata[6] = (int)currentAngle;
     bd2:	60 91 27 21 	lds	r22, 0x2127
     bd6:	70 91 28 21 	lds	r23, 0x2128
     bda:	80 91 29 21 	lds	r24, 0x2129
     bde:	90 91 2a 21 	lds	r25, 0x212A
     be2:	93 d2       	rcall	.+1318   	; 0x110a <__fixsfsi>
     be4:	6e 83       	std	Y+6, r22	; 0x06
	TWIdata[7] = ((int)distanceFront >> 8);
     be6:	60 91 d5 21 	lds	r22, 0x21D5
     bea:	70 91 d6 21 	lds	r23, 0x21D6
     bee:	80 91 d7 21 	lds	r24, 0x21D7
     bf2:	90 91 d8 21 	lds	r25, 0x21D8
     bf6:	89 d2       	rcall	.+1298   	; 0x110a <__fixsfsi>
     bf8:	7f 83       	std	Y+7, r23	; 0x07
	TWIdata[8] = (int)distanceFront;
     bfa:	60 91 d5 21 	lds	r22, 0x21D5
     bfe:	70 91 d6 21 	lds	r23, 0x21D6
     c02:	80 91 d7 21 	lds	r24, 0x21D7
     c06:	90 91 d8 21 	lds	r25, 0x21D8
     c0a:	7f d2       	rcall	.+1278   	; 0x110a <__fixsfsi>
     c0c:	68 87       	std	Y+8, r22	; 0x08
	TWIdata[9] = ((int)distanceBack >> 8);
     c0e:	60 91 dc 21 	lds	r22, 0x21DC
     c12:	70 91 dd 21 	lds	r23, 0x21DD
     c16:	80 91 de 21 	lds	r24, 0x21DE
     c1a:	90 91 df 21 	lds	r25, 0x21DF
     c1e:	75 d2       	rcall	.+1258   	; 0x110a <__fixsfsi>
     c20:	79 87       	std	Y+9, r23	; 0x09
	TWIdata[10] = (int)distanceBack;
     c22:	60 91 dc 21 	lds	r22, 0x21DC
     c26:	70 91 dd 21 	lds	r23, 0x21DD
     c2a:	80 91 de 21 	lds	r24, 0x21DE
     c2e:	90 91 df 21 	lds	r25, 0x21DF
     c32:	6b d2       	rcall	.+1238   	; 0x110a <__fixsfsi>
     c34:	6a 87       	std	Y+10, r22	; 0x0a
	TWIdata[11] = IRFR;
     c36:	80 91 2d 21 	lds	r24, 0x212D
     c3a:	8b 87       	std	Y+11, r24	; 0x0b
	TWIdata[12] = IRFL;
     c3c:	80 91 2e 21 	lds	r24, 0x212E
     c40:	8c 87       	std	Y+12, r24	; 0x0c
	TWIdata[13] = IRBR;
     c42:	80 91 2b 21 	lds	r24, 0x212B
     c46:	8d 87       	std	Y+13, r24	; 0x0d
	TWIdata[14] = IRBL;
     c48:	80 91 2c 21 	lds	r24, 0x212C
     c4c:	8e 87       	std	Y+14, r24	; 0x0e
	TWIdata[15] = 0;
     c4e:	1f 86       	std	Y+15, r1	; 0x0f
	TWIdata[16] = 0;
     c50:	18 8a       	std	Y+16, r1	; 0x10
	TWIdata[12] = 'm';
	TWIdata[13] = 'n';
	TWIdata[14] = 'o';
	TWIdata[15] = 'p';
	TWIdata[16] = 'q';*/
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <__vector_5>:

ISR(PCINT1_vect){
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
	if (bit_is_set(PINB,7)){
     c66:	1f 9b       	sbis	0x03, 7	; 3
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <__vector_5+0x1e>
		startButton ^= true;
     c6a:	90 91 db 21 	lds	r25, 0x21DB
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	89 27       	eor	r24, r25
     c72:	80 93 db 21 	sts	0x21DB, r24
	}
}
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <startButtonInit>:

void startButtonInit(){
	DDRB &= ~(1<<PB7);
     c84:	27 98       	cbi	0x04, 7	; 4
	
	PCMSK1 |= (1 << PCINT15); // Enables external interrupt on PB7
     c86:	ec e6       	ldi	r30, 0x6C	; 108
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 68       	ori	r24, 0x80	; 128
     c8e:	80 83       	st	Z, r24
		
	PCICR |= (1 << PCIE1);			
     c90:	e8 e6       	ldi	r30, 0x68	; 104
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
     c9a:	08 95       	ret

00000c9c <main>:
     c9c:	2f e7       	ldi	r18, 0x7F	; 127
     c9e:	84 e8       	ldi	r24, 0x84	; 132
     ca0:	9e e1       	ldi	r25, 0x1E	; 30
     ca2:	21 50       	subi	r18, 0x01	; 1
     ca4:	80 40       	sbci	r24, 0x00	; 0
     ca6:	90 40       	sbci	r25, 0x00	; 0
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x6>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <main+0x10>
     cac:	00 00       	nop
}

int main(void){
	_delay_ms(10000); // Gives time for everything to start up before we init.
	startButton = false;
     cae:	10 92 db 21 	sts	0x21DB, r1
	mode = false;
     cb2:	10 92 da 21 	sts	0x21DA, r1
     cb6:	10 92 d9 21 	sts	0x21D9, r1
	int modeArray[8];
	irInit();	
     cba:	4a de       	rcall	.-876    	; 0x950 <irInit>
	lcd_init();
     cbc:	ee da       	rcall	.-2596   	; 0x29a <lcd_init>
	gyroInit();	
     cbe:	25 de       	rcall	.-950    	; 0x90a <gyroInit>
	initBuss(0b00000100);
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	ae da       	rcall	.-2724   	; 0x220 <initBuss>
	ultrasoundInit();
     cc4:	4b d1       	rcall	.+662    	; 0xf5c <ultrasoundInit>
	reflex_init();
     cc6:	9b de       	rcall	.-714    	; 0x9fe <reflex_init>
	startButtonInit();
     cc8:	dd df       	rcall	.-70     	; 0xc84 <startButtonInit>
	combineData();
     cca:	4c df       	rcall	.-360    	; 0xb64 <combineData>
	test =0;
     ccc:	10 92 36 21 	sts	0x2136, r1
     cd0:	10 92 35 21 	sts	0x2135, r1
	getBias();
     cd4:	dd dd       	rcall	.-1094   	; 0x890 <getBias>
	sei();
     cd6:	78 94       	sei
	DDRC |= (1 << 7); // Set PC7 as output for testing
     cd8:	3f 9a       	sbi	0x07, 7	; 7
	DDRB |= (1 << 0);
     cda:	20 9a       	sbi	0x04, 0	; 4
	// DDRA &= ~(1 << 7); // Set PA7 as input to get information from the switch ULTRA SOUND USES THIS PIN
	while(1){
		//int test = PINA7;
		if (bit_is_set(PINB, 0)){
			mode = 1;
     cdc:	88 24       	eor	r8, r8
     cde:	83 94       	inc	r8
     ce0:	91 2c       	mov	r9, r1
		//while(sending); //wait with turning off interrupts until we are done sending data
		
		// OBS! ULTRA SOUND WORKS WORSE WHEN YOU USE CLI AND SEI
		
		cli();
		lcd_update(mode,reflexValue1,reflexValues[1], reflexValues[2],IRFL, IRFR, IRBL, IRBR);
     ce2:	c3 e8       	ldi	r28, 0x83	; 131
     ce4:	d1 e2       	ldi	r29, 0x21	; 33
     ce6:	77 24       	eor	r7, r7
     ce8:	73 94       	inc	r7
     cea:	61 2c       	mov	r6, r1
	DDRC |= (1 << 7); // Set PC7 as output for testing
	DDRB |= (1 << 0);
	// DDRA &= ~(1 << 7); // Set PA7 as input to get information from the switch ULTRA SOUND USES THIS PIN
	while(1){
		//int test = PINA7;
		if (bit_is_set(PINB, 0)){
     cec:	18 9b       	sbis	0x03, 0	; 3
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <main+0x5e>
			mode = 1;
     cf0:	90 92 da 21 	sts	0x21DA, r9
     cf4:	80 92 d9 21 	sts	0x21D9, r8
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <main+0x66>
		}
		else{
			mode = 0;
     cfa:	10 92 da 21 	sts	0x21DA, r1
     cfe:	10 92 d9 21 	sts	0x21D9, r1
     d02:	83 ec       	ldi	r24, 0xC3	; 195
     d04:	99 e0       	ldi	r25, 0x09	; 9
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <main+0x6a>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <main+0x70>
     d0c:	00 00       	nop
		}
						
		_delay_ms(10); // Necessary but why?
		readAllIr();
     d0e:	3a de       	rcall	.-908    	; 0x984 <readAllIr>
		reflex_run_all();
     d10:	1d df       	rcall	.-454    	; 0xb4c <reflex_run_all>
		// OBS: If it is not used, it takes a lot of time for the data on the bus from the sensor module to the communications module to transfer. But everything else works properly.
		//while(sending); //wait with turning off interrupts until we are done sending data
		
		// OBS! ULTRA SOUND WORKS WORSE WHEN YOU USE CLI AND SEI
		
		cli();
     d12:	f8 94       	cli
		lcd_update(mode,reflexValue1,reflexValues[1], reflexValues[2],IRFL, IRFR, IRBL, IRBR);
     d14:	a0 90 2b 21 	lds	r10, 0x212B
     d18:	c0 90 2c 21 	lds	r12, 0x212C
     d1c:	e0 90 2d 21 	lds	r14, 0x212D
     d20:	00 91 2e 21 	lds	r16, 0x212E
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	4a 81       	ldd	r20, Y+2	; 0x02
     d2a:	5b 81       	ldd	r21, Y+3	; 0x03
     d2c:	60 91 6b 21 	lds	r22, 0x216B
     d30:	70 91 6c 21 	lds	r23, 0x216C
     d34:	e0 91 d9 21 	lds	r30, 0x21D9
     d38:	f0 91 da 21 	lds	r31, 0x21DA
     d3c:	b1 2c       	mov	r11, r1
     d3e:	d1 2c       	mov	r13, r1
     d40:	f1 2c       	mov	r15, r1
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	87 2d       	mov	r24, r7
     d46:	ef 2b       	or	r30, r31
     d48:	09 f4       	brne	.+2      	; 0xd4c <main+0xb0>
     d4a:	86 2d       	mov	r24, r6
     d4c:	b6 db       	rcall	.-2196   	; 0x4ba <lcd_update>
		combineData();
     d4e:	0a df       	rcall	.-492    	; 0xb64 <combineData>
		sei();		
     d50:	78 94       	sei
	}
     d52:	cc cf       	rjmp	.-104    	; 0xcec <main+0x50>

00000d54 <timer1_init>:
volatile double distance;

// initialize timer1
void timer1_init()
{
	TCNT1 = 0; // initialize counter
     d54:	10 92 85 00 	sts	0x0085, r1
     d58:	10 92 84 00 	sts	0x0084, r1
	
	// -- CALCULATION OF OCR1A VALUE TO GENERATE A PULSE EVERY 100ms --
	// OCR1A = (Clock_Speed / (Prescaler * Output_frequency)) - 1
	//		= (16000000 / (64 * 10)) - 1
	//		= 24999
	OCR1A = 24999; // Set CTC compare value to 24999, which is 100 ms (aka 10 Hz)
     d5c:	87 ea       	ldi	r24, 0xA7	; 167
     d5e:	91 e6       	ldi	r25, 0x61	; 97
     d60:	90 93 89 00 	sts	0x0089, r25
     d64:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A); // enable compare interrupt
     d68:	ef e6       	ldi	r30, 0x6F	; 111
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << WGM12); // Configure timer1 for CTC mode
     d72:	e1 e8       	ldi	r30, 0x81	; 129
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 60       	ori	r24, 0x08	; 8
     d7a:	80 83       	st	Z, r24
	
	// OBS!!! TESTING WITH CS12 instead of CS11 which gives a prescale with 1024
	TCCR1B |= (1 << CS11)|(1 << CS10);  // Prescale with 64, setting the frequency of timer1 to 2MHz
     d7c:	80 81       	ld	r24, Z
     d7e:	83 60       	ori	r24, 0x03	; 3
     d80:	80 83       	st	Z, r24
     d82:	08 95       	ret

00000d84 <ext_interrupt_init>:
}

// initialize external interrupt on PCINT0 and PCINT2
void ext_interrupt_init() {
	PCMSK2 |= (1 << PCINT22); // Enables external interrupt on PC6 (Front)
     d84:	ed e6       	ldi	r30, 0x6D	; 109
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT7); // Enables external interrupt on PA7 (Rear)
     d8e:	eb e6       	ldi	r30, 0x6B	; 107
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	80 83       	st	Z, r24
	
	// When the PCIE2 bit is set (one) and the I-bit in the Status Register (SREG) is set (one), pin
	// change interrupt 2 is enabled. Any change on any enabled PCINT23..16 pin will cause an interrupt.
	// When the PCIE0 bit is set (one) and the I-bit in the Status Register (SREG) is set (one), pin
	//change interrupt 0 is enabled. Any change on any enabled PCINT7..0 pin will cause an interrupt.
	PCICR |= (1 << PCIE2) | (1 << PCIE0);	
     d98:	e8 e6       	ldi	r30, 0x68	; 104
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	85 60       	ori	r24, 0x05	; 5
     da0:	80 83       	st	Z, r24
     da2:	08 95       	ret

00000da4 <calculate_distance>:
}

double calculate_distance(volatile int end_value){
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	00 d0       	rcall	.+0      	; 0xdaa <calculate_distance+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
	double time = end_value * 0.0004;	// SHOULD BE 0.0004!!! 0.0064 is for testing! 4 is how long a clock time period takes in centiseconds
     db2:	69 81       	ldd	r22, Y+1	; 0x01
     db4:	7a 81       	ldd	r23, Y+2	; 0x02
     db6:	07 2e       	mov	r0, r23
     db8:	00 0c       	add	r0, r0
     dba:	88 0b       	sbc	r24, r24
     dbc:	99 0b       	sbc	r25, r25
     dbe:	d8 d1       	rcall	.+944    	; 0x1170 <__floatsisf>
     dc0:	27 e1       	ldi	r18, 0x17	; 23
     dc2:	37 eb       	ldi	r19, 0xB7	; 183
     dc4:	41 ed       	ldi	r20, 0xD1	; 209
     dc6:	59 e3       	ldi	r21, 0x39	; 57
     dc8:	87 d2       	rcall	.+1294   	; 0x12d8 <__mulsf3>
	double distance = 343 * time/2;		// distance = 343 * time/2, (Speed of sound = 343 m/s in air. Divided by two because the signal bounces back and forth)
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e8       	ldi	r19, 0x80	; 128
     dce:	4b ea       	ldi	r20, 0xAB	; 171
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	82 d2       	rcall	.+1284   	; 0x12d8 <__mulsf3>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	7d d2       	rcall	.+1274   	; 0x12d8 <__mulsf3>
	return distance; // Distance is in centimeters
	// return end_value*0.0686 also works for returning centimeters probably (it's a simplified version)
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <__vector_13>:

ISR (TIMER1_COMPA_vect) {
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	8f 93       	push	r24
	//_delay_us(250);
	//PCMSK2 &= ~(1 << PCINT22); // Disables external interrupt on PC6 (Front)
	//PCMSK0 &= ~(1 << PCINT7); // Disables external interrupt on PA7 (Rear)
	
	PORTA |= (1 << DDA6);	// Set PTI to 1
     df4:	16 9a       	sbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df6:	8a e6       	ldi	r24, 0x6A	; 106
     df8:	8a 95       	dec	r24
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <__vector_13+0x10>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <__vector_13+0x16>
	_delay_us(20);			// Count for 20 micro seconds
	PORTA &= ~(1 << DDA6);	// Set PTI to 0
     dfe:	16 98       	cbi	0x02, 6	; 2
	//_delay_us(250);
	
	//PCMSK2 |= (1 << PCINT22); // Enables external interrupt on PC6 (Front)
	//PCMSK0 |= (1 << PCINT7); // Enables external interrupt on PA7 (Rear)
}
     e00:	8f 91       	pop	r24
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_6>:

ISR(PCINT2_vect) //interrupt service routine when PCINT2 changes (PC6)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0b b6       	in	r0, 0x3b	; 59
     e18:	0f 92       	push	r0
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
	if (!(PINC & (1 << DDC6))) // Check if echo line is falling, thats when we want to stop counting. 
     e32:	36 99       	sbic	0x06, 6	; 6
     e34:	24 c0       	rjmp	.+72     	; 0xe7e <__vector_6+0x72>
	{
		end_value_front = TCNT1;	// Save the timer value when echo input (PC6) goes low
     e36:	80 91 84 00 	lds	r24, 0x0084
     e3a:	90 91 85 00 	lds	r25, 0x0085
     e3e:	90 93 ef 21 	sts	0x21EF, r25
     e42:	80 93 ee 21 	sts	0x21EE, r24
		difference_front = end_value_front - start_value_front;
     e46:	80 91 ee 21 	lds	r24, 0x21EE
     e4a:	90 91 ef 21 	lds	r25, 0x21EF
     e4e:	20 91 e2 21 	lds	r18, 0x21E2
     e52:	30 91 e3 21 	lds	r19, 0x21E3
     e56:	82 1b       	sub	r24, r18
     e58:	93 0b       	sbc	r25, r19
     e5a:	90 93 e7 21 	sts	0x21E7, r25
     e5e:	80 93 e6 21 	sts	0x21E6, r24
		distanceFront = calculate_distance(difference_front);
     e62:	80 91 e6 21 	lds	r24, 0x21E6
     e66:	90 91 e7 21 	lds	r25, 0x21E7
     e6a:	9c df       	rcall	.-200    	; 0xda4 <calculate_distance>
     e6c:	60 93 d5 21 	sts	0x21D5, r22
     e70:	70 93 d6 21 	sts	0x21D6, r23
     e74:	80 93 d7 21 	sts	0x21D7, r24
     e78:	90 93 d8 21 	sts	0x21D8, r25
     e7c:	08 c0       	rjmp	.+16     	; 0xe8e <__vector_6+0x82>
	}
	else{
		start_value_front = TCNT1;
     e7e:	80 91 84 00 	lds	r24, 0x0084
     e82:	90 91 85 00 	lds	r25, 0x0085
     e86:	90 93 e3 21 	sts	0x21E3, r25
     e8a:	80 93 e2 21 	sts	0x21E2, r24
	}
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0b be       	out	0x3b, r0	; 59
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_4>:

ISR(PCINT0_vect) //interrupt service routine when PCINT0 changes(PA7)
{	
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	0b b6       	in	r0, 0x3b	; 59
     ec0:	0f 92       	push	r0
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
	if (!(PINA & (1 << DDA7)))	// Check if Echo Line is falling, thats when we want to stop counting. 
     eda:	07 99       	sbic	0x00, 7	; 0
     edc:	24 c0       	rjmp	.+72     	; 0xf26 <__vector_4+0x72>
	{
		end_value_back = TCNT1;	// Save the timer value when echo input (PA7) goes low
     ede:	80 91 84 00 	lds	r24, 0x0084
     ee2:	90 91 85 00 	lds	r25, 0x0085
     ee6:	90 93 f1 21 	sts	0x21F1, r25
     eea:	80 93 f0 21 	sts	0x21F0, r24
		difference_back = end_value_back - start_value_back;
     eee:	80 91 f0 21 	lds	r24, 0x21F0
     ef2:	90 91 f1 21 	lds	r25, 0x21F1
     ef6:	20 91 e8 21 	lds	r18, 0x21E8
     efa:	30 91 e9 21 	lds	r19, 0x21E9
     efe:	82 1b       	sub	r24, r18
     f00:	93 0b       	sbc	r25, r19
     f02:	90 93 e5 21 	sts	0x21E5, r25
     f06:	80 93 e4 21 	sts	0x21E4, r24
		distanceBack = calculate_distance(difference_back);
     f0a:	80 91 e4 21 	lds	r24, 0x21E4
     f0e:	90 91 e5 21 	lds	r25, 0x21E5
     f12:	48 df       	rcall	.-368    	; 0xda4 <calculate_distance>
     f14:	60 93 dc 21 	sts	0x21DC, r22
     f18:	70 93 dd 21 	sts	0x21DD, r23
     f1c:	80 93 de 21 	sts	0x21DE, r24
     f20:	90 93 df 21 	sts	0x21DF, r25
     f24:	08 c0       	rjmp	.+16     	; 0xf36 <__vector_4+0x82>
	} else 
	{
		start_value_back = TCNT1;
     f26:	80 91 84 00 	lds	r24, 0x0084
     f2a:	90 91 85 00 	lds	r25, 0x0085
     f2e:	90 93 e9 21 	sts	0x21E9, r25
     f32:	80 93 e8 21 	sts	0x21E8, r24
	}
}
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0b be       	out	0x3b, r0	; 59
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <ultrasoundInit>:

void ultrasoundInit()
{
	DDRA |= (1<<DDA6); // Set PTI (PA6) as output
     f5c:	0e 9a       	sbi	0x01, 6	; 1
	DDRA &= ~(1 << 7); // Set PA7 as input
     f5e:	0f 98       	cbi	0x01, 7	; 1
	DDRC &= ~(1 << 6); // Set PC6 as input
     f60:	3e 98       	cbi	0x07, 6	; 7
	
	ext_interrupt_init();
     f62:	10 df       	rcall	.-480    	; 0xd84 <ext_interrupt_init>
	timer1_init();
     f64:	f7 ce       	rjmp	.-530    	; 0xd54 <timer1_init>
     f66:	08 95       	ret

00000f68 <__subsf3>:
     f68:	50 58       	subi	r21, 0x80	; 128

00000f6a <__addsf3>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	aa 27       	eor	r26, r26
     f6e:	0e d0       	rcall	.+28     	; 0xf8c <__addsf3x>
     f70:	75 c1       	rjmp	.+746    	; 0x125c <__fp_round>
     f72:	66 d1       	rcall	.+716    	; 0x1240 <__fp_pscA>
     f74:	30 f0       	brcs	.+12     	; 0xf82 <__addsf3+0x18>
     f76:	6b d1       	rcall	.+726    	; 0x124e <__fp_pscB>
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__addsf3+0x18>
     f7a:	31 f4       	brne	.+12     	; 0xf88 <__addsf3+0x1e>
     f7c:	9f 3f       	cpi	r25, 0xFF	; 255
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__addsf3+0x1a>
     f80:	1e f4       	brtc	.+6      	; 0xf88 <__addsf3+0x1e>
     f82:	5b c1       	rjmp	.+694    	; 0x123a <__fp_nan>
     f84:	0e f4       	brtc	.+2      	; 0xf88 <__addsf3+0x1e>
     f86:	e0 95       	com	r30
     f88:	e7 fb       	bst	r30, 7
     f8a:	51 c1       	rjmp	.+674    	; 0x122e <__fp_inf>

00000f8c <__addsf3x>:
     f8c:	e9 2f       	mov	r30, r25
     f8e:	77 d1       	rcall	.+750    	; 0x127e <__fp_split3>
     f90:	80 f3       	brcs	.-32     	; 0xf72 <__addsf3+0x8>
     f92:	ba 17       	cp	r27, r26
     f94:	62 07       	cpc	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	95 07       	cpc	r25, r21
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <__addsf3x+0x18>
     f9e:	71 f4       	brne	.+28     	; 0xfbc <__addsf3x+0x30>
     fa0:	9e f5       	brtc	.+102    	; 0x1008 <__addsf3x+0x7c>
     fa2:	8f c1       	rjmp	.+798    	; 0x12c2 <__fp_zero>
     fa4:	0e f4       	brtc	.+2      	; 0xfa8 <__addsf3x+0x1c>
     fa6:	e0 95       	com	r30
     fa8:	0b 2e       	mov	r0, r27
     faa:	ba 2f       	mov	r27, r26
     fac:	a0 2d       	mov	r26, r0
     fae:	0b 01       	movw	r0, r22
     fb0:	b9 01       	movw	r22, r18
     fb2:	90 01       	movw	r18, r0
     fb4:	0c 01       	movw	r0, r24
     fb6:	ca 01       	movw	r24, r20
     fb8:	a0 01       	movw	r20, r0
     fba:	11 24       	eor	r1, r1
     fbc:	ff 27       	eor	r31, r31
     fbe:	59 1b       	sub	r21, r25
     fc0:	99 f0       	breq	.+38     	; 0xfe8 <__addsf3x+0x5c>
     fc2:	59 3f       	cpi	r21, 0xF9	; 249
     fc4:	50 f4       	brcc	.+20     	; 0xfda <__addsf3x+0x4e>
     fc6:	50 3e       	cpi	r21, 0xE0	; 224
     fc8:	68 f1       	brcs	.+90     	; 0x1024 <__addsf3x+0x98>
     fca:	1a 16       	cp	r1, r26
     fcc:	f0 40       	sbci	r31, 0x00	; 0
     fce:	a2 2f       	mov	r26, r18
     fd0:	23 2f       	mov	r18, r19
     fd2:	34 2f       	mov	r19, r20
     fd4:	44 27       	eor	r20, r20
     fd6:	58 5f       	subi	r21, 0xF8	; 248
     fd8:	f3 cf       	rjmp	.-26     	; 0xfc0 <__addsf3x+0x34>
     fda:	46 95       	lsr	r20
     fdc:	37 95       	ror	r19
     fde:	27 95       	ror	r18
     fe0:	a7 95       	ror	r26
     fe2:	f0 40       	sbci	r31, 0x00	; 0
     fe4:	53 95       	inc	r21
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__addsf3x+0x4e>
     fe8:	7e f4       	brtc	.+30     	; 0x1008 <__addsf3x+0x7c>
     fea:	1f 16       	cp	r1, r31
     fec:	ba 0b       	sbc	r27, r26
     fee:	62 0b       	sbc	r22, r18
     ff0:	73 0b       	sbc	r23, r19
     ff2:	84 0b       	sbc	r24, r20
     ff4:	ba f0       	brmi	.+46     	; 0x1024 <__addsf3x+0x98>
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	a1 f0       	breq	.+40     	; 0x1022 <__addsf3x+0x96>
     ffa:	ff 0f       	add	r31, r31
     ffc:	bb 1f       	adc	r27, r27
     ffe:	66 1f       	adc	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	c2 f7       	brpl	.-16     	; 0xff6 <__addsf3x+0x6a>
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <__addsf3x+0x98>
    1008:	ba 0f       	add	r27, r26
    100a:	62 1f       	adc	r22, r18
    100c:	73 1f       	adc	r23, r19
    100e:	84 1f       	adc	r24, r20
    1010:	48 f4       	brcc	.+18     	; 0x1024 <__addsf3x+0x98>
    1012:	87 95       	ror	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__addsf3x+0x96>
    1020:	b3 cf       	rjmp	.-154    	; 0xf88 <__addsf3+0x1e>
    1022:	93 95       	inc	r25
    1024:	88 0f       	add	r24, r24
    1026:	08 f0       	brcs	.+2      	; 0x102a <__addsf3x+0x9e>
    1028:	99 27       	eor	r25, r25
    102a:	ee 0f       	add	r30, r30
    102c:	97 95       	ror	r25
    102e:	87 95       	ror	r24
    1030:	08 95       	ret

00001032 <__cmpsf2>:
    1032:	d9 d0       	rcall	.+434    	; 0x11e6 <__fp_cmp>
    1034:	08 f4       	brcc	.+2      	; 0x1038 <__cmpsf2+0x6>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	08 95       	ret

0000103a <__divsf3>:
    103a:	0c d0       	rcall	.+24     	; 0x1054 <__divsf3x>
    103c:	0f c1       	rjmp	.+542    	; 0x125c <__fp_round>
    103e:	07 d1       	rcall	.+526    	; 0x124e <__fp_pscB>
    1040:	40 f0       	brcs	.+16     	; 0x1052 <__divsf3+0x18>
    1042:	fe d0       	rcall	.+508    	; 0x1240 <__fp_pscA>
    1044:	30 f0       	brcs	.+12     	; 0x1052 <__divsf3+0x18>
    1046:	21 f4       	brne	.+8      	; 0x1050 <__divsf3+0x16>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	19 f0       	breq	.+6      	; 0x1052 <__divsf3+0x18>
    104c:	f0 c0       	rjmp	.+480    	; 0x122e <__fp_inf>
    104e:	51 11       	cpse	r21, r1
    1050:	39 c1       	rjmp	.+626    	; 0x12c4 <__fp_szero>
    1052:	f3 c0       	rjmp	.+486    	; 0x123a <__fp_nan>

00001054 <__divsf3x>:
    1054:	14 d1       	rcall	.+552    	; 0x127e <__fp_split3>
    1056:	98 f3       	brcs	.-26     	; 0x103e <__divsf3+0x4>

00001058 <__divsf3_pse>:
    1058:	99 23       	and	r25, r25
    105a:	c9 f3       	breq	.-14     	; 0x104e <__divsf3+0x14>
    105c:	55 23       	and	r21, r21
    105e:	b1 f3       	breq	.-20     	; 0x104c <__divsf3+0x12>
    1060:	95 1b       	sub	r25, r21
    1062:	55 0b       	sbc	r21, r21
    1064:	bb 27       	eor	r27, r27
    1066:	aa 27       	eor	r26, r26
    1068:	62 17       	cp	r22, r18
    106a:	73 07       	cpc	r23, r19
    106c:	84 07       	cpc	r24, r20
    106e:	38 f0       	brcs	.+14     	; 0x107e <__divsf3_pse+0x26>
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	44 1f       	adc	r20, r20
    107a:	aa 1f       	adc	r26, r26
    107c:	a9 f3       	breq	.-22     	; 0x1068 <__divsf3_pse+0x10>
    107e:	33 d0       	rcall	.+102    	; 0x10e6 <__divsf3_pse+0x8e>
    1080:	0e 2e       	mov	r0, r30
    1082:	3a f0       	brmi	.+14     	; 0x1092 <__divsf3_pse+0x3a>
    1084:	e0 e8       	ldi	r30, 0x80	; 128
    1086:	30 d0       	rcall	.+96     	; 0x10e8 <__divsf3_pse+0x90>
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	e6 95       	lsr	r30
    108e:	00 1c       	adc	r0, r0
    1090:	ca f7       	brpl	.-14     	; 0x1084 <__divsf3_pse+0x2c>
    1092:	29 d0       	rcall	.+82     	; 0x10e6 <__divsf3_pse+0x8e>
    1094:	fe 2f       	mov	r31, r30
    1096:	27 d0       	rcall	.+78     	; 0x10e6 <__divsf3_pse+0x8e>
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	bb 1f       	adc	r27, r27
    10a0:	26 17       	cp	r18, r22
    10a2:	37 07       	cpc	r19, r23
    10a4:	48 07       	cpc	r20, r24
    10a6:	ab 07       	cpc	r26, r27
    10a8:	b0 e8       	ldi	r27, 0x80	; 128
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__divsf3_pse+0x56>
    10ac:	bb 0b       	sbc	r27, r27
    10ae:	80 2d       	mov	r24, r0
    10b0:	bf 01       	movw	r22, r30
    10b2:	ff 27       	eor	r31, r31
    10b4:	93 58       	subi	r25, 0x83	; 131
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	2a f0       	brmi	.+10     	; 0x10c4 <__divsf3_pse+0x6c>
    10ba:	9e 3f       	cpi	r25, 0xFE	; 254
    10bc:	51 05       	cpc	r21, r1
    10be:	68 f0       	brcs	.+26     	; 0x10da <__divsf3_pse+0x82>
    10c0:	b6 c0       	rjmp	.+364    	; 0x122e <__fp_inf>
    10c2:	00 c1       	rjmp	.+512    	; 0x12c4 <__fp_szero>
    10c4:	5f 3f       	cpi	r21, 0xFF	; 255
    10c6:	ec f3       	brlt	.-6      	; 0x10c2 <__divsf3_pse+0x6a>
    10c8:	98 3e       	cpi	r25, 0xE8	; 232
    10ca:	dc f3       	brlt	.-10     	; 0x10c2 <__divsf3_pse+0x6a>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	f7 95       	ror	r31
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__divsf3_pse+0x74>
    10da:	88 0f       	add	r24, r24
    10dc:	91 1d       	adc	r25, r1
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	bb 1f       	adc	r27, r27
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	ba 07       	cpc	r27, r26
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__divsf3_pse+0xaa>
    10fa:	62 1b       	sub	r22, r18
    10fc:	73 0b       	sbc	r23, r19
    10fe:	84 0b       	sbc	r24, r20
    1100:	ba 0b       	sbc	r27, r26
    1102:	ee 1f       	adc	r30, r30
    1104:	88 f7       	brcc	.-30     	; 0x10e8 <__divsf3_pse+0x90>
    1106:	e0 95       	com	r30
    1108:	08 95       	ret

0000110a <__fixsfsi>:
    110a:	04 d0       	rcall	.+8      	; 0x1114 <__fixunssfsi>
    110c:	68 94       	set
    110e:	b1 11       	cpse	r27, r1
    1110:	d9 c0       	rjmp	.+434    	; 0x12c4 <__fp_szero>
    1112:	08 95       	ret

00001114 <__fixunssfsi>:
    1114:	bc d0       	rcall	.+376    	; 0x128e <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x26>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	90 f0       	brcs	.+36     	; 0x1140 <__fixunssfsi+0x2c>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	a0 f0       	brcs	.+40     	; 0x114c <__fixunssfsi+0x38>
    1124:	d1 f0       	breq	.+52     	; 0x115a <__fixunssfsi+0x46>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x22>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x12>
    1134:	12 c0       	rjmp	.+36     	; 0x115a <__fixunssfsi+0x46>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	81 f0       	breq	.+32     	; 0x115a <__fixunssfsi+0x46>
    113a:	c3 d0       	rcall	.+390    	; 0x12c2 <__fp_zero>
    113c:	b1 e0       	ldi	r27, 0x01	; 1
    113e:	08 95       	ret
    1140:	c0 c0       	rjmp	.+384    	; 0x12c2 <__fp_zero>
    1142:	67 2f       	mov	r22, r23
    1144:	78 2f       	mov	r23, r24
    1146:	88 27       	eor	r24, r24
    1148:	b8 5f       	subi	r27, 0xF8	; 248
    114a:	39 f0       	breq	.+14     	; 0x115a <__fixunssfsi+0x46>
    114c:	b9 3f       	cpi	r27, 0xF9	; 249
    114e:	cc f3       	brlt	.-14     	; 0x1142 <__fixunssfsi+0x2e>
    1150:	86 95       	lsr	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b3 95       	inc	r27
    1158:	d9 f7       	brne	.-10     	; 0x1150 <__fixunssfsi+0x3c>
    115a:	3e f4       	brtc	.+14     	; 0x116a <__fixunssfsi+0x56>
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	08 95       	ret

0000116c <__floatunsisf>:
    116c:	e8 94       	clt
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <__floatsisf+0x12>

00001170 <__floatsisf>:
    1170:	97 fb       	bst	r25, 7
    1172:	3e f4       	brtc	.+14     	; 0x1182 <__floatsisf+0x12>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	99 23       	and	r25, r25
    1184:	a9 f0       	breq	.+42     	; 0x11b0 <__floatsisf+0x40>
    1186:	f9 2f       	mov	r31, r25
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	bb 27       	eor	r27, r27
    118c:	93 95       	inc	r25
    118e:	f6 95       	lsr	r31
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	f1 11       	cpse	r31, r1
    119a:	f8 cf       	rjmp	.-16     	; 0x118c <__floatsisf+0x1c>
    119c:	fa f4       	brpl	.+62     	; 0x11dc <__floatsisf+0x6c>
    119e:	bb 0f       	add	r27, r27
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__floatsisf+0x36>
    11a2:	60 ff       	sbrs	r22, 0
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <__floatsisf+0x6c>
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <__floatsisf+0x6c>
    11b0:	88 23       	and	r24, r24
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <__floatsisf+0x48>
    11b4:	96 e9       	ldi	r25, 0x96	; 150
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <__floatsisf+0x6a>
    11b8:	77 23       	and	r23, r23
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <__floatsisf+0x54>
    11bc:	9e e8       	ldi	r25, 0x8E	; 142
    11be:	87 2f       	mov	r24, r23
    11c0:	76 2f       	mov	r23, r22
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__floatsisf+0x5e>
    11c4:	66 23       	and	r22, r22
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <__floatsisf+0x74>
    11c8:	96 e8       	ldi	r25, 0x86	; 134
    11ca:	86 2f       	mov	r24, r22
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	2a f0       	brmi	.+10     	; 0x11dc <__floatsisf+0x6c>
    11d2:	9a 95       	dec	r25
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	da f7       	brpl	.-10     	; 0x11d2 <__floatsisf+0x62>
    11dc:	88 0f       	add	r24, r24
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret

000011e6 <__fp_cmp>:
    11e6:	99 0f       	add	r25, r25
    11e8:	00 08       	sbc	r0, r0
    11ea:	55 0f       	add	r21, r21
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	fe ef       	ldi	r31, 0xFE	; 254
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	e8 07       	cpc	r30, r24
    11f8:	f9 07       	cpc	r31, r25
    11fa:	c0 f0       	brcs	.+48     	; 0x122c <__fp_cmp+0x46>
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	e4 07       	cpc	r30, r20
    1202:	f5 07       	cpc	r31, r21
    1204:	98 f0       	brcs	.+38     	; 0x122c <__fp_cmp+0x46>
    1206:	62 1b       	sub	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	84 0b       	sbc	r24, r20
    120c:	95 0b       	sbc	r25, r21
    120e:	39 f4       	brne	.+14     	; 0x121e <__fp_cmp+0x38>
    1210:	0a 26       	eor	r0, r26
    1212:	61 f0       	breq	.+24     	; 0x122c <__fp_cmp+0x46>
    1214:	23 2b       	or	r18, r19
    1216:	24 2b       	or	r18, r20
    1218:	25 2b       	or	r18, r21
    121a:	21 f4       	brne	.+8      	; 0x1224 <__fp_cmp+0x3e>
    121c:	08 95       	ret
    121e:	0a 26       	eor	r0, r26
    1220:	09 f4       	brne	.+2      	; 0x1224 <__fp_cmp+0x3e>
    1222:	a1 40       	sbci	r26, 0x01	; 1
    1224:	a6 95       	lsr	r26
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	81 1d       	adc	r24, r1
    122a:	81 1d       	adc	r24, r1
    122c:	08 95       	ret

0000122e <__fp_inf>:
    122e:	97 f9       	bld	r25, 7
    1230:	9f 67       	ori	r25, 0x7F	; 127
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	08 95       	ret

0000123a <__fp_nan>:
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	80 ec       	ldi	r24, 0xC0	; 192
    123e:	08 95       	ret

00001240 <__fp_pscA>:
    1240:	00 24       	eor	r0, r0
    1242:	0a 94       	dec	r0
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	18 06       	cpc	r1, r24
    124a:	09 06       	cpc	r0, r25
    124c:	08 95       	ret

0000124e <__fp_pscB>:
    124e:	00 24       	eor	r0, r0
    1250:	0a 94       	dec	r0
    1252:	12 16       	cp	r1, r18
    1254:	13 06       	cpc	r1, r19
    1256:	14 06       	cpc	r1, r20
    1258:	05 06       	cpc	r0, r21
    125a:	08 95       	ret

0000125c <__fp_round>:
    125c:	09 2e       	mov	r0, r25
    125e:	03 94       	inc	r0
    1260:	00 0c       	add	r0, r0
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0xc>
    1264:	88 23       	and	r24, r24
    1266:	52 f0       	brmi	.+20     	; 0x127c <__fp_round+0x20>
    1268:	bb 0f       	add	r27, r27
    126a:	40 f4       	brcc	.+16     	; 0x127c <__fp_round+0x20>
    126c:	bf 2b       	or	r27, r31
    126e:	11 f4       	brne	.+4      	; 0x1274 <__fp_round+0x18>
    1270:	60 ff       	sbrs	r22, 0
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__fp_round+0x20>
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__fp_split3>:
    127e:	57 fd       	sbrc	r21, 7
    1280:	90 58       	subi	r25, 0x80	; 128
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	59 f0       	breq	.+22     	; 0x129e <__fp_splitA+0x10>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	71 f0       	breq	.+28     	; 0x12a8 <__fp_splitA+0x1a>
    128c:	47 95       	ror	r20

0000128e <__fp_splitA>:
    128e:	88 0f       	add	r24, r24
    1290:	97 fb       	bst	r25, 7
    1292:	99 1f       	adc	r25, r25
    1294:	61 f0       	breq	.+24     	; 0x12ae <__fp_splitA+0x20>
    1296:	9f 3f       	cpi	r25, 0xFF	; 255
    1298:	79 f0       	breq	.+30     	; 0x12b8 <__fp_splitA+0x2a>
    129a:	87 95       	ror	r24
    129c:	08 95       	ret
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	14 06       	cpc	r1, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	f2 cf       	rjmp	.-28     	; 0x128c <__fp_split3+0xe>
    12a8:	46 95       	lsr	r20
    12aa:	f1 df       	rcall	.-30     	; 0x128e <__fp_splitA>
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <__fp_splitA+0x30>
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	18 06       	cpc	r1, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	f1 cf       	rjmp	.-30     	; 0x129a <__fp_splitA+0xc>
    12b8:	86 95       	lsr	r24
    12ba:	71 05       	cpc	r23, r1
    12bc:	61 05       	cpc	r22, r1
    12be:	08 94       	sec
    12c0:	08 95       	ret

000012c2 <__fp_zero>:
    12c2:	e8 94       	clt

000012c4 <__fp_szero>:
    12c4:	bb 27       	eor	r27, r27
    12c6:	66 27       	eor	r22, r22
    12c8:	77 27       	eor	r23, r23
    12ca:	cb 01       	movw	r24, r22
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__gesf2>:
    12d0:	8a df       	rcall	.-236    	; 0x11e6 <__fp_cmp>
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__gesf2+0x6>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	08 95       	ret

000012d8 <__mulsf3>:
    12d8:	0b d0       	rcall	.+22     	; 0x12f0 <__mulsf3x>
    12da:	c0 cf       	rjmp	.-128    	; 0x125c <__fp_round>
    12dc:	b1 df       	rcall	.-158    	; 0x1240 <__fp_pscA>
    12de:	28 f0       	brcs	.+10     	; 0x12ea <__mulsf3+0x12>
    12e0:	b6 df       	rcall	.-148    	; 0x124e <__fp_pscB>
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <__mulsf3+0x12>
    12e4:	95 23       	and	r25, r21
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__mulsf3+0x12>
    12e8:	a2 cf       	rjmp	.-188    	; 0x122e <__fp_inf>
    12ea:	a7 cf       	rjmp	.-178    	; 0x123a <__fp_nan>
    12ec:	11 24       	eor	r1, r1
    12ee:	ea cf       	rjmp	.-44     	; 0x12c4 <__fp_szero>

000012f0 <__mulsf3x>:
    12f0:	c6 df       	rcall	.-116    	; 0x127e <__fp_split3>
    12f2:	a0 f3       	brcs	.-24     	; 0x12dc <__mulsf3+0x4>

000012f4 <__mulsf3_pse>:
    12f4:	95 9f       	mul	r25, r21
    12f6:	d1 f3       	breq	.-12     	; 0x12ec <__mulsf3+0x14>
    12f8:	95 0f       	add	r25, r21
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	55 1f       	adc	r21, r21
    12fe:	62 9f       	mul	r22, r18
    1300:	f0 01       	movw	r30, r0
    1302:	72 9f       	mul	r23, r18
    1304:	bb 27       	eor	r27, r27
    1306:	f0 0d       	add	r31, r0
    1308:	b1 1d       	adc	r27, r1
    130a:	63 9f       	mul	r22, r19
    130c:	aa 27       	eor	r26, r26
    130e:	f0 0d       	add	r31, r0
    1310:	b1 1d       	adc	r27, r1
    1312:	aa 1f       	adc	r26, r26
    1314:	64 9f       	mul	r22, r20
    1316:	66 27       	eor	r22, r22
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	66 1f       	adc	r22, r22
    131e:	82 9f       	mul	r24, r18
    1320:	22 27       	eor	r18, r18
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	62 1f       	adc	r22, r18
    1328:	73 9f       	mul	r23, r19
    132a:	b0 0d       	add	r27, r0
    132c:	a1 1d       	adc	r26, r1
    132e:	62 1f       	adc	r22, r18
    1330:	83 9f       	mul	r24, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	22 1f       	adc	r18, r18
    1338:	74 9f       	mul	r23, r20
    133a:	33 27       	eor	r19, r19
    133c:	a0 0d       	add	r26, r0
    133e:	61 1d       	adc	r22, r1
    1340:	23 1f       	adc	r18, r19
    1342:	84 9f       	mul	r24, r20
    1344:	60 0d       	add	r22, r0
    1346:	21 1d       	adc	r18, r1
    1348:	82 2f       	mov	r24, r18
    134a:	76 2f       	mov	r23, r22
    134c:	6a 2f       	mov	r22, r26
    134e:	11 24       	eor	r1, r1
    1350:	9f 57       	subi	r25, 0x7F	; 127
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	8a f0       	brmi	.+34     	; 0x1378 <__mulsf3_pse+0x84>
    1356:	e1 f0       	breq	.+56     	; 0x1390 <__mulsf3_pse+0x9c>
    1358:	88 23       	and	r24, r24
    135a:	4a f0       	brmi	.+18     	; 0x136e <__mulsf3_pse+0x7a>
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	bb 1f       	adc	r27, r27
    1362:	66 1f       	adc	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__mulsf3_pse+0x64>
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	51 05       	cpc	r21, r1
    1372:	70 f0       	brcs	.+28     	; 0x1390 <__mulsf3_pse+0x9c>
    1374:	5c cf       	rjmp	.-328    	; 0x122e <__fp_inf>
    1376:	a6 cf       	rjmp	.-180    	; 0x12c4 <__fp_szero>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	ec f3       	brlt	.-6      	; 0x1376 <__mulsf3_pse+0x82>
    137c:	98 3e       	cpi	r25, 0xE8	; 232
    137e:	dc f3       	brlt	.-10     	; 0x1376 <__mulsf3_pse+0x82>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	e7 95       	ror	r30
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	c1 f7       	brne	.-16     	; 0x1380 <__mulsf3_pse+0x8c>
    1390:	fe 2b       	or	r31, r30
    1392:	88 0f       	add	r24, r24
    1394:	91 1d       	adc	r25, r1
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__divmodhi4>:
    139e:	97 fb       	bst	r25, 7
    13a0:	07 2e       	mov	r0, r23
    13a2:	16 f4       	brtc	.+4      	; 0x13a8 <__divmodhi4+0xa>
    13a4:	00 94       	com	r0
    13a6:	06 d0       	rcall	.+12     	; 0x13b4 <__divmodhi4_neg1>
    13a8:	77 fd       	sbrc	r23, 7
    13aa:	08 d0       	rcall	.+16     	; 0x13bc <__divmodhi4_neg2>
    13ac:	0b d0       	rcall	.+22     	; 0x13c4 <__udivmodhi4>
    13ae:	07 fc       	sbrc	r0, 7
    13b0:	05 d0       	rcall	.+10     	; 0x13bc <__divmodhi4_neg2>
    13b2:	3e f4       	brtc	.+14     	; 0x13c2 <__divmodhi4_exit>

000013b4 <__divmodhi4_neg1>:
    13b4:	90 95       	com	r25
    13b6:	81 95       	neg	r24
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__divmodhi4_neg2>:
    13bc:	70 95       	com	r23
    13be:	61 95       	neg	r22
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255

000013c2 <__divmodhi4_exit>:
    13c2:	08 95       	ret

000013c4 <__udivmodhi4>:
    13c4:	aa 1b       	sub	r26, r26
    13c6:	bb 1b       	sub	r27, r27
    13c8:	51 e1       	ldi	r21, 0x11	; 17
    13ca:	07 c0       	rjmp	.+14     	; 0x13da <__udivmodhi4_ep>

000013cc <__udivmodhi4_loop>:
    13cc:	aa 1f       	adc	r26, r26
    13ce:	bb 1f       	adc	r27, r27
    13d0:	a6 17       	cp	r26, r22
    13d2:	b7 07       	cpc	r27, r23
    13d4:	10 f0       	brcs	.+4      	; 0x13da <__udivmodhi4_ep>
    13d6:	a6 1b       	sub	r26, r22
    13d8:	b7 0b       	sbc	r27, r23

000013da <__udivmodhi4_ep>:
    13da:	88 1f       	adc	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	5a 95       	dec	r21
    13e0:	a9 f7       	brne	.-22     	; 0x13cc <__udivmodhi4_loop>
    13e2:	80 95       	com	r24
    13e4:	90 95       	com	r25
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	08 95       	ret

000013ec <strcat>:
    13ec:	fb 01       	movw	r30, r22
    13ee:	dc 01       	movw	r26, r24
    13f0:	0d 90       	ld	r0, X+
    13f2:	00 20       	and	r0, r0
    13f4:	e9 f7       	brne	.-6      	; 0x13f0 <strcat+0x4>
    13f6:	11 97       	sbiw	r26, 0x01	; 1
    13f8:	01 90       	ld	r0, Z+
    13fa:	0d 92       	st	X+, r0
    13fc:	00 20       	and	r0, r0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <strcat+0xc>
    1400:	08 95       	ret

00001402 <strcpy>:
    1402:	fb 01       	movw	r30, r22
    1404:	dc 01       	movw	r26, r24
    1406:	01 90       	ld	r0, Z+
    1408:	0d 92       	st	X+, r0
    140a:	00 20       	and	r0, r0
    140c:	e1 f7       	brne	.-8      	; 0x1406 <strcpy+0x4>
    140e:	08 95       	ret

00001410 <__itoa_ncheck>:
    1410:	bb 27       	eor	r27, r27
    1412:	4a 30       	cpi	r20, 0x0A	; 10
    1414:	31 f4       	brne	.+12     	; 0x1422 <__itoa_ncheck+0x12>
    1416:	99 23       	and	r25, r25
    1418:	22 f4       	brpl	.+8      	; 0x1422 <__itoa_ncheck+0x12>
    141a:	bd e2       	ldi	r27, 0x2D	; 45
    141c:	90 95       	com	r25
    141e:	81 95       	neg	r24
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <__utoa_common>

00001424 <__utoa_ncheck>:
    1424:	bb 27       	eor	r27, r27

00001426 <__utoa_common>:
    1426:	fb 01       	movw	r30, r22
    1428:	55 27       	eor	r21, r21
    142a:	aa 27       	eor	r26, r26
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	aa 1f       	adc	r26, r26
    1432:	a4 17       	cp	r26, r20
    1434:	10 f0       	brcs	.+4      	; 0x143a <__utoa_common+0x14>
    1436:	a4 1b       	sub	r26, r20
    1438:	83 95       	inc	r24
    143a:	50 51       	subi	r21, 0x10	; 16
    143c:	b9 f7       	brne	.-18     	; 0x142c <__utoa_common+0x6>
    143e:	a0 5d       	subi	r26, 0xD0	; 208
    1440:	aa 33       	cpi	r26, 0x3A	; 58
    1442:	08 f0       	brcs	.+2      	; 0x1446 <__utoa_common+0x20>
    1444:	a9 5d       	subi	r26, 0xD9	; 217
    1446:	a1 93       	st	Z+, r26
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	79 f7       	brne	.-34     	; 0x142a <__utoa_common+0x4>
    144c:	b1 11       	cpse	r27, r1
    144e:	b1 93       	st	Z+, r27
    1450:	11 92       	st	Z+, r1
    1452:	cb 01       	movw	r24, r22
    1454:	00 c0       	rjmp	.+0      	; 0x1456 <strrev>

00001456 <strrev>:
    1456:	dc 01       	movw	r26, r24
    1458:	fc 01       	movw	r30, r24
    145a:	67 2f       	mov	r22, r23
    145c:	71 91       	ld	r23, Z+
    145e:	77 23       	and	r23, r23
    1460:	e1 f7       	brne	.-8      	; 0x145a <strrev+0x4>
    1462:	32 97       	sbiw	r30, 0x02	; 2
    1464:	04 c0       	rjmp	.+8      	; 0x146e <strrev+0x18>
    1466:	7c 91       	ld	r23, X
    1468:	6d 93       	st	X+, r22
    146a:	70 83       	st	Z, r23
    146c:	62 91       	ld	r22, -Z
    146e:	ae 17       	cp	r26, r30
    1470:	bf 07       	cpc	r27, r31
    1472:	c8 f3       	brcs	.-14     	; 0x1466 <strrev+0x10>
    1474:	08 95       	ret

00001476 <_exit>:
    1476:	f8 94       	cli

00001478 <__stop_program>:
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <__stop_program>
