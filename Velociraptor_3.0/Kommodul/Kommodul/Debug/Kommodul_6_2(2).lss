
Kommodul_6_2(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800100  00800100  000004d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c3  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040c  00000000  00000000  00000fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030a  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031b  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 33       	cpi	r26, 0x31	; 49
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8a d1       	rcall	.+788    	; 0x3d8 <main>
  c4:	cc c1       	rjmp	.+920    	; 0x45e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <USARTReadChar>:
    int a=0;
    while(a != length){
		UART_TxChar(str[a++]);
	}
    UART_TxChar('\n');
}
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	ec f7       	brge	.-6      	; 0xcc <USARTReadChar+0x4>
  d2:	80 91 c6 00 	lds	r24, 0x00C6
  d6:	08 95       	ret

000000d8 <__vector_20>:
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	e4 df       	rcall	.-56     	; 0xc8 <USARTReadChar>
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 07 01 	sts	0x0107, r25
 106:	80 93 06 01 	sts	0x0106, r24
 10a:	de df       	rcall	.-68     	; 0xc8 <USARTReadChar>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 2b 01 	sts	0x012B, r25
 112:	80 93 2a 01 	sts	0x012A, r24
 116:	d8 df       	rcall	.-80     	; 0xc8 <USARTReadChar>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 2e 01 	sts	0x012E, r25
 11e:	80 93 2d 01 	sts	0x012D, r24
 122:	80 91 06 01 	lds	r24, 0x0106
 126:	90 91 07 01 	lds	r25, 0x0107
 12a:	e3 e0       	ldi	r30, 0x03	; 3
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	81 83       	std	Z+1, r24	; 0x01
 130:	80 91 2a 01 	lds	r24, 0x012A
 134:	90 91 2b 01 	lds	r25, 0x012B
 138:	82 83       	std	Z+2, r24	; 0x02
 13a:	80 91 2d 01 	lds	r24, 0x012D
 13e:	90 91 2e 01 	lds	r25, 0x012E
 142:	83 83       	std	Z+3, r24	; 0x03
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0b be       	out	0x3b, r0	; 59
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <UART_TxChar>:
 16a:	e0 ec       	ldi	r30, 0xC0	; 192
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	95 ff       	sbrs	r25, 5
 172:	fd cf       	rjmp	.-6      	; 0x16e <UART_TxChar+0x4>
 174:	80 93 c6 00 	sts	0x00C6, r24
 178:	08 95       	ret

0000017a <initBluetooth>:
	
	//cbi(DDRD,PD0);
	//sbi(DDRD,PD1);
	//DDRD = 0x00;
	
	bluetoothData[0] = 48;
 17a:	e3 e0       	ldi	r30, 0x03	; 3
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	80 83       	st	Z, r24
	bluetoothData[1] = 48;
 182:	81 83       	std	Z+1, r24	; 0x01
	bluetoothData[2] = 48;
 184:	82 83       	std	Z+2, r24	; 0x02
	
	// Enable RX, TX and interupts for RX
	UCSR0B= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 186:	88 e9       	ldi	r24, 0x98	; 152
 188:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set 8-bit data size
	sbi(UCSR0C, UCSZ00);
 18c:	e2 ec       	ldi	r30, 0xC2	; 194
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	82 60       	ori	r24, 0x02	; 2
 194:	80 83       	st	Z, r24
	sbi(UCSR0C, UCSZ01);	
 196:	80 81       	ld	r24, Z
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 83       	st	Z, r24
	
	// Set 1 stopbit
	cbi(UCSR0C, USBS0);
 19c:	80 81       	ld	r24, Z
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	80 83       	st	Z, r24
	
	// Mode (00 = ASYNC, 01 = SYNC, 10 = nothing, 11 = Master SPI)
	cbi(UCSR0C, UMSEL00);
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 7b       	andi	r24, 0xBF	; 191
 1a6:	80 83       	st	Z, r24
	cbi(UCSR0C, UMSEL01);
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 77       	andi	r24, 0x7F	; 127
 1ac:	80 83       	st	Z, r24
	
	
	cbi(UCSR0A,U2X0);
 1ae:	e0 ec       	ldi	r30, 0xC0	; 192
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	80 83       	st	Z, r24
	//UCSR0C= (3<<UCSZ00); // 8 bit
	
	// Set UBRR
	//UBRR0L = BAUD_PRESCALE; 
	//UBRR0H = (BAUD_PRESCALE >> 8); 
	UBRR0H = 0x00;
 1b8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07;
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	80 93 c4 00 	sts	0x00C4, r24
 1c2:	08 95       	ret

000001c4 <__vector_26>:
	sending = false;
	TWBR = 16;
}

void ERROR(){
	printf("NICHT");
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
 1ea:	80 91 b9 00 	lds	r24, 0x00B9
 1ee:	88 7f       	andi	r24, 0xF8	; 248
 1f0:	88 32       	cpi	r24, 0x28	; 40
 1f2:	91 f1       	breq	.+100    	; 0x258 <__vector_26+0x94>
 1f4:	28 f4       	brcc	.+10     	; 0x200 <__vector_26+0x3c>
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	69 f0       	breq	.+26     	; 0x214 <__vector_26+0x50>
 1fa:	88 31       	cpi	r24, 0x18	; 24
 1fc:	99 f0       	breq	.+38     	; 0x224 <__vector_26+0x60>
 1fe:	8e c0       	rjmp	.+284    	; 0x31c <__vector_26+0x158>
 200:	80 35       	cpi	r24, 0x50	; 80
 202:	09 f4       	brne	.+2      	; 0x206 <__vector_26+0x42>
 204:	58 c0       	rjmp	.+176    	; 0x2b6 <__vector_26+0xf2>
 206:	88 35       	cpi	r24, 0x58	; 88
 208:	09 f4       	brne	.+2      	; 0x20c <__vector_26+0x48>
 20a:	84 c0       	rjmp	.+264    	; 0x314 <__vector_26+0x150>
 20c:	80 34       	cpi	r24, 0x40	; 64
 20e:	09 f0       	breq	.+2      	; 0x212 <__vector_26+0x4e>
 210:	85 c0       	rjmp	.+266    	; 0x31c <__vector_26+0x158>
 212:	4d c0       	rjmp	.+154    	; 0x2ae <__vector_26+0xea>
 214:	80 91 29 01 	lds	r24, 0x0129
 218:	80 93 bb 00 	sts	0x00BB, r24
 21c:	85 e8       	ldi	r24, 0x85	; 133
 21e:	80 93 bc 00 	sts	0x00BC, r24
 222:	88 c0       	rjmp	.+272    	; 0x334 <__vector_26+0x170>
 224:	80 91 0b 01 	lds	r24, 0x010B
 228:	90 91 0c 01 	lds	r25, 0x010C
 22c:	e0 91 01 01 	lds	r30, 0x0101
 230:	f0 91 02 01 	lds	r31, 0x0102
 234:	e8 0f       	add	r30, r24
 236:	f9 1f       	adc	r31, r25
 238:	80 81       	ld	r24, Z
 23a:	80 93 bb 00 	sts	0x00BB, r24
 23e:	80 91 0b 01 	lds	r24, 0x010B
 242:	90 91 0c 01 	lds	r25, 0x010C
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 0c 01 	sts	0x010C, r25
 24c:	80 93 0b 01 	sts	0x010B, r24
 250:	85 e8       	ldi	r24, 0x85	; 133
 252:	80 93 bc 00 	sts	0x00BC, r24
 256:	6e c0       	rjmp	.+220    	; 0x334 <__vector_26+0x170>
 258:	20 91 0b 01 	lds	r18, 0x010B
 25c:	30 91 0c 01 	lds	r19, 0x010C
 260:	80 91 09 01 	lds	r24, 0x0109
 264:	90 91 0a 01 	lds	r25, 0x010A
 268:	28 17       	cp	r18, r24
 26a:	39 07       	cpc	r19, r25
 26c:	d4 f4       	brge	.+52     	; 0x2a2 <__vector_26+0xde>
 26e:	80 91 0b 01 	lds	r24, 0x010B
 272:	90 91 0c 01 	lds	r25, 0x010C
 276:	e0 91 01 01 	lds	r30, 0x0101
 27a:	f0 91 02 01 	lds	r31, 0x0102
 27e:	e8 0f       	add	r30, r24
 280:	f9 1f       	adc	r31, r25
 282:	80 81       	ld	r24, Z
 284:	80 93 bb 00 	sts	0x00BB, r24
 288:	80 91 0b 01 	lds	r24, 0x010B
 28c:	90 91 0c 01 	lds	r25, 0x010C
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 0c 01 	sts	0x010C, r25
 296:	80 93 0b 01 	sts	0x010B, r24
 29a:	85 e8       	ldi	r24, 0x85	; 133
 29c:	80 93 bc 00 	sts	0x00BC, r24
 2a0:	49 c0       	rjmp	.+146    	; 0x334 <__vector_26+0x170>
 2a2:	85 e9       	ldi	r24, 0x95	; 149
 2a4:	80 93 bc 00 	sts	0x00BC, r24
 2a8:	10 92 00 01 	sts	0x0100, r1
 2ac:	43 c0       	rjmp	.+134    	; 0x334 <__vector_26+0x170>
 2ae:	85 ec       	ldi	r24, 0xC5	; 197
 2b0:	80 93 bc 00 	sts	0x00BC, r24
 2b4:	3f c0       	rjmp	.+126    	; 0x334 <__vector_26+0x170>
 2b6:	e0 91 0b 01 	lds	r30, 0x010B
 2ba:	f0 91 0c 01 	lds	r31, 0x010C
 2be:	80 91 bb 00 	lds	r24, 0x00BB
 2c2:	e3 5f       	subi	r30, 0xF3	; 243
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 83       	st	Z, r24
 2c8:	e0 91 0b 01 	lds	r30, 0x010B
 2cc:	f0 91 0c 01 	lds	r31, 0x010C
 2d0:	e3 5f       	subi	r30, 0xF3	; 243
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	80 81       	ld	r24, Z
 2d6:	49 df       	rcall	.-366    	; 0x16a <UART_TxChar>
 2d8:	80 91 0b 01 	lds	r24, 0x010B
 2dc:	90 91 0c 01 	lds	r25, 0x010C
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 0c 01 	sts	0x010C, r25
 2e6:	80 93 0b 01 	sts	0x010B, r24
 2ea:	20 91 0b 01 	lds	r18, 0x010B
 2ee:	30 91 0c 01 	lds	r19, 0x010C
 2f2:	80 91 09 01 	lds	r24, 0x0109
 2f6:	90 91 0a 01 	lds	r25, 0x010A
 2fa:	28 17       	cp	r18, r24
 2fc:	39 07       	cpc	r19, r25
 2fe:	24 f4       	brge	.+8      	; 0x308 <__vector_26+0x144>
 300:	85 ec       	ldi	r24, 0xC5	; 197
 302:	80 93 bc 00 	sts	0x00BC, r24
 306:	16 c0       	rjmp	.+44     	; 0x334 <__vector_26+0x170>
 308:	85 e8       	ldi	r24, 0x85	; 133
 30a:	80 93 bc 00 	sts	0x00BC, r24
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	2c df       	rcall	.-424    	; 0x16a <UART_TxChar>
 312:	10 c0       	rjmp	.+32     	; 0x334 <__vector_26+0x170>
 314:	85 e9       	ldi	r24, 0x95	; 149
 316:	80 93 bc 00 	sts	0x00BC, r24
 31a:	0c c0       	rjmp	.+24     	; 0x334 <__vector_26+0x170>
 31c:	80 91 0b 01 	lds	r24, 0x010B
 320:	90 91 0c 01 	lds	r25, 0x010C
 324:	18 16       	cp	r1, r24
 326:	19 06       	cpc	r1, r25
 328:	14 f4       	brge	.+4      	; 0x32e <__vector_26+0x16a>
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	1e df       	rcall	.-452    	; 0x16a <UART_TxChar>
 32e:	85 e9       	ldi	r24, 0x95	; 149
 330:	80 93 bc 00 	sts	0x00BC, r24
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0b be       	out	0x3b, r0	; 59
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <initBuss>:
 35a:	10 92 30 01 	sts	0x0130, r1
 35e:	10 92 2f 01 	sts	0x012F, r1
 362:	ec eb       	ldi	r30, 0xBC	; 188
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	80 83       	st	Z, r24
 36a:	80 81       	ld	r24, Z
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	80 83       	st	Z, r24
 370:	e9 eb       	ldi	r30, 0xB9	; 185
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8e 7f       	andi	r24, 0xFE	; 254
 378:	80 83       	st	Z, r24
 37a:	80 81       	ld	r24, Z
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	80 83       	st	Z, r24
 380:	10 92 00 01 	sts	0x0100, r1
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	80 93 b8 00 	sts	0x00B8, r24
 38a:	08 95       	ret

0000038c <sendData>:
}

void sendData(char address, char* data, int datalength){
	TWIaddress = address & 0xFE; // Sets the read/write bit (the 8th bit) to 0 which creates a write call
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	80 93 29 01 	sts	0x0129, r24
	TWIdata = data;
 392:	70 93 02 01 	sts	0x0102, r23
 396:	60 93 01 01 	sts	0x0101, r22
	TWIlength = datalength;
 39a:	50 93 0a 01 	sts	0x010A, r21
 39e:	40 93 09 01 	sts	0x0109, r20
	TWIcounter = 0;		
 3a2:	10 92 0c 01 	sts	0x010C, r1
 3a6:	10 92 0b 01 	sts	0x010B, r1
	
	//Send a START condition to the TWI
	TWCR = STARTCONDITION;	
 3aa:	85 ea       	ldi	r24, 0xA5	; 165
 3ac:	80 93 bc 00 	sts	0x00BC, r24
 3b0:	08 95       	ret

000003b2 <readData>:
}


void readData(char address){	
	TWIaddress = address | 1; // Sets the read/write bit (the 8th bit) to 1 which creates a read call
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	80 93 29 01 	sts	0x0129, r24
	firstRead = false;	
 3b8:	10 92 08 01 	sts	0x0108, r1
	TWIcounter = 0;
 3bc:	10 92 0c 01 	sts	0x010C, r1
 3c0:	10 92 0b 01 	sts	0x010B, r1
	TWIlength = 16; // The number of bytes that will be received from the sensor module
 3c4:	80 e1       	ldi	r24, 0x10	; 16
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 93 0a 01 	sts	0x010A, r25
 3cc:	80 93 09 01 	sts	0x0109, r24
	
	//Send a START condition to the TWI
	TWCR = STARTCONDITION;	
 3d0:	85 ea       	ldi	r24, 0xA5	; 165
 3d2:	80 93 bc 00 	sts	0x00BC, r24
 3d6:	08 95       	ret

000003d8 <main>:

int sendCounter = 40;


int main(void){
	initBluetooth();
 3d8:	d0 de       	rcall	.-608    	; 0x17a <initBluetooth>
	initBuss();
 3da:	bf df       	rcall	.-130    	; 0x35a <initBuss>
	//_delay_ms(100); // What does this do?
	sei(); //Enable global interrupts
 3dc:	78 94       	sei
	
	DDRB |= 0b01111111;	
 3de:	84 b1       	in	r24, 0x04	; 4
 3e0:	8f 67       	ori	r24, 0x7F	; 127
 3e2:	84 b9       	out	0x04, r24	; 4
	
	while(1){
		if (bit_is_set(PINB, 0)){
			manualMode = 1;
 3e4:	01 e0       	ldi	r16, 0x01	; 1
		if (manualMode == 0){
			sendData(0b00000010,sensorData,15);
		}
		else{
			// If we get a command to calibrate the tape sensor, send a command to the sensor module, otherwise to the steering module
			if (bluetoothData[0] == '7'){
 3e6:	c3 e0       	ldi	r28, 0x03	; 3
 3e8:	d1 e0       	ldi	r29, 0x01	; 1
				sendData(0b00000100,0x01,1);
				bluetoothData[0] = '0';
			}
			else {				
				bluetoothData[0] = (1 << 3);//sensorData[2];
 3ea:	18 e0       	ldi	r17, 0x08	; 8
		}
		else{
			// If we get a command to calibrate the tape sensor, send a command to the sensor module, otherwise to the steering module
			if (bluetoothData[0] == '7'){
				sendData(0b00000100,0x01,1);
				bluetoothData[0] = '0';
 3ec:	0f 2e       	mov	r0, r31
 3ee:	f0 e3       	ldi	r31, 0x30	; 48
 3f0:	ff 2e       	mov	r15, r31
 3f2:	f0 2d       	mov	r31, r0
	sei(); //Enable global interrupts
	
	DDRB |= 0b01111111;	
	
	while(1){
		if (bit_is_set(PINB, 0)){
 3f4:	18 9b       	sbis	0x03, 0	; 3
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <main+0x26>
			manualMode = 1;
 3f8:	00 93 2c 01 	sts	0x012C, r16
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <main+0x2a>
		}
		else{
			manualMode = 0;
 3fe:	10 92 2c 01 	sts	0x012C, r1
		}
		readData(0b00000100); // Read data from the sensor module
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	d6 df       	rcall	.-84     	; 0x3b2 <readData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 406:	27 e3       	ldi	r18, 0x37	; 55
 408:	8e e3       	ldi	r24, 0x3E	; 62
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0x34>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x3e>
 416:	00 00       	nop
		// Check if the switch is set to manual mode or not
		//manualMode = ((sensorData[2] & (1 << 3)) >> 3); 
		
		// If the switch is set to manual mode, send the sensor data to the steering module. 
		//Otherwise, send the bluetooth data to the steering module.
		if (manualMode == 0){
 418:	80 91 2c 01 	lds	r24, 0x012C
 41c:	81 11       	cpse	r24, r1
 41e:	07 c0       	rjmp	.+14     	; 0x42e <main+0x56>
			sendData(0b00000010,sensorData,15);
 420:	4f e0       	ldi	r20, 0x0F	; 15
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	6d e0       	ldi	r22, 0x0D	; 13
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	b0 df       	rcall	.-160    	; 0x38c <sendData>
 42c:	11 c0       	rjmp	.+34     	; 0x450 <main+0x78>
		}
		else{
			// If we get a command to calibrate the tape sensor, send a command to the sensor module, otherwise to the steering module
			if (bluetoothData[0] == '7'){
 42e:	88 81       	ld	r24, Y
 430:	87 33       	cpi	r24, 0x37	; 55
 432:	41 f4       	brne	.+16     	; 0x444 <main+0x6c>
				sendData(0b00000100,0x01,1);
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	a6 df       	rcall	.-180    	; 0x38c <sendData>
				bluetoothData[0] = '0';
 440:	f8 82       	st	Y, r15
 442:	06 c0       	rjmp	.+12     	; 0x450 <main+0x78>
			}
			else {				
				bluetoothData[0] = (1 << 3);//sensorData[2];
 444:	18 83       	st	Y, r17
				sendData(0b00000010,bluetoothData,4);
 446:	44 e0       	ldi	r20, 0x04	; 4
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	be 01       	movw	r22, r28
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	9e df       	rcall	.-196    	; 0x38c <sendData>
 450:	8d e8       	ldi	r24, 0x8D	; 141
 452:	9f e8       	ldi	r25, 0x8F	; 143
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <main+0x7c>
 458:	00 c0       	rjmp	.+0      	; 0x45a <main+0x82>
 45a:	00 00       	nop
 45c:	cb cf       	rjmp	.-106    	; 0x3f4 <main+0x1c>

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
