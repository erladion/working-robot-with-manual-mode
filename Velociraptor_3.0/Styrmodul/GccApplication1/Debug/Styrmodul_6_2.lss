
Styrmodul_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00002402  00002496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000216  0080010a  0080010a  000024a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032ed  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebd  00000000  00000000  00005b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ced  00000000  00000000  000069c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000820  00000000  00000000  000086b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c34  00000000  00000000  00008ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029c8  00000000  00000000  00009b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000c4cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
       6:	00 00       	nop
       8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
       a:	00 00       	nop
       c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
       e:	00 00       	nop
      10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
      12:	00 00       	nop
      14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
      16:	00 00       	nop
      18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	76 c0       	rjmp	.+236    	; 0x10a <__bad_interrupt>
      1e:	00 00       	nop
      20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
      22:	00 00       	nop
      24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
      26:	00 00       	nop
      28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
      2e:	00 00       	nop
      30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
      32:	00 00       	nop
      34:	6a c0       	rjmp	.+212    	; 0x10a <__bad_interrupt>
      36:	00 00       	nop
      38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
      3e:	00 00       	nop
      40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
      42:	00 00       	nop
      44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
      46:	00 00       	nop
      48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
      4e:	00 00       	nop
      50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
      52:	00 00       	nop
      54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
      56:	00 00       	nop
      58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
      5e:	00 00       	nop
      60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
      62:	00 00       	nop
      64:	52 c0       	rjmp	.+164    	; 0x10a <__bad_interrupt>
      66:	00 00       	nop
      68:	51 c0       	rjmp	.+162    	; 0x10c <__vector_26>
      6a:	00 00       	nop
      6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
      6e:	00 00       	nop
      70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
      72:	00 00       	nop
      74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
      76:	00 00       	nop
      78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_32>
      84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
      86:	00 00       	nop
      88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a 01       	movw	r6, r20
      8e:	4b 01       	movw	r8, r22
      90:	52 01       	movw	r10, r4
      92:	5d 01       	movw	r10, r26
      94:	64 01       	movw	r12, r8
      96:	6f 01       	movw	r12, r30
      98:	76 01       	movw	r14, r12
      9a:	81 01       	movw	r16, r2
      9c:	88 01       	movw	r16, r16
      9e:	93 01       	movw	r18, r6
      a0:	98 01       	movw	r18, r16
      a2:	9d 01       	movw	r18, r26
      a4:	a2 01       	movw	r20, r4
      a6:	94 02       	muls	r25, r20
      a8:	96 02       	muls	r25, r22
      aa:	ac 02       	muls	r26, r28
      ac:	c2 02       	muls	r28, r18
      ae:	d8 02       	muls	r29, r24
      b0:	ee 02       	muls	r30, r30
      b2:	20 03       	mulsu	r18, r16
      b4:	5f 0e       	add	r5, r31
      b6:	65 0e       	add	r6, r21
      b8:	6b 0e       	add	r6, r27
      ba:	a2 0e       	add	r10, r18
      bc:	97 0e       	add	r9, r23
      be:	b3 0e       	add	r11, r19
      c0:	71 0e       	add	r7, r17
      c2:	84 0e       	add	r8, r20
      c4:	ad 0e       	add	r10, r29
      c6:	49 0e       	add	r4, r25
      c8:	fc 0e       	add	r15, r28
      ca:	07 0f       	add	r16, r23

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d0 e4       	ldi	r29, 0x40	; 64
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e2 e0       	ldi	r30, 0x02	; 2
      e0:	f4 e2       	ldi	r31, 0x24	; 36
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	aa 30       	cpi	r26, 0x0A	; 10
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	23 e0       	ldi	r18, 0x03	; 3
      f4:	aa e0       	ldi	r26, 0x0A	; 10
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a0 32       	cpi	r26, 0x20	; 32
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <main>
     106:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <_exit>

0000010a <__bad_interrupt>:
     10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <__vector_26>:
#include <avr/interrupt.h>
#include "BusSlave.h"
#include "DebugHelp.h"
#include "BusValues.h"

ISR(TWI_vect){
     10c:	1f 92       	push	r1
     10e:	0f 92       	push	r0
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	0f 92       	push	r0
     114:	11 24       	eor	r1, r1
     116:	0b b6       	in	r0, 0x3b	; 59
     118:	0f 92       	push	r0
     11a:	2f 93       	push	r18
     11c:	3f 93       	push	r19
     11e:	4f 93       	push	r20
     120:	5f 93       	push	r21
     122:	6f 93       	push	r22
     124:	7f 93       	push	r23
     126:	8f 93       	push	r24
     128:	9f 93       	push	r25
     12a:	af 93       	push	r26
     12c:	bf 93       	push	r27
     12e:	ef 93       	push	r30
     130:	ff 93       	push	r31
	// SEND DATA - sensormodul
	
	// The Slave has been addressed by the Master
	if ((TWSR & 0xF8) == 0xA8){
     132:	80 91 b9 00 	lds	r24, 0x00B9
     136:	88 7f       	andi	r24, 0xF8	; 248
     138:	88 3a       	cpi	r24, 0xA8	; 168
     13a:	a1 f4       	brne	.+40     	; 0x164 <__vector_26+0x58>
		TWIcounter = 0;
     13c:	10 92 18 01 	sts	0x0118, r1
     140:	10 92 17 01 	sts	0x0117, r1
		TWDR = TWIdata[TWIcounter];
     144:	80 91 17 01 	lds	r24, 0x0117
     148:	90 91 18 01 	lds	r25, 0x0118
     14c:	e0 91 15 01 	lds	r30, 0x0115
     150:	f0 91 16 01 	lds	r31, 0x0116
     154:	e8 0f       	add	r30, r24
     156:	f9 1f       	adc	r31, r25
     158:	80 81       	ld	r24, Z
     15a:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     15e:	85 ec       	ldi	r24, 0xC5	; 197
     160:	80 93 bc 00 	sts	0x00BC, r24
	}
	// Send data now
	if ((TWSR & 0xF8) == 0xB8){
     164:	80 91 b9 00 	lds	r24, 0x00B9
     168:	88 7f       	andi	r24, 0xF8	; 248
     16a:	88 3b       	cpi	r24, 0xB8	; 184
     16c:	c9 f4       	brne	.+50     	; 0x1a0 <__vector_26+0x94>
		TWDR = TWIdata[TWIcounter];
     16e:	80 91 17 01 	lds	r24, 0x0117
     172:	90 91 18 01 	lds	r25, 0x0118
     176:	e0 91 15 01 	lds	r30, 0x0115
     17a:	f0 91 16 01 	lds	r31, 0x0116
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	80 81       	ld	r24, Z
     184:	80 93 bb 00 	sts	0x00BB, r24
		TWIcounter++;
     188:	80 91 17 01 	lds	r24, 0x0117
     18c:	90 91 18 01 	lds	r25, 0x0118
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	90 93 18 01 	sts	0x0118, r25
     196:	80 93 17 01 	sts	0x0117, r24
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     19a:	85 ec       	ldi	r24, 0xC5	; 197
     19c:	80 93 bc 00 	sts	0x00BC, r24
	}
	// Done with sending data
	if ((TWSR & 0xF8) == 0xC0){
     1a0:	80 91 b9 00 	lds	r24, 0x00B9
     1a4:	88 7f       	andi	r24, 0xF8	; 248
     1a6:	80 3c       	cpi	r24, 0xC0	; 192
     1a8:	19 f4       	brne	.+6      	; 0x1b0 <__vector_26+0xa4>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1aa:	85 ec       	ldi	r24, 0xC5	; 197
     1ac:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	//RECEIVE DATA - styrmodul
	
	// The Slave has been addressed by the Master
	if ((TWSR & 0xF8) == 0x60){
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
     1b6:	80 36       	cpi	r24, 0x60	; 96
     1b8:	39 f4       	brne	.+14     	; 0x1c8 <__vector_26+0xbc>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1ba:	85 ec       	ldi	r24, 0xC5	; 197
     1bc:	80 93 bc 00 	sts	0x00BC, r24
		TWIcounter = 0;
     1c0:	10 92 18 01 	sts	0x0118, r1
     1c4:	10 92 17 01 	sts	0x0117, r1
	}
	
	// Data is received
	if ((TWSR & 0xF8) == 0x80){
     1c8:	80 91 b9 00 	lds	r24, 0x00B9
     1cc:	88 7f       	andi	r24, 0xF8	; 248
     1ce:	80 38       	cpi	r24, 0x80	; 128
     1d0:	31 f5       	brne	.+76     	; 0x21e <__vector_26+0x112>
		char var = TWDR;
     1d2:	80 91 bb 00 	lds	r24, 0x00BB
		if (TWIcounter <3){
     1d6:	20 91 17 01 	lds	r18, 0x0117
     1da:	30 91 18 01 	lds	r19, 0x0118
     1de:	23 30       	cpi	r18, 0x03	; 3
     1e0:	31 05       	cpc	r19, r1
     1e2:	5c f4       	brge	.+22     	; 0x1fa <__vector_26+0xee>
			TWIdata[TWIcounter] = var;
     1e4:	20 91 17 01 	lds	r18, 0x0117
     1e8:	30 91 18 01 	lds	r19, 0x0118
     1ec:	e0 91 15 01 	lds	r30, 0x0115
     1f0:	f0 91 16 01 	lds	r31, 0x0116
     1f4:	e2 0f       	add	r30, r18
     1f6:	f3 1f       	adc	r31, r19
     1f8:	80 83       	st	Z, r24
		}
		updateBusValues(var,TWIcounter); // Saves the latest sensor data from the bus.
     1fa:	60 91 17 01 	lds	r22, 0x0117
     1fe:	70 91 18 01 	lds	r23, 0x0118
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2d d0       	rcall	.+90     	; 0x260 <updateBusValues>
		TWIcounter++;
     206:	80 91 17 01 	lds	r24, 0x0117
     20a:	90 91 18 01 	lds	r25, 0x0118
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	90 93 18 01 	sts	0x0118, r25
     214:	80 93 17 01 	sts	0x0117, r24
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     218:	85 ec       	ldi	r24, 0xC5	; 197
     21a:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	// STOP condition is received
	if ((TWSR & 0xF8) == 0xA0){		
     21e:	80 91 b9 00 	lds	r24, 0x00B9
     222:	88 7f       	andi	r24, 0xF8	; 248
     224:	80 3a       	cpi	r24, 0xA0	; 160
     226:	19 f4       	brne	.+6      	; 0x22e <__vector_26+0x122>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     228:	85 ec       	ldi	r24, 0xC5	; 197
     22a:	80 93 bc 00 	sts	0x00BC, r24
	}
}
     22e:	ff 91       	pop	r31
     230:	ef 91       	pop	r30
     232:	bf 91       	pop	r27
     234:	af 91       	pop	r26
     236:	9f 91       	pop	r25
     238:	8f 91       	pop	r24
     23a:	7f 91       	pop	r23
     23c:	6f 91       	pop	r22
     23e:	5f 91       	pop	r21
     240:	4f 91       	pop	r20
     242:	3f 91       	pop	r19
     244:	2f 91       	pop	r18
     246:	0f 90       	pop	r0
     248:	0b be       	out	0x3b, r0	; 59
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <initBuss>:

void initBuss(char address){
	TWAR = address;
     254:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE) | (1 << TWINT);
     258:	85 ec       	ldi	r24, 0xC5	; 197
     25a:	80 93 bc 00 	sts	0x00BC, r24
     25e:	08 95       	ret

00000260 <updateBusValues>:
 */ 

#include "BusValues.h"

void updateBusValues(int var, int index) {
	switch(index){
     260:	fb 01       	movw	r30, r22
     262:	32 97       	sbiw	r30, 0x02	; 2
     264:	ed 30       	cpi	r30, 0x0D	; 13
     266:	f1 05       	cpc	r31, r1
     268:	08 f0       	brcs	.+2      	; 0x26c <updateBusValues+0xc>
     26a:	70 c0       	rjmp	.+224    	; 0x34c <updateBusValues+0xec>
     26c:	ea 5b       	subi	r30, 0xBA	; 186
     26e:	ff 4f       	sbci	r31, 0xFF	; 255
     270:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__tablejump2__>
		case 2:
			startbutton = ((var & 0b01000000) >> 6);
     274:	86 fb       	bst	r24, 6
     276:	44 27       	eor	r20, r20
     278:	40 f9       	bld	r20, 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	50 93 42 01 	sts	0x0142, r21
     280:	40 93 41 01 	sts	0x0141, r20
			mode = ((var & 0b00100000) >> 5);
     284:	85 fb       	bst	r24, 5
     286:	22 27       	eor	r18, r18
     288:	20 f9       	bld	r18, 0
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	30 93 1c 01 	sts	0x011C, r19
     290:	20 93 1b 01 	sts	0x011B, r18
			break;
     294:	08 95       	ret
		case 3:			
			reflex = (var << 8);
     296:	98 2f       	mov	r25, r24
     298:	88 27       	eor	r24, r24
     29a:	90 93 44 01 	sts	0x0144, r25
     29e:	80 93 43 01 	sts	0x0143, r24
			break;
     2a2:	08 95       	ret
		case 4:
			reflex += var;
     2a4:	20 91 43 01 	lds	r18, 0x0143
     2a8:	30 91 44 01 	lds	r19, 0x0144
     2ac:	82 0f       	add	r24, r18
     2ae:	93 1f       	adc	r25, r19
     2b0:	90 93 44 01 	sts	0x0144, r25
     2b4:	80 93 43 01 	sts	0x0143, r24
			break;
     2b8:	08 95       	ret
		case 5:
			currentAngle = (var << 8);
     2ba:	98 2f       	mov	r25, r24
     2bc:	88 27       	eor	r24, r24
     2be:	90 93 1e 01 	sts	0x011E, r25
     2c2:	80 93 1d 01 	sts	0x011D, r24
			break;
     2c6:	08 95       	ret
		case 6:
			currentAngle += var;
     2c8:	20 91 1d 01 	lds	r18, 0x011D
     2cc:	30 91 1e 01 	lds	r19, 0x011E
     2d0:	82 0f       	add	r24, r18
     2d2:	93 1f       	adc	r25, r19
     2d4:	90 93 1e 01 	sts	0x011E, r25
     2d8:	80 93 1d 01 	sts	0x011D, r24
			break;
     2dc:	08 95       	ret
		case 7:
			distanceFront = (var << 8);
     2de:	98 2f       	mov	r25, r24
     2e0:	88 27       	eor	r24, r24
     2e2:	90 93 14 01 	sts	0x0114, r25
     2e6:	80 93 13 01 	sts	0x0113, r24
			break;
     2ea:	08 95       	ret
		case 8:
			distanceFront += var;
     2ec:	20 91 13 01 	lds	r18, 0x0113
     2f0:	30 91 14 01 	lds	r19, 0x0114
     2f4:	82 0f       	add	r24, r18
     2f6:	93 1f       	adc	r25, r19
     2f8:	90 93 14 01 	sts	0x0114, r25
     2fc:	80 93 13 01 	sts	0x0113, r24
			break;
     300:	08 95       	ret
		case 9:
			distanceBack = (var << 8);
     302:	98 2f       	mov	r25, r24
     304:	88 27       	eor	r24, r24
     306:	90 93 40 01 	sts	0x0140, r25
     30a:	80 93 3f 01 	sts	0x013F, r24
			break;
     30e:	08 95       	ret
		case 10:
			distanceBack += var;
     310:	20 91 3f 01 	lds	r18, 0x013F
     314:	30 91 40 01 	lds	r19, 0x0140
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	90 93 40 01 	sts	0x0140, r25
     320:	80 93 3f 01 	sts	0x013F, r24
			break;
     324:	08 95       	ret
		case 11:
			IRFR = var;
     326:	90 93 1a 01 	sts	0x011A, r25
     32a:	80 93 19 01 	sts	0x0119, r24
			break;
     32e:	08 95       	ret
		case 12:
			IRFL = var;
     330:	90 93 46 01 	sts	0x0146, r25
     334:	80 93 45 01 	sts	0x0145, r24
			break;
     338:	08 95       	ret
		case 13:
			IRBR = var;
     33a:	90 93 12 01 	sts	0x0112, r25
     33e:	80 93 11 01 	sts	0x0111, r24
			break;
     342:	08 95       	ret
		case 14:
			IRBL = var;
     344:	90 93 48 01 	sts	0x0148, r25
     348:	80 93 47 01 	sts	0x0147, r24
     34c:	08 95       	ret

0000034e <intToBitArray>:
#include "DebugHelp.h"

void intToBitArray(int array[], int arraySize, int num){
	int i;
	
	for (i = 0; i < arraySize; ++i)
     34e:	16 16       	cp	r1, r22
     350:	17 06       	cpc	r1, r23
     352:	9c f4       	brge	.+38     	; 0x37a <intToBitArray+0x2c>
     354:	e8 2f       	mov	r30, r24
     356:	f9 2f       	mov	r31, r25
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
	{
		array[i] = num & (1 << i) ? 1 : 0;
     35c:	9a 01       	movw	r18, r20
     35e:	08 2e       	mov	r0, r24
     360:	02 c0       	rjmp	.+4      	; 0x366 <intToBitArray+0x18>
     362:	35 95       	asr	r19
     364:	27 95       	ror	r18
     366:	0a 94       	dec	r0
     368:	e2 f7       	brpl	.-8      	; 0x362 <intToBitArray+0x14>
     36a:	21 70       	andi	r18, 0x01	; 1
     36c:	33 27       	eor	r19, r19
     36e:	21 93       	st	Z+, r18
     370:	31 93       	st	Z+, r19
#include "DebugHelp.h"

void intToBitArray(int array[], int arraySize, int num){
	int i;
	
	for (i = 0; i < arraySize; ++i)
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	86 17       	cp	r24, r22
     376:	97 07       	cpc	r25, r23
     378:	89 f7       	brne	.-30     	; 0x35c <intToBitArray+0xe>
     37a:	08 95       	ret

0000037c <displayBinaryNumber>:
		array[i] = num & (1 << i) ? 1 : 0;
	}
}

void displayBinaryNumber(int number, int numberSize)
{	
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	8b 01       	movw	r16, r22
		pulse(PORTB,0);
		if (array[i] == 1){
			pulse(PORTB,1);
		}
	}
}
     396:	cd b6       	in	r12, 0x3d	; 61
     398:	de b6       	in	r13, 0x3e	; 62
	}
}

void displayBinaryNumber(int number, int numberSize)
{	
	int array[numberSize];
     39a:	7b 01       	movw	r14, r22
     39c:	ee 0c       	add	r14, r14
     39e:	ff 1c       	adc	r15, r15
     3a0:	2d b7       	in	r18, 0x3d	; 61
     3a2:	3e b7       	in	r19, 0x3e	; 62
     3a4:	2e 19       	sub	r18, r14
     3a6:	3f 09       	sbc	r19, r15
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	3e bf       	out	0x3e, r19	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	2d bf       	out	0x3d, r18	; 61
     3b2:	2f 5f       	subi	r18, 0xFF	; 255
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	59 01       	movw	r10, r18

	intToBitArray(array,numberSize,number);
     3b8:	ac 01       	movw	r20, r24
     3ba:	c9 01       	movw	r24, r18
     3bc:	c8 df       	rcall	.-112    	; 0x34e <intToBitArray>

	for (int i = numberSize; i >= 0; i--)
     3be:	11 23       	and	r17, r17
     3c0:	9c f0       	brlt	.+38     	; 0x3e8 <displayBinaryNumber+0x6c>
     3c2:	32 e0       	ldi	r19, 0x02	; 2
     3c4:	e3 0e       	add	r14, r19
     3c6:	f1 1c       	adc	r15, r1
     3c8:	f5 01       	movw	r30, r10
     3ca:	ee 0d       	add	r30, r14
     3cc:	ff 1d       	adc	r31, r15
	{
		pulse(PORTB,0);
     3ce:	28 98       	cbi	0x05, 0	; 5
     3d0:	28 9a       	sbi	0x05, 0	; 5
     3d2:	28 98       	cbi	0x05, 0	; 5
		if (array[i] == 1){
     3d4:	92 91       	ld	r25, -Z
     3d6:	82 91       	ld	r24, -Z
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	19 f4       	brne	.+6      	; 0x3e2 <displayBinaryNumber+0x66>
			pulse(PORTB,1);
     3dc:	29 98       	cbi	0x05, 1	; 5
     3de:	29 9a       	sbi	0x05, 1	; 5
     3e0:	29 98       	cbi	0x05, 1	; 5
{	
	int array[numberSize];

	intToBitArray(array,numberSize,number);

	for (int i = numberSize; i >= 0; i--)
     3e2:	01 50       	subi	r16, 0x01	; 1
     3e4:	11 09       	sbc	r17, r1
     3e6:	98 f7       	brcc	.-26     	; 0x3ce <displayBinaryNumber+0x52>
		pulse(PORTB,0);
		if (array[i] == 1){
			pulse(PORTB,1);
		}
	}
}
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de be       	out	0x3e, r13	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd be       	out	0x3d, r12	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	bf 90       	pop	r11
     404:	af 90       	pop	r10
     406:	08 95       	ret

00000408 <grab_object>:

// Make the gripping claw move towards claw_position.
// Good values are somewhere between 250-400. 
// At 250 the claw is closed shut and at 400 the claw is wide open aka claw position.
void grab_object(int claw_position){
	OCR1A = claw_position;
     408:	90 93 89 00 	sts	0x0089, r25
     40c:	80 93 88 00 	sts	0x0088, r24
     410:	08 95       	ret

00000412 <init_gripping_claw_timer>:
}

// Initializes the gripping claw
void init_gripping_claw_timer()
{	
	DDRD |= (1<<PD5); // Set PWM pin as output
     412:	55 9a       	sbi	0x0a, 5	; 10
	
	TCNT1 = 0; // Set the initial value of timer1 to 0
     414:	10 92 85 00 	sts	0x0085, r1
     418:	10 92 84 00 	sts	0x0084, r1
	
	// -- CALCULATION OF ICR1 VALUE TO GENERATE A PULSE EVERY 20ms --
	// ICR1 = (Clock_Speed / (Prescaler * Output_PWM_Frequency)) - 1
	//		= (14745000 / (64 * 50)) - 1
	//		= 4606.8125 =~ 4607
	ICR1 = 4607; // Which creates a pulse every 20ms (equal to 50 Hz)
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	91 e1       	ldi	r25, 0x11	; 17
     420:	90 93 87 00 	sts	0x0087, r25
     424:	80 93 86 00 	sts	0x0086, r24
	
	TCCR1A |= (1<<COM1A1)|(1<<WGM11);	// Set timer1 to non inverted PWM
     428:	e0 e8       	ldi	r30, 0x80	; 128
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	82 68       	ori	r24, 0x82	; 130
     430:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); // Prescale with 64. Set mode to 14(FAST PWM)
     432:	e1 e8       	ldi	r30, 0x81	; 129
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	8b 61       	ori	r24, 0x1B	; 27
     43a:	80 83       	st	Z, r24

// Make the gripping claw move towards claw_position.
// Good values are somewhere between 250-400. 
// At 250 the claw is closed shut and at 400 the claw is wide open aka claw position.
void grab_object(int claw_position){
	OCR1A = claw_position;
     43c:	8e e5       	ldi	r24, 0x5E	; 94
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	90 93 89 00 	sts	0x0089, r25
     444:	80 93 88 00 	sts	0x0088, r24
     448:	08 95       	ret

0000044a <stop>:
void drive_backwards(int speed){
	drive_general(-speed,-speed);
}
void stop(){
	//Motorer
	TCCR0A =  0x00;
     44a:	14 bc       	out	0x24, r1	; 36
	TCCR2A =  0x00;
     44c:	10 92 b0 00 	sts	0x00B0, r1
     450:	08 95       	ret

00000452 <drive_general>:
void rotate_right(int speed){
	drive_general(-speed,speed);
}

void drive_general(int speed1, int speed2){	
	TCCR0A =  _BV(WGM10) | _BV(COM1A1);
     452:	21 e8       	ldi	r18, 0x81	; 129
     454:	24 bd       	out	0x24, r18	; 36
	TCCR2A =  _BV(WGM10) | _BV(COM1A1);
     456:	20 93 b0 00 	sts	0x00B0, r18
	if(speed1>0){ // if speed is positive, drive forwards, otherwise drive backwards
     45a:	18 16       	cp	r1, r24
     45c:	19 06       	cpc	r1, r25
     45e:	14 f4       	brge	.+4      	; 0x464 <drive_general+0x12>
		sbi(PORTA,2);
     460:	12 9a       	sbi	0x02, 2	; 2
     462:	04 c0       	rjmp	.+8      	; 0x46c <drive_general+0x1a>
	}
	else{
		cbi(PORTA,2);
     464:	12 98       	cbi	0x02, 2	; 2
		speed1 *= -1;
     466:	91 95       	neg	r25
     468:	81 95       	neg	r24
     46a:	91 09       	sbc	r25, r1
	}
	if(speed2>0){
     46c:	16 16       	cp	r1, r22
     46e:	17 06       	cpc	r1, r23
     470:	14 f4       	brge	.+4      	; 0x476 <drive_general+0x24>
		sbi(PORTA,1);
     472:	11 9a       	sbi	0x02, 1	; 2
     474:	04 c0       	rjmp	.+8      	; 0x47e <drive_general+0x2c>
	}
	else{
		cbi(PORTA,1);
     476:	11 98       	cbi	0x02, 1	; 2
		speed2 *= -1;
     478:	71 95       	neg	r23
     47a:	61 95       	neg	r22
     47c:	71 09       	sbc	r23, r1
	}
	OCR2A = speed1;
     47e:	80 93 b3 00 	sts	0x00B3, r24
	OCR0A = speed2;
     482:	67 bd       	out	0x27, r22	; 39
     484:	08 95       	ret

00000486 <drive_forward>:
#include <avr/delay.h>
#include "MotorController.h"
#include "DebugHelp.h"

void drive_forward(int speed){
	drive_general(speed,speed);
     486:	bc 01       	movw	r22, r24
     488:	e4 cf       	rjmp	.-56     	; 0x452 <drive_general>
     48a:	08 95       	ret

0000048c <drive_backwards>:
}
void drive_backwards(int speed){
	drive_general(-speed,-speed);
     48c:	91 95       	neg	r25
     48e:	81 95       	neg	r24
     490:	91 09       	sbc	r25, r1
     492:	bc 01       	movw	r22, r24
     494:	de cf       	rjmp	.-68     	; 0x452 <drive_general>
     496:	08 95       	ret

00000498 <rotate_left>:
	//Griparm
	//TIMSK1 = (0<<OCIE1A); //Disable timer1 interrupt
}

void rotate_left(int speed){
	drive_general(speed,-speed); 
     498:	66 27       	eor	r22, r22
     49a:	77 27       	eor	r23, r23
     49c:	68 1b       	sub	r22, r24
     49e:	79 0b       	sbc	r23, r25
     4a0:	d8 cf       	rjmp	.-80     	; 0x452 <drive_general>
     4a2:	08 95       	ret

000004a4 <rotate_right>:
}

void rotate_right(int speed){
	drive_general(-speed,speed);
     4a4:	bc 01       	movw	r22, r24
     4a6:	91 95       	neg	r25
     4a8:	81 95       	neg	r24
     4aa:	91 09       	sbc	r25, r1
     4ac:	d2 cf       	rjmp	.-92     	; 0x452 <drive_general>
     4ae:	08 95       	ret

000004b0 <init_motor_timers>:
}


void init_motor_timers()
{
	defaultSpeed = 110; // Was 100 2015-12-15
     4b0:	8e e6       	ldi	r24, 0x6E	; 110
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 93 4c 01 	sts	0x014C, r25
     4b8:	80 93 4b 01 	sts	0x014B, r24
	rotateSpeed = 100;
     4bc:	84 e6       	ldi	r24, 0x64	; 100
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	90 93 4a 01 	sts	0x014A, r25
     4c4:	80 93 49 01 	sts	0x0149, r24
	DDRA = 0x00;
     4c8:	11 b8       	out	0x01, r1	; 1
	
	DDRB = 0xFF;
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
     4ce:	8a b9       	out	0x0a, r24	; 10
	
	// enable 8 bit PWM, select inverted PWM
	TCCR0A =  _BV(WGM10) | _BV(COM1A1);
     4d0:	81 e8       	ldi	r24, 0x81	; 129
     4d2:	84 bd       	out	0x24, r24	; 36
	TCCR2A =  _BV(WGM10) | _BV(COM1A1);
     4d4:	80 93 b0 00 	sts	0x00B0, r24
	
	
	TCCR0B = 0b00000010;	// Div8 Prescaler	
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	95 bd       	out	0x25, r25	; 37
	OCR0A   = 100; // init value 100
     4dc:	84 e6       	ldi	r24, 0x64	; 100
     4de:	87 bd       	out	0x27, r24	; 39
	
	TCCR2B = 0b00000010;	// Div8 Prescaler
     4e0:	90 93 b1 00 	sts	0x00B1, r25
	OCR2A   = 100; // init value 100
     4e4:	80 93 b3 00 	sts	0x00B3, r24
	
	// Set timer0 and timer2 counter initial value to 0
	TCNT0=0;
     4e8:	16 bc       	out	0x26, r1	; 38
	TCNT2=0;
     4ea:	10 92 b2 00 	sts	0x00B2, r1
     4ee:	08 95       	ret

000004f0 <convertToMotorData>:
}

void convertToMotorData(char motorData[]){
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	cf 93       	push	r28
     502:	fc 01       	movw	r30, r24
	// 48 is the ASCII number for 0
	// 47 is the ASCII number for 1
	char command = motorData[0] - 48; // Convert from char to int
	char speed = motorData[1] - 47;
     504:	61 81       	ldd	r22, Z+1	; 0x01
     506:	6f 52       	subi	r22, 0x2F	; 47
	char turnrate = motorData[2] - 47;
     508:	c2 81       	ldd	r28, Z+2	; 0x02
     50a:	cf 52       	subi	r28, 0x2F	; 47
}

void convertToMotorData(char motorData[]){
	// 48 is the ASCII number for 0
	// 47 is the ASCII number for 1
	char command = motorData[0] - 48; // Convert from char to int
     50c:	80 81       	ld	r24, Z
     50e:	e0 ed       	ldi	r30, 0xD0	; 208
     510:	e8 0f       	add	r30, r24
	char speed = motorData[1] - 47;
	char turnrate = motorData[2] - 47;
	switch(command){
     512:	8e 2f       	mov	r24, r30
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	87 30       	cpi	r24, 0x07	; 7
     518:	91 05       	cpc	r25, r1
     51a:	08 f0       	brcs	.+2      	; 0x51e <convertToMotorData+0x2e>
     51c:	c1 c0       	rjmp	.+386    	; 0x6a0 <convertToMotorData+0x1b0>
     51e:	fc 01       	movw	r30, r24
     520:	ed 5a       	subi	r30, 0xAD	; 173
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__tablejump2__>
		// Stop
		case 0:
			stop();
     528:	90 df       	rcall	.-224    	; 0x44a <stop>
			break;
     52a:	bb c0       	rjmp	.+374    	; 0x6a2 <convertToMotorData+0x1b2>
		// Drive forward
		case 1:
			drive_forward(ENGINETHRESHOLD+speed*ENGINESTEP);
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	44 ea       	ldi	r20, 0xA4	; 164
     53c:	51 e4       	ldi	r21, 0x41	; 65
     53e:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	48 e4       	ldi	r20, 0x48	; 72
     548:	52 e4       	ldi	r21, 0x42	; 66
     54a:	0e 94 44 10 	call	0x2088	; 0x2088 <__addsf3>
     54e:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     552:	cb 01       	movw	r24, r22
     554:	98 df       	rcall	.-208    	; 0x486 <drive_forward>
			break;
     556:	a5 c0       	rjmp	.+330    	; 0x6a2 <convertToMotorData+0x1b2>
		// Drive backward
		case 2:
			drive_backwards(ENGINETHRESHOLD+speed*ENGINESTEP);
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	44 ea       	ldi	r20, 0xA4	; 164
     568:	51 e4       	ldi	r21, 0x41	; 65
     56a:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	48 e4       	ldi	r20, 0x48	; 72
     574:	52 e4       	ldi	r21, 0x42	; 66
     576:	0e 94 44 10 	call	0x2088	; 0x2088 <__addsf3>
     57a:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     57e:	cb 01       	movw	r24, r22
     580:	85 df       	rcall	.-246    	; 0x48c <drive_backwards>
			break;
     582:	8f c0       	rjmp	.+286    	; 0x6a2 <convertToMotorData+0x1b2>
		// Rotate left
		case 3:
			rotate_left(ENGINETHRESHOLD+speed*ENGINESTEP);
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	44 ea       	ldi	r20, 0xA4	; 164
     594:	51 e4       	ldi	r21, 0x41	; 65
     596:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	48 e4       	ldi	r20, 0x48	; 72
     5a0:	52 e4       	ldi	r21, 0x42	; 66
     5a2:	0e 94 44 10 	call	0x2088	; 0x2088 <__addsf3>
     5a6:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     5aa:	cb 01       	movw	r24, r22
     5ac:	75 df       	rcall	.-278    	; 0x498 <rotate_left>
			break;
     5ae:	79 c0       	rjmp	.+242    	; 0x6a2 <convertToMotorData+0x1b2>
		// Rotate right
		case 4:
			rotate_right(ENGINETHRESHOLD+speed*ENGINESTEP);
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	44 ea       	ldi	r20, 0xA4	; 164
     5c0:	51 e4       	ldi	r21, 0x41	; 65
     5c2:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	48 e4       	ldi	r20, 0x48	; 72
     5cc:	52 e4       	ldi	r21, 0x42	; 66
     5ce:	0e 94 44 10 	call	0x2088	; 0x2088 <__addsf3>
     5d2:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     5d6:	cb 01       	movw	r24, r22
     5d8:	65 df       	rcall	.-310    	; 0x4a4 <rotate_right>
			break;
     5da:	63 c0       	rjmp	.+198    	; 0x6a2 <convertToMotorData+0x1b2>
		// Turn left
		case 5:
			drive_general(ENGINETHRESHOLD+speed*ENGINESTEP,ENGINETHRESHOLD+speed*ENGINESTEP-turnrate*ENGINESTEP);
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	44 ea       	ldi	r20, 0xA4	; 164
     5ec:	51 e4       	ldi	r21, 0x41	; 65
     5ee:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	48 e4       	ldi	r20, 0x48	; 72
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 44 10 	call	0x2088	; 0x2088 <__addsf3>
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
     602:	6c 2f       	mov	r22, r28
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	44 ea       	ldi	r20, 0xA4	; 164
     614:	51 e4       	ldi	r21, 0x41	; 65
     616:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
     61e:	c7 01       	movw	r24, r14
     620:	b6 01       	movw	r22, r12
     622:	0e 94 43 10 	call	0x2086	; 0x2086 <__subsf3>
     626:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     62a:	4b 01       	movw	r8, r22
     62c:	5c 01       	movw	r10, r24
     62e:	c7 01       	movw	r24, r14
     630:	b6 01       	movw	r22, r12
     632:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	b4 01       	movw	r22, r8
     63c:	0a df       	rcall	.-492    	; 0x452 <drive_general>
			break;
     63e:	31 c0       	rjmp	.+98     	; 0x6a2 <convertToMotorData+0x1b2>
		// Turn right
		case 6:
			drive_general(ENGINETHRESHOLD+speed*ENGINESTEP-turnrate*ENGINESTEP,ENGINETHRESHOLD+speed*ENGINESTEP);		
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	44 ea       	ldi	r20, 0xA4	; 164
     650:	51 e4       	ldi	r21, 0x41	; 65
     652:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	48 e4       	ldi	r20, 0x48	; 72
     65c:	52 e4       	ldi	r21, 0x42	; 66
     65e:	0e 94 44 10 	call	0x2088	; 0x2088 <__addsf3>
     662:	6b 01       	movw	r12, r22
     664:	7c 01       	movw	r14, r24
     666:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     66a:	4b 01       	movw	r8, r22
     66c:	5c 01       	movw	r10, r24
     66e:	6c 2f       	mov	r22, r28
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 df 10 	call	0x21be	; 0x21be <__floatsisf>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	44 ea       	ldi	r20, 0xA4	; 164
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulsf3>
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	c7 01       	movw	r24, r14
     68c:	b6 01       	movw	r22, r12
     68e:	0e 94 43 10 	call	0x2086	; 0x2086 <__subsf3>
     692:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fixsfsi>
     696:	dc 01       	movw	r26, r24
     698:	cb 01       	movw	r24, r22
     69a:	b4 01       	movw	r22, r8
     69c:	da de       	rcall	.-588    	; 0x452 <drive_general>
			break;
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <convertToMotorData+0x1b2>
		default:
			stop();
     6a0:	d4 de       	rcall	.-600    	; 0x44a <stop>
			break;
	}
}
     6a2:	cf 91       	pop	r28
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	bf 90       	pop	r11
     6ae:	af 90       	pop	r10
     6b0:	9f 90       	pop	r9
     6b2:	8f 90       	pop	r8
     6b4:	08 95       	ret

000006b6 <initLabyrinthMemory>:
#include "NewLabyrinthMemory.h"
#include "GrippingClaw.h"
#include <avr/interrupt.h>

void initLabyrinthMemory(){
	for (int x = 0; x < 19; x++)
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
#include <avr/delay.h>
#include "NewLabyrinthMemory.h"
#include "GrippingClaw.h"
#include <avr/interrupt.h>

void initLabyrinthMemory(){
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	0f c0       	rjmp	.+30     	; 0x6de <initLabyrinthMemory+0x28>
	for (int x = 0; x < 19; x++)
	{
		for (int y = 0; y < 10; y++)
		{
			labyrinth[x][y] = wall;
     6c0:	f9 01       	movw	r30, r18
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	ee 5a       	subi	r30, 0xAE	; 174
     6c8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ca:	10 82       	st	Z, r1
#include <avr/interrupt.h>

void initLabyrinthMemory(){
	for (int x = 0; x < 19; x++)
	{
		for (int y = 0; y < 10; y++)
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	8a 30       	cpi	r24, 0x0A	; 10
     6d0:	91 05       	cpc	r25, r1
     6d2:	b1 f7       	brne	.-20     	; 0x6c0 <initLabyrinthMemory+0xa>
#include "NewLabyrinthMemory.h"
#include "GrippingClaw.h"
#include <avr/interrupt.h>

void initLabyrinthMemory(){
	for (int x = 0; x < 19; x++)
     6d4:	4f 5f       	subi	r20, 0xFF	; 255
     6d6:	5f 4f       	sbci	r21, 0xFF	; 255
     6d8:	43 31       	cpi	r20, 0x13	; 19
     6da:	51 05       	cpc	r21, r1
     6dc:	79 f0       	breq	.+30     	; 0x6fc <initLabyrinthMemory+0x46>
#include <avr/delay.h>
#include "NewLabyrinthMemory.h"
#include "GrippingClaw.h"
#include <avr/interrupt.h>

void initLabyrinthMemory(){
     6de:	8b 2f       	mov	r24, r27
     6e0:	9a 2f       	mov	r25, r26
	for (int x = 0; x < 19; x++)
	{
		for (int y = 0; y < 10; y++)
		{
			labyrinth[x][y] = wall;
     6e2:	9a 01       	movw	r18, r20
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	ba 01       	movw	r22, r20
     6f2:	66 0f       	add	r22, r22
     6f4:	77 1f       	adc	r23, r23
     6f6:	26 0f       	add	r18, r22
     6f8:	37 1f       	adc	r19, r23
     6fa:	e2 cf       	rjmp	.-60     	; 0x6c0 <initLabyrinthMemory+0xa>
		}
	}

	currentX = 9;
     6fc:	89 e0       	ldi	r24, 0x09	; 9
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	90 93 1e 02 	sts	0x021E, r25
     704:	80 93 1d 02 	sts	0x021D, r24
	currentY = 0;
     708:	10 92 50 01 	sts	0x0150, r1
     70c:	10 92 4f 01 	sts	0x014F, r1
	
	lastDirection = up;
     710:	10 92 4d 01 	sts	0x014D, r1
	
	labyrinth[8][1] = start;
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	80 93 a3 02 	sts	0x02A3, r24
	
	labyrinth[9][1] = start;
     71a:	80 93 ad 02 	sts	0x02AD, r24
	labyrinth[9][2] = object; 
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	80 93 ae 02 	sts	0x02AE, r24
     724:	08 95       	ret

00000726 <oppositeDirection>:
	
}

// Get opposite direction
direction oppositeDirection(direction dir){
	if (dir == down) return up;
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	41 f0       	breq	.+16     	; 0x73a <oppositeDirection+0x14>
	if (dir == up) return down;
     72a:	88 23       	and	r24, r24
     72c:	41 f0       	breq	.+16     	; 0x73e <oppositeDirection+0x18>
	if (dir == left) return right;
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	41 f0       	breq	.+16     	; 0x742 <oppositeDirection+0x1c>
	if (dir == right) return left;
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	41 f0       	breq	.+16     	; 0x746 <oppositeDirection+0x20>
	return none;
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	08 95       	ret
	
}

// Get opposite direction
direction oppositeDirection(direction dir){
	if (dir == down) return up;
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	08 95       	ret
	if (dir == up) return down;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	08 95       	ret
	if (dir == left) return right;
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	08 95       	ret
	if (dir == right) return left;
     746:	82 e0       	ldi	r24, 0x02	; 2
	return none;
}
     748:	08 95       	ret

0000074a <getGlobalDirection>:

// Converts a local direction to a global direction.
direction getGlobalDirection(direction dir){
	if (dir == up) return lastDirection;
     74a:	81 11       	cpse	r24, r1
     74c:	03 c0       	rjmp	.+6      	; 0x754 <getGlobalDirection+0xa>
     74e:	80 91 4d 01 	lds	r24, 0x014D
     752:	08 95       	ret
	else if (lastDirection == up){
     754:	90 91 4d 01 	lds	r25, 0x014D
     758:	99 23       	and	r25, r25
     75a:	a1 f1       	breq	.+104    	; 0x7c4 <getGlobalDirection+0x7a>
		return dir;
	}
	else if (lastDirection == down){
     75c:	90 91 4d 01 	lds	r25, 0x014D
     760:	91 30       	cpi	r25, 0x01	; 1
     762:	39 f4       	brne	.+14     	; 0x772 <getGlobalDirection+0x28>
		if (dir == down) return up;
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	d9 f0       	breq	.+54     	; 0x79e <getGlobalDirection+0x54>
		if (dir == left) return right;
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	d9 f0       	breq	.+54     	; 0x7a2 <getGlobalDirection+0x58>
		if (dir == right) return left;
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	b1 f4       	brne	.+44     	; 0x79c <getGlobalDirection+0x52>
     770:	1a c0       	rjmp	.+52     	; 0x7a6 <getGlobalDirection+0x5c>
	}
	else if (lastDirection == left){
     772:	90 91 4d 01 	lds	r25, 0x014D
     776:	92 30       	cpi	r25, 0x02	; 2
     778:	39 f4       	brne	.+14     	; 0x788 <getGlobalDirection+0x3e>
		if (dir == down) return right;
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	b1 f0       	breq	.+44     	; 0x7aa <getGlobalDirection+0x60>
		if (dir == left) return down;
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	b1 f0       	breq	.+44     	; 0x7ae <getGlobalDirection+0x64>
		if (dir == right) return up;
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	59 f4       	brne	.+22     	; 0x79c <getGlobalDirection+0x52>
     786:	15 c0       	rjmp	.+42     	; 0x7b2 <getGlobalDirection+0x68>
	}
	else if (lastDirection == right){
     788:	90 91 4d 01 	lds	r25, 0x014D
     78c:	93 30       	cpi	r25, 0x03	; 3
     78e:	99 f4       	brne	.+38     	; 0x7b6 <getGlobalDirection+0x6c>
		if (dir == down) return left;
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	99 f0       	breq	.+38     	; 0x7ba <getGlobalDirection+0x70>
		if (dir == left) return up;
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	99 f0       	breq	.+38     	; 0x7be <getGlobalDirection+0x74>
		if (dir == right) return down;
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	99 f0       	breq	.+38     	; 0x7c2 <getGlobalDirection+0x78>
     79c:	08 95       	ret
	if (dir == up) return lastDirection;
	else if (lastDirection == up){
		return dir;
	}
	else if (lastDirection == down){
		if (dir == down) return up;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	08 95       	ret
		if (dir == left) return right;
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	08 95       	ret
		if (dir == right) return left;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	08 95       	ret
	}
	else if (lastDirection == left){
		if (dir == down) return right;
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	08 95       	ret
		if (dir == left) return down;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	08 95       	ret
		if (dir == right) return up;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	08 95       	ret
		if (dir == down) return left;
		if (dir == left) return up;
		if (dir == right) return down;
	}
	else{
		return none;
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	08 95       	ret
		if (dir == down) return right;
		if (dir == left) return down;
		if (dir == right) return up;
	}
	else if (lastDirection == right){
		if (dir == down) return left;
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	08 95       	ret
		if (dir == left) return up;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret
		if (dir == right) return down;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return none;
	}
}
     7c4:	08 95       	ret

000007c6 <addNode>:

void addNode(bool openLeft, bool openRight, bool openFront, bool isObject){
     7c6:	08 95       	ret

000007c8 <moveInLabyrinth>:
	}
}

// Updates the coordinates when moving forward or backwards
void moveInLabyrinth(bool forward){
	direction globalDir = lastDirection;
     7c8:	90 91 4d 01 	lds	r25, 0x014D
	if (!forward) globalDir = oppositeDirection(globalDir);
     7cc:	81 11       	cpse	r24, r1
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <moveInLabyrinth+0xe>
     7d0:	89 2f       	mov	r24, r25
     7d2:	a9 df       	rcall	.-174    	; 0x726 <oppositeDirection>
     7d4:	98 2f       	mov	r25, r24
	if (globalDir == up) currentY++;
     7d6:	91 11       	cpse	r25, r1
     7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <moveInLabyrinth+0x28>
     7da:	20 91 4f 01 	lds	r18, 0x014F
     7de:	30 91 50 01 	lds	r19, 0x0150
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	30 93 50 01 	sts	0x0150, r19
     7ea:	20 93 4f 01 	sts	0x014F, r18
     7ee:	18 c0       	rjmp	.+48     	; 0x820 <moveInLabyrinth+0x58>
	if (globalDir == down) currentY--;
     7f0:	91 30       	cpi	r25, 0x01	; 1
     7f2:	51 f4       	brne	.+20     	; 0x808 <moveInLabyrinth+0x40>
     7f4:	80 91 4f 01 	lds	r24, 0x014F
     7f8:	90 91 50 01 	lds	r25, 0x0150
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	90 93 50 01 	sts	0x0150, r25
     802:	80 93 4f 01 	sts	0x014F, r24
     806:	08 95       	ret
	if (globalDir == left) currentX--;
     808:	92 30       	cpi	r25, 0x02	; 2
     80a:	51 f4       	brne	.+20     	; 0x820 <moveInLabyrinth+0x58>
     80c:	80 91 1d 02 	lds	r24, 0x021D
     810:	90 91 1e 02 	lds	r25, 0x021E
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	90 93 1e 02 	sts	0x021E, r25
     81a:	80 93 1d 02 	sts	0x021D, r24
     81e:	08 95       	ret
	if (globalDir == right) currentX++;
     820:	93 30       	cpi	r25, 0x03	; 3
     822:	49 f4       	brne	.+18     	; 0x836 <moveInLabyrinth+0x6e>
     824:	80 91 1d 02 	lds	r24, 0x021D
     828:	90 91 1e 02 	lds	r25, 0x021E
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	90 93 1e 02 	sts	0x021E, r25
     832:	80 93 1d 02 	sts	0x021D, r24
     836:	08 95       	ret

00000838 <turnInLabyrinth>:
}

// Set the new "lastDirection" to the correct global direction. Used when turning.
void turnInLabyrinth(direction dir){
	lastDirection = getGlobalDirection(dir);
     838:	88 df       	rcall	.-240    	; 0x74a <getGlobalDirection>
     83a:	80 93 4d 01 	sts	0x014D, r24
     83e:	08 95       	ret

00000840 <getNodeTypeInDir>:
}

nodeType getNodeTypeInDir(int x, int y, direction dir){
	if (dir == up)
     840:	41 11       	cpse	r20, r1
     842:	1c c0       	rjmp	.+56     	; 0x87c <getNodeTypeInDir+0x3c>
	{
		if (y+1 > 9 || x < 0 || x > 18){
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	6a 30       	cpi	r22, 0x0A	; 10
     84a:	71 05       	cpc	r23, r1
     84c:	0c f0       	brlt	.+2      	; 0x850 <getNodeTypeInDir+0x10>
     84e:	67 c0       	rjmp	.+206    	; 0x91e <getNodeTypeInDir+0xde>
     850:	83 31       	cpi	r24, 0x13	; 19
     852:	91 05       	cpc	r25, r1
     854:	08 f0       	brcs	.+2      	; 0x858 <getNodeTypeInDir+0x18>
     856:	65 c0       	rjmp	.+202    	; 0x922 <getNodeTypeInDir+0xe2>
			return wall;
		}
		else{
			return labyrinth[x][y+1];
     858:	9c 01       	movw	r18, r24
     85a:	22 0f       	add	r18, r18
     85c:	33 1f       	adc	r19, r19
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	82 0f       	add	r24, r18
     86c:	93 1f       	adc	r25, r19
     86e:	68 0f       	add	r22, r24
     870:	79 1f       	adc	r23, r25
     872:	fb 01       	movw	r30, r22
     874:	ee 5a       	subi	r30, 0xAE	; 174
     876:	fd 4f       	sbci	r31, 0xFD	; 253
     878:	80 81       	ld	r24, Z
     87a:	08 95       	ret
		}
	}
	else if(dir == right){
     87c:	43 30       	cpi	r20, 0x03	; 3
     87e:	d9 f4       	brne	.+54     	; 0x8b6 <getNodeTypeInDir+0x76>
		
		if (x+1 > 18 || y < 0 || y > 8){
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	83 31       	cpi	r24, 0x13	; 19
     884:	91 05       	cpc	r25, r1
     886:	0c f0       	brlt	.+2      	; 0x88a <getNodeTypeInDir+0x4a>
     888:	4e c0       	rjmp	.+156    	; 0x926 <getNodeTypeInDir+0xe6>
     88a:	69 30       	cpi	r22, 0x09	; 9
     88c:	71 05       	cpc	r23, r1
     88e:	08 f0       	brcs	.+2      	; 0x892 <getNodeTypeInDir+0x52>
     890:	4c c0       	rjmp	.+152    	; 0x92a <getNodeTypeInDir+0xea>
			return wall;
		}
		else{
			return labyrinth[x+1][y];
     892:	fc 01       	movw	r30, r24
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	e8 0f       	add	r30, r24
     8a6:	f9 1f       	adc	r31, r25
     8a8:	6e 0f       	add	r22, r30
     8aa:	7f 1f       	adc	r23, r31
     8ac:	fb 01       	movw	r30, r22
     8ae:	ee 5a       	subi	r30, 0xAE	; 174
     8b0:	fd 4f       	sbci	r31, 0xFD	; 253
     8b2:	80 81       	ld	r24, Z
     8b4:	08 95       	ret
		}
	}
	else if(dir == left){
     8b6:	42 30       	cpi	r20, 0x02	; 2
     8b8:	b9 f4       	brne	.+46     	; 0x8e8 <getNodeTypeInDir+0xa8>
		if (x-1 < 0 || y < 0 || y > 8){
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	c2 f1       	brmi	.+112    	; 0x92e <getNodeTypeInDir+0xee>
     8be:	69 30       	cpi	r22, 0x09	; 9
     8c0:	71 05       	cpc	r23, r1
     8c2:	b8 f5       	brcc	.+110    	; 0x932 <getNodeTypeInDir+0xf2>
			return wall;
		}
		else{
			return labyrinth[x-1][y];
     8c4:	fc 01       	movw	r30, r24
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	e8 0f       	add	r30, r24
     8d8:	f9 1f       	adc	r31, r25
     8da:	6e 0f       	add	r22, r30
     8dc:	7f 1f       	adc	r23, r31
     8de:	fb 01       	movw	r30, r22
     8e0:	ee 5a       	subi	r30, 0xAE	; 174
     8e2:	fd 4f       	sbci	r31, 0xFD	; 253
     8e4:	80 81       	ld	r24, Z
     8e6:	08 95       	ret
		}			
	}
	else if (dir == down)
     8e8:	41 30       	cpi	r20, 0x01	; 1
     8ea:	c1 f4       	brne	.+48     	; 0x91c <getNodeTypeInDir+0xdc>
	{
		if (y-1 < 0 || x < 0 || x > 18){
     8ec:	61 50       	subi	r22, 0x01	; 1
     8ee:	71 09       	sbc	r23, r1
     8f0:	12 f1       	brmi	.+68     	; 0x936 <getNodeTypeInDir+0xf6>
     8f2:	83 31       	cpi	r24, 0x13	; 19
     8f4:	91 05       	cpc	r25, r1
     8f6:	08 f5       	brcc	.+66     	; 0x93a <getNodeTypeInDir+0xfa>
			return wall;
		}
		else{
			return labyrinth[x][y-1];
     8f8:	9c 01       	movw	r18, r24
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	82 0f       	add	r24, r18
     90c:	93 1f       	adc	r25, r19
     90e:	68 0f       	add	r22, r24
     910:	79 1f       	adc	r23, r25
     912:	fb 01       	movw	r30, r22
     914:	ee 5a       	subi	r30, 0xAE	; 174
     916:	fd 4f       	sbci	r31, 0xFD	; 253
     918:	80 81       	ld	r24, Z
     91a:	08 95       	ret
     91c:	08 95       	ret

nodeType getNodeTypeInDir(int x, int y, direction dir){
	if (dir == up)
	{
		if (y+1 > 9 || x < 0 || x > 18){
			return wall;
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	08 95       	ret
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	08 95       	ret
		}
	}
	else if(dir == right){
		
		if (x+1 > 18 || y < 0 || y > 8){
			return wall;
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	08 95       	ret
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	08 95       	ret
			return labyrinth[x+1][y];
		}
	}
	else if(dir == left){
		if (x-1 < 0 || y < 0 || y > 8){
			return wall;
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	08 95       	ret
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	08 95       	ret
		}			
	}
	else if (dir == down)
	{
		if (y-1 < 0 || x < 0 || x > 18){
			return wall;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	80 e0       	ldi	r24, 0x00	; 0
		}
		else{
			return labyrinth[x][y-1];
		}
	}
}
     93c:	08 95       	ret

0000093e <isCrossing>:
			}
		}
	}
}

bool isCrossing(int x, int y){
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	fc 01       	movw	r30, r24
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	02 96       	adiw	r24, 0x02	; 2
	int amount = 0;
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	eb 01       	movw	r28, r22
     952:	21 97       	sbiw	r28, 0x01	; 1
     954:	6e 5f       	subi	r22, 0xFE	; 254
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	19 c0       	rjmp	.+50     	; 0x98c <isCrossing+0x4e>
	for (int i = -1; i < 2; i++)
	{
		for (int j = -1; j < 2; j++)
		{
			if (x+i > 18 || x+i < 0) continue;
     95a:	e3 31       	cpi	r30, 0x13	; 19
     95c:	f1 05       	cpc	r31, r1
     95e:	68 f4       	brcc	.+26     	; 0x97a <isCrossing+0x3c>
			if (y+j > 9 || y+j < 0) continue;
     960:	2a 30       	cpi	r18, 0x0A	; 10
     962:	31 05       	cpc	r19, r1
     964:	50 f4       	brcc	.+20     	; 0x97a <isCrossing+0x3c>
			if (labyrinth[x+i][y+j] != wall){
     966:	da 01       	movw	r26, r20
     968:	a2 0f       	add	r26, r18
     96a:	b3 1f       	adc	r27, r19
     96c:	ae 5a       	subi	r26, 0xAE	; 174
     96e:	bd 4f       	sbci	r27, 0xFD	; 253
     970:	ac 91       	ld	r26, X
     972:	aa 23       	and	r26, r26
     974:	11 f0       	breq	.+4      	; 0x97a <isCrossing+0x3c>
				amount++;
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255

bool isCrossing(int x, int y){
	int amount = 0;
	for (int i = -1; i < 2; i++)
	{
		for (int j = -1; j < 2; j++)
     97e:	26 17       	cp	r18, r22
     980:	37 07       	cpc	r19, r23
     982:	59 f7       	brne	.-42     	; 0x95a <isCrossing+0x1c>
     984:	31 96       	adiw	r30, 0x01	; 1
	}
}

bool isCrossing(int x, int y){
	int amount = 0;
	for (int i = -1; i < 2; i++)
     986:	e8 17       	cp	r30, r24
     988:	f9 07       	cpc	r31, r25
     98a:	71 f0       	breq	.+28     	; 0x9a8 <isCrossing+0x6a>
     98c:	9e 01       	movw	r18, r28
	{
		for (int j = -1; j < 2; j++)
		{
			if (x+i > 18 || x+i < 0) continue;
     98e:	af 01       	movw	r20, r30
			if (y+j > 9 || y+j < 0) continue;
			if (labyrinth[x+i][y+j] != wall){
     990:	df 01       	movw	r26, r30
     992:	aa 0f       	add	r26, r26
     994:	bb 1f       	adc	r27, r27
     996:	44 0f       	add	r20, r20
     998:	55 1f       	adc	r21, r21
     99a:	44 0f       	add	r20, r20
     99c:	55 1f       	adc	r21, r21
     99e:	44 0f       	add	r20, r20
     9a0:	55 1f       	adc	r21, r21
     9a2:	4a 0f       	add	r20, r26
     9a4:	5b 1f       	adc	r21, r27
     9a6:	d9 cf       	rjmp	.-78     	; 0x95a <isCrossing+0x1c>
				amount++;
			}
		}		
	}
	return amount > 2;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	03 30       	cpi	r16, 0x03	; 3
     9ac:	11 05       	cpc	r17, r1
     9ae:	0c f4       	brge	.+2      	; 0x9b2 <isCrossing+0x74>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
	
	
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	08 95       	ret

000009bc <transformToDirectionList>:
		}
			
	}
}

void transformToDirectionList(){
     9bc:	7f 92       	push	r7
     9be:	8f 92       	push	r8
     9c0:	9f 92       	push	r9
     9c2:	af 92       	push	r10
     9c4:	bf 92       	push	r11
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
	int dirLength = 0;
	for (int i = 0; i < bestPathLength-1; i++)
     9d6:	c0 e0       	ldi	r28, 0x00	; 0
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
			
	}
}

void transformToDirectionList(){
	int dirLength = 0;
     9da:	e1 2c       	mov	r14, r1
     9dc:	f1 2c       	mov	r15, r1
			if (dirLength == 0){
				bestDirectionPath[dirLength] = left;
				dirLength++;				
			}
			if (bestDirectionPath[dirLength-1] != left || isCrossing(bestPath[i][0],bestPath[i][1])){
				bestDirectionPath[dirLength] = left;
     9de:	68 94       	set
     9e0:	77 24       	eor	r7, r7
     9e2:	71 f8       	bld	r7, 1
			}
		
		}
		else if (bestPath[i][0] == bestPath[i+1][0] +1 && bestPath[i][1] == bestPath[i+1][1]){
			if (dirLength == 0){
				bestDirectionPath[dirLength] = left;
     9e4:	0f 2e       	mov	r0, r31
     9e6:	ff e1       	ldi	r31, 0x1F	; 31
     9e8:	cf 2e       	mov	r12, r31
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	df 2e       	mov	r13, r31
     9ee:	f0 2d       	mov	r31, r0
				dirLength++;				
     9f0:	99 24       	eor	r9, r9
     9f2:	93 94       	inc	r9
     9f4:	a1 2c       	mov	r10, r1
			if (dirLength == 0){
				bestDirectionPath[dirLength] = right;
				dirLength++;
			}
			if (bestDirectionPath[dirLength-1] != right || isCrossing(bestPath[i][0],bestPath[i][1])){
				bestDirectionPath[dirLength] = right;
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f3 e0       	ldi	r31, 0x03	; 3
     9fa:	8f 2e       	mov	r8, r31
     9fc:	f0 2d       	mov	r31, r0
			if (dirLength == 0){
				bestDirectionPath[dirLength] = down;
				dirLength++;		
			}
			if (bestDirectionPath[dirLength-1] != down || isCrossing(bestPath[i][0],bestPath[i][1])){
				bestDirectionPath[dirLength] = down;
     9fe:	bb 24       	eor	r11, r11
     a00:	b3 94       	inc	r11
	}
}

void transformToDirectionList(){
	int dirLength = 0;
	for (int i = 0; i < bestPathLength-1; i++)
     a02:	58 c1       	rjmp	.+688    	; 0xcb4 <transformToDirectionList+0x2f8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a04:	23 ec       	ldi	r18, 0xC3	; 195
     a06:	8f e7       	ldi	r24, 0x7F	; 127
     a08:	96 e1       	ldi	r25, 0x16	; 22
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	80 40       	sbci	r24, 0x00	; 0
     a0e:	90 40       	sbci	r25, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <transformToDirectionList+0x4e>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <transformToDirectionList+0x58>
     a14:	00 00       	nop
	{
			_delay_ms(500);
			grab_object(200);
     a16:	88 ec       	ldi	r24, 0xC8	; 200
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	f6 dc       	rcall	.-1556   	; 0x408 <grab_object>
     a1c:	e7 ee       	ldi	r30, 0xE7	; 231
     a1e:	ff ef       	ldi	r31, 0xFF	; 255
     a20:	28 e0       	ldi	r18, 0x08	; 8
     a22:	e1 50       	subi	r30, 0x01	; 1
     a24:	f0 40       	sbci	r31, 0x00	; 0
     a26:	20 40       	sbci	r18, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <transformToDirectionList+0x66>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <transformToDirectionList+0x70>
     a2c:	00 00       	nop
			_delay_ms(200);
			grab_object(400);
     a2e:	80 e9       	ldi	r24, 0x90	; 144
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	ea dc       	rcall	.-1580   	; 0x408 <grab_object>
     a34:	87 ee       	ldi	r24, 0xE7	; 231
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	e8 e0       	ldi	r30, 0x08	; 8
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	e0 40       	sbci	r30, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <transformToDirectionList+0x7e>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <transformToDirectionList+0x88>
     a44:	00 00       	nop
			_delay_ms(200);
		//_delay_ms(1000);
		if (bestPath[i][0] == bestPath[i+1][0] && bestPath[i][1] == bestPath[i+1][1] - 1){
     a46:	fe 01       	movw	r30, r28
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	eb 5a       	subi	r30, 0xAB	; 171
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	20 81       	ld	r18, Z
     a56:	31 81       	ldd	r19, Z+1	; 0x01
     a58:	8e 01       	movw	r16, r28
     a5a:	0f 5f       	subi	r16, 0xFF	; 255
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
     a5e:	f8 01       	movw	r30, r16
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	eb 5a       	subi	r30, 0xAB	; 171
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	28 17       	cp	r18, r24
     a72:	39 07       	cpc	r19, r25
     a74:	b1 f5       	brne	.+108    	; 0xae2 <transformToDirectionList+0x126>
     a76:	fe 01       	movw	r30, r28
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	eb 5a       	subi	r30, 0xAB	; 171
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	22 81       	ldd	r18, Z+2	; 0x02
     a86:	33 81       	ldd	r19, Z+3	; 0x03
     a88:	f8 01       	movw	r30, r16
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	eb 5a       	subi	r30, 0xAB	; 171
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	93 81       	ldd	r25, Z+3	; 0x03
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	28 17       	cp	r18, r24
     a9e:	39 07       	cpc	r19, r25
     aa0:	01 f5       	brne	.+64     	; 0xae2 <transformToDirectionList+0x126>
			if (dirLength == 0){
     aa2:	e1 14       	cp	r14, r1
     aa4:	f1 04       	cpc	r15, r1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <transformToDirectionList+0xee>
     aa8:	04 c1       	rjmp	.+520    	; 0xcb2 <transformToDirectionList+0x2f6>
			}
			else if (bestDirectionPath[dirLength-1] != up || isCrossing(bestPath[i][0],bestPath[i][1])){
     aaa:	f7 01       	movw	r30, r14
     aac:	e2 5e       	subi	r30, 0xE2	; 226
     aae:	fd 4f       	sbci	r31, 0xFD	; 253
     ab0:	80 81       	ld	r24, Z
     ab2:	81 11       	cpse	r24, r1
     ab4:	0e c0       	rjmp	.+28     	; 0xad2 <transformToDirectionList+0x116>
     ab6:	cc 0f       	add	r28, r28
     ab8:	dd 1f       	adc	r29, r29
     aba:	cc 0f       	add	r28, r28
     abc:	dd 1f       	adc	r29, r29
     abe:	cb 5a       	subi	r28, 0xAB	; 171
     ac0:	de 4f       	sbci	r29, 0xFE	; 254
     ac2:	6a 81       	ldd	r22, Y+2	; 0x02
     ac4:	7b 81       	ldd	r23, Y+3	; 0x03
     ac6:	88 81       	ld	r24, Y
     ac8:	99 81       	ldd	r25, Y+1	; 0x01
     aca:	39 df       	rcall	.-398    	; 0x93e <isCrossing>
     acc:	88 23       	and	r24, r24
     ace:	09 f4       	brne	.+2      	; 0xad2 <transformToDirectionList+0x116>
     ad0:	f0 c0       	rjmp	.+480    	; 0xcb2 <transformToDirectionList+0x2f6>
				bestDirectionPath[dirLength] = up;
     ad2:	f7 01       	movw	r30, r14
     ad4:	e1 5e       	subi	r30, 0xE1	; 225
     ad6:	fd 4f       	sbci	r31, 0xFD	; 253
     ad8:	10 82       	st	Z, r1
				dirLength++;
     ada:	ff ef       	ldi	r31, 0xFF	; 255
     adc:	ef 1a       	sub	r14, r31
     ade:	ff 0a       	sbc	r15, r31
     ae0:	e8 c0       	rjmp	.+464    	; 0xcb2 <transformToDirectionList+0x2f6>
			}
		}
		else if (bestPath[i][0] == bestPath[i+1][0] && bestPath[i][1] == bestPath[i+1][1] + 1) {
     ae2:	fe 01       	movw	r30, r28
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	eb 5a       	subi	r30, 0xAB	; 171
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	20 81       	ld	r18, Z
     af2:	31 81       	ldd	r19, Z+1	; 0x01
     af4:	f8 01       	movw	r30, r16
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	eb 5a       	subi	r30, 0xAB	; 171
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	28 17       	cp	r18, r24
     b08:	39 07       	cpc	r19, r25
     b0a:	c9 f5       	brne	.+114    	; 0xb7e <transformToDirectionList+0x1c2>
     b0c:	fe 01       	movw	r30, r28
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	eb 5a       	subi	r30, 0xAB	; 171
     b18:	fe 4f       	sbci	r31, 0xFE	; 254
     b1a:	22 81       	ldd	r18, Z+2	; 0x02
     b1c:	33 81       	ldd	r19, Z+3	; 0x03
     b1e:	f8 01       	movw	r30, r16
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	eb 5a       	subi	r30, 0xAB	; 171
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	82 81       	ldd	r24, Z+2	; 0x02
     b2e:	93 81       	ldd	r25, Z+3	; 0x03
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	28 17       	cp	r18, r24
     b34:	39 07       	cpc	r19, r25
     b36:	19 f5       	brne	.+70     	; 0xb7e <transformToDirectionList+0x1c2>
			if (dirLength == 0){
     b38:	e1 14       	cp	r14, r1
     b3a:	f1 04       	cpc	r15, r1
     b3c:	21 f4       	brne	.+8      	; 0xb46 <transformToDirectionList+0x18a>
				bestDirectionPath[dirLength] = down;
     b3e:	f6 01       	movw	r30, r12
     b40:	b0 82       	st	Z, r11
				dirLength++;		
     b42:	e9 2c       	mov	r14, r9
     b44:	fa 2c       	mov	r15, r10
			}
			if (bestDirectionPath[dirLength-1] != down || isCrossing(bestPath[i][0],bestPath[i][1])){
     b46:	f7 01       	movw	r30, r14
     b48:	e2 5e       	subi	r30, 0xE2	; 226
     b4a:	fd 4f       	sbci	r31, 0xFD	; 253
     b4c:	80 81       	ld	r24, Z
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	71 f4       	brne	.+28     	; 0xb6e <transformToDirectionList+0x1b2>
     b52:	cc 0f       	add	r28, r28
     b54:	dd 1f       	adc	r29, r29
     b56:	cc 0f       	add	r28, r28
     b58:	dd 1f       	adc	r29, r29
     b5a:	cb 5a       	subi	r28, 0xAB	; 171
     b5c:	de 4f       	sbci	r29, 0xFE	; 254
     b5e:	6a 81       	ldd	r22, Y+2	; 0x02
     b60:	7b 81       	ldd	r23, Y+3	; 0x03
     b62:	88 81       	ld	r24, Y
     b64:	99 81       	ldd	r25, Y+1	; 0x01
     b66:	eb de       	rcall	.-554    	; 0x93e <isCrossing>
     b68:	88 23       	and	r24, r24
     b6a:	09 f4       	brne	.+2      	; 0xb6e <transformToDirectionList+0x1b2>
     b6c:	a2 c0       	rjmp	.+324    	; 0xcb2 <transformToDirectionList+0x2f6>
				bestDirectionPath[dirLength] = down;
     b6e:	f7 01       	movw	r30, r14
     b70:	e1 5e       	subi	r30, 0xE1	; 225
     b72:	fd 4f       	sbci	r31, 0xFD	; 253
     b74:	b0 82       	st	Z, r11
				dirLength++;
     b76:	ff ef       	ldi	r31, 0xFF	; 255
     b78:	ef 1a       	sub	r14, r31
     b7a:	ff 0a       	sbc	r15, r31
     b7c:	9a c0       	rjmp	.+308    	; 0xcb2 <transformToDirectionList+0x2f6>
			}
		
		}
		else if (bestPath[i][0] == bestPath[i+1][0] -1 && bestPath[i][1] == bestPath[i+1][1]){
     b7e:	fe 01       	movw	r30, r28
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	eb 5a       	subi	r30, 0xAB	; 171
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	20 81       	ld	r18, Z
     b8e:	31 81       	ldd	r19, Z+1	; 0x01
     b90:	f8 01       	movw	r30, r16
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	eb 5a       	subi	r30, 0xAB	; 171
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	28 17       	cp	r18, r24
     ba6:	39 07       	cpc	r19, r25
     ba8:	c1 f5       	brne	.+112    	; 0xc1a <transformToDirectionList+0x25e>
     baa:	fe 01       	movw	r30, r28
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	eb 5a       	subi	r30, 0xAB	; 171
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	22 81       	ldd	r18, Z+2	; 0x02
     bba:	33 81       	ldd	r19, Z+3	; 0x03
     bbc:	f8 01       	movw	r30, r16
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	eb 5a       	subi	r30, 0xAB	; 171
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	19 f5       	brne	.+70     	; 0xc1a <transformToDirectionList+0x25e>
			if (dirLength == 0){
     bd4:	e1 14       	cp	r14, r1
     bd6:	f1 04       	cpc	r15, r1
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <transformToDirectionList+0x226>
				bestDirectionPath[dirLength] = right;
     bda:	f6 01       	movw	r30, r12
     bdc:	80 82       	st	Z, r8
				dirLength++;
     bde:	e9 2c       	mov	r14, r9
     be0:	fa 2c       	mov	r15, r10
			}
			if (bestDirectionPath[dirLength-1] != right || isCrossing(bestPath[i][0],bestPath[i][1])){
     be2:	f7 01       	movw	r30, r14
     be4:	e2 5e       	subi	r30, 0xE2	; 226
     be6:	fd 4f       	sbci	r31, 0xFD	; 253
     be8:	80 81       	ld	r24, Z
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	71 f4       	brne	.+28     	; 0xc0a <transformToDirectionList+0x24e>
     bee:	cc 0f       	add	r28, r28
     bf0:	dd 1f       	adc	r29, r29
     bf2:	cc 0f       	add	r28, r28
     bf4:	dd 1f       	adc	r29, r29
     bf6:	cb 5a       	subi	r28, 0xAB	; 171
     bf8:	de 4f       	sbci	r29, 0xFE	; 254
     bfa:	6a 81       	ldd	r22, Y+2	; 0x02
     bfc:	7b 81       	ldd	r23, Y+3	; 0x03
     bfe:	88 81       	ld	r24, Y
     c00:	99 81       	ldd	r25, Y+1	; 0x01
     c02:	9d de       	rcall	.-710    	; 0x93e <isCrossing>
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <transformToDirectionList+0x24e>
     c08:	54 c0       	rjmp	.+168    	; 0xcb2 <transformToDirectionList+0x2f6>
				bestDirectionPath[dirLength] = right;
     c0a:	f7 01       	movw	r30, r14
     c0c:	e1 5e       	subi	r30, 0xE1	; 225
     c0e:	fd 4f       	sbci	r31, 0xFD	; 253
     c10:	80 82       	st	Z, r8
				dirLength++;
     c12:	ff ef       	ldi	r31, 0xFF	; 255
     c14:	ef 1a       	sub	r14, r31
     c16:	ff 0a       	sbc	r15, r31
     c18:	4c c0       	rjmp	.+152    	; 0xcb2 <transformToDirectionList+0x2f6>
			}
		
		}
		else if (bestPath[i][0] == bestPath[i+1][0] +1 && bestPath[i][1] == bestPath[i+1][1]){
     c1a:	fe 01       	movw	r30, r28
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	eb 5a       	subi	r30, 0xAB	; 171
     c26:	fe 4f       	sbci	r31, 0xFE	; 254
     c28:	20 81       	ld	r18, Z
     c2a:	31 81       	ldd	r19, Z+1	; 0x01
     c2c:	f8 01       	movw	r30, r16
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	eb 5a       	subi	r30, 0xAB	; 171
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	b1 f5       	brne	.+108    	; 0xcb2 <transformToDirectionList+0x2f6>
     c46:	fe 01       	movw	r30, r28
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	eb 5a       	subi	r30, 0xAB	; 171
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	22 81       	ldd	r18, Z+2	; 0x02
     c56:	33 81       	ldd	r19, Z+3	; 0x03
     c58:	f8 01       	movw	r30, r16
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	eb 5a       	subi	r30, 0xAB	; 171
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	09 f5       	brne	.+66     	; 0xcb2 <transformToDirectionList+0x2f6>
			if (dirLength == 0){
     c70:	e1 14       	cp	r14, r1
     c72:	f1 04       	cpc	r15, r1
     c74:	21 f4       	brne	.+8      	; 0xc7e <transformToDirectionList+0x2c2>
				bestDirectionPath[dirLength] = left;
     c76:	f6 01       	movw	r30, r12
     c78:	70 82       	st	Z, r7
				dirLength++;				
     c7a:	e9 2c       	mov	r14, r9
     c7c:	fa 2c       	mov	r15, r10
			}
			if (bestDirectionPath[dirLength-1] != left || isCrossing(bestPath[i][0],bestPath[i][1])){
     c7e:	f7 01       	movw	r30, r14
     c80:	e2 5e       	subi	r30, 0xE2	; 226
     c82:	fd 4f       	sbci	r31, 0xFD	; 253
     c84:	80 81       	ld	r24, Z
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	69 f4       	brne	.+26     	; 0xca4 <transformToDirectionList+0x2e8>
     c8a:	cc 0f       	add	r28, r28
     c8c:	dd 1f       	adc	r29, r29
     c8e:	cc 0f       	add	r28, r28
     c90:	dd 1f       	adc	r29, r29
     c92:	cb 5a       	subi	r28, 0xAB	; 171
     c94:	de 4f       	sbci	r29, 0xFE	; 254
     c96:	6a 81       	ldd	r22, Y+2	; 0x02
     c98:	7b 81       	ldd	r23, Y+3	; 0x03
     c9a:	88 81       	ld	r24, Y
     c9c:	99 81       	ldd	r25, Y+1	; 0x01
     c9e:	4f de       	rcall	.-866    	; 0x93e <isCrossing>
     ca0:	88 23       	and	r24, r24
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <transformToDirectionList+0x2f6>
				bestDirectionPath[dirLength] = left;
     ca4:	f7 01       	movw	r30, r14
     ca6:	e1 5e       	subi	r30, 0xE1	; 225
     ca8:	fd 4f       	sbci	r31, 0xFD	; 253
     caa:	70 82       	st	Z, r7
				dirLength++;
     cac:	ff ef       	ldi	r31, 0xFF	; 255
     cae:	ef 1a       	sub	r14, r31
     cb0:	ff 0a       	sbc	r15, r31
		
		}
		else if (bestPath[i][0] == bestPath[i+1][0] +1 && bestPath[i][1] == bestPath[i+1][1]){
			if (dirLength == 0){
				bestDirectionPath[dirLength] = left;
				dirLength++;				
     cb2:	e8 01       	movw	r28, r16
	}
}

void transformToDirectionList(){
	int dirLength = 0;
	for (int i = 0; i < bestPathLength-1; i++)
     cb4:	80 91 51 01 	lds	r24, 0x0151
     cb8:	90 91 52 01 	lds	r25, 0x0152
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	c8 17       	cp	r28, r24
     cc0:	d9 07       	cpc	r29, r25
     cc2:	0c f4       	brge	.+2      	; 0xcc6 <transformToDirectionList+0x30a>
     cc4:	9f ce       	rjmp	.-706    	; 0xa04 <transformToDirectionList+0x48>
				bestDirectionPath[dirLength] = left;
				dirLength++;
			}
		}
	}
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	bf 90       	pop	r11
     cd8:	af 90       	pop	r10
     cda:	9f 90       	pop	r9
     cdc:	8f 90       	pop	r8
     cde:	7f 90       	pop	r7
     ce0:	08 95       	ret

00000ce2 <getNewX>:
	
	
}

int getNewX(int x, int dir){
	if(dir == left){
     ce2:	62 30       	cpi	r22, 0x02	; 2
     ce4:	71 05       	cpc	r23, r1
     ce6:	11 f4       	brne	.+4      	; 0xcec <getNewX+0xa>
		return x-1;
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	08 95       	ret
	}
	else if(dir == right){
     cec:	63 30       	cpi	r22, 0x03	; 3
     cee:	71 05       	cpc	r23, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <getNewX+0x12>
		return x+1;
     cf2:	01 96       	adiw	r24, 0x01	; 1
	}
	else{
		return x;
	}
}
     cf4:	08 95       	ret

00000cf6 <getNewY>:

int getNewY(int y, int dir){
	if(dir == down){
     cf6:	61 30       	cpi	r22, 0x01	; 1
     cf8:	71 05       	cpc	r23, r1
     cfa:	11 f4       	brne	.+4      	; 0xd00 <getNewY+0xa>
		return y-1;
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	08 95       	ret
	}
	else if(dir == up){
     d00:	67 2b       	or	r22, r23
     d02:	09 f4       	brne	.+2      	; 0xd06 <getNewY+0x10>
		return y+1;
     d04:	01 96       	adiw	r24, 0x01	; 1
	}
	else{
		return y;
	}
}
     d06:	08 95       	ret

00000d08 <findBestPath>:
		}
	}
}


void findBestPath(nodeType type){
     d08:	2f 92       	push	r2
     d0a:	3f 92       	push	r3
     d0c:	4f 92       	push	r4
     d0e:	5f 92       	push	r5
     d10:	6f 92       	push	r6
     d12:	7f 92       	push	r7
     d14:	8f 92       	push	r8
     d16:	9f 92       	push	r9
     d18:	af 92       	push	r10
     d1a:	bf 92       	push	r11
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	c7 5f       	subi	r28, 0xF7	; 247
     d32:	de 44       	sbci	r29, 0x4E	; 78
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	c9 50       	subi	r28, 0x09	; 9
     d40:	d1 4b       	sbci	r29, 0xB1	; 177
     d42:	88 83       	st	Y, r24
     d44:	c7 5f       	subi	r28, 0xF7	; 247
     d46:	de 44       	sbci	r29, 0x4E	; 78
	int paths [100][50][2];
	int pathLengths[100] = {0};
     d48:	fe 01       	movw	r30, r28
     d4a:	ef 5d       	subi	r30, 0xDF	; 223
     d4c:	f1 4b       	sbci	r31, 0xB1	; 177
     d4e:	88 ec       	ldi	r24, 0xC8	; 200
     d50:	df 01       	movw	r26, r30
     d52:	1d 92       	st	X+, r1
     d54:	8a 95       	dec	r24
     d56:	e9 f7       	brne	.-6      	; 0xd52 <findBestPath+0x4a>
	int arrayLength = 0;
	currentX = 9;
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 1e 02 	sts	0x021E, r25
     d60:	80 93 1d 02 	sts	0x021D, r24
	currentY = 2;
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	90 93 50 01 	sts	0x0150, r25
     d6c:	80 93 4f 01 	sts	0x014F, r24
	
	for (int dir = 0; dir < 4; dir++)
     d70:	00 e0       	ldi	r16, 0x00	; 0
     d72:	10 e0       	ldi	r17, 0x00	; 0


void findBestPath(nodeType type){
	int paths [100][50][2];
	int pathLengths[100] = {0};
	int arrayLength = 0;
     d74:	41 2c       	mov	r4, r1
     d76:	51 2c       	mov	r5, r1
	currentY = 2;
	
	for (int dir = 0; dir < 4; dir++)
	{
		if((getNodeTypeInDir(currentX, currentY, dir) == start)){	// && (getNodeTypeInDir(currentX,currentY,dir) != unexplored)){
			pathLengths[arrayLength] = 1;
     d78:	ee 24       	eor	r14, r14
     d7a:	e3 94       	inc	r14
     d7c:	f1 2c       	mov	r15, r1
			paths[arrayLength][0][0] = getNewX(currentX, dir);
     d7e:	0f 2e       	mov	r0, r31
     d80:	f8 ec       	ldi	r31, 0xC8	; 200
     d82:	bf 2e       	mov	r11, r31
     d84:	f0 2d       	mov	r31, r0
	currentX = 9;
	currentY = 2;
	
	for (int dir = 0; dir < 4; dir++)
	{
		if((getNodeTypeInDir(currentX, currentY, dir) == start)){	// && (getNodeTypeInDir(currentX,currentY,dir) != unexplored)){
     d86:	60 91 4f 01 	lds	r22, 0x014F
     d8a:	70 91 50 01 	lds	r23, 0x0150
     d8e:	80 91 1d 02 	lds	r24, 0x021D
     d92:	90 91 1e 02 	lds	r25, 0x021E
     d96:	40 2f       	mov	r20, r16
     d98:	53 dd       	rcall	.-1370   	; 0x840 <getNodeTypeInDir>
     d9a:	83 30       	cpi	r24, 0x03	; 3
     d9c:	69 f5       	brne	.+90     	; 0xdf8 <findBestPath+0xf0>
			pathLengths[arrayLength] = 1;
     d9e:	f2 01       	movw	r30, r4
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	21 e2       	ldi	r18, 0x21	; 33
     da6:	3e e4       	ldi	r19, 0x4E	; 78
     da8:	2c 0f       	add	r18, r28
     daa:	3d 1f       	adc	r19, r29
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	f1 82       	std	Z+1, r15	; 0x01
     db2:	e0 82       	st	Z, r14
			paths[arrayLength][0][0] = getNewX(currentX, dir);
     db4:	80 91 1d 02 	lds	r24, 0x021D
     db8:	90 91 1e 02 	lds	r25, 0x021E
     dbc:	b8 01       	movw	r22, r16
     dbe:	91 df       	rcall	.-222    	; 0xce2 <getNewX>
     dc0:	b4 9c       	mul	r11, r4
     dc2:	60 01       	movw	r12, r0
     dc4:	b5 9c       	mul	r11, r5
     dc6:	d0 0c       	add	r13, r0
     dc8:	11 24       	eor	r1, r1
     dca:	a1 e0       	ldi	r26, 0x01	; 1
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ac 0f       	add	r26, r28
     dd0:	bd 1f       	adc	r27, r29
     dd2:	ca 0e       	add	r12, r26
     dd4:	db 1e       	adc	r13, r27
     dd6:	f6 01       	movw	r30, r12
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
			paths[arrayLength][0][1] = getNewY(currentY, dir);
     ddc:	80 91 4f 01 	lds	r24, 0x014F
     de0:	90 91 50 01 	lds	r25, 0x0150
     de4:	b8 01       	movw	r22, r16
     de6:	87 df       	rcall	.-242    	; 0xcf6 <getNewY>
     de8:	d6 01       	movw	r26, r12
     dea:	13 96       	adiw	r26, 0x03	; 3
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
     df0:	12 97       	sbiw	r26, 0x02	; 2
			arrayLength++;
     df2:	bf ef       	ldi	r27, 0xFF	; 255
     df4:	4b 1a       	sub	r4, r27
     df6:	5b 0a       	sbc	r5, r27
	int pathLengths[100] = {0};
	int arrayLength = 0;
	currentX = 9;
	currentY = 2;
	
	for (int dir = 0; dir < 4; dir++)
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	04 30       	cpi	r16, 0x04	; 4
     dfe:	11 05       	cpc	r17, r1
     e00:	09 f0       	breq	.+2      	; 0xe04 <findBestPath+0xfc>
     e02:	c1 cf       	rjmp	.-126    	; 0xd86 <findBestPath+0x7e>
			paths[arrayLength][0][1] = getNewY(currentY, dir);
			arrayLength++;
		}
	}
	
	for (int p = 0; p < arrayLength; p++)
     e04:	14 14       	cp	r1, r4
     e06:	15 04       	cpc	r1, r5
     e08:	0c f0       	brlt	.+2      	; 0xe0c <findBestPath+0x104>
     e0a:	1b c2       	rjmp	.+1078   	; 0x1242 <findBestPath+0x53a>
	{
		if(labyrinth[paths[p][pathLengths[p]-1][0]][paths[p][pathLengths[p]-1][1]] == type){
     e0c:	cf 5d       	subi	r28, 0xDF	; 223
     e0e:	d1 4b       	sbci	r29, 0xB1	; 177
     e10:	68 81       	ld	r22, Y
     e12:	79 81       	ldd	r23, Y+1	; 0x01
     e14:	c1 52       	subi	r28, 0x21	; 33
     e16:	de 44       	sbci	r29, 0x4E	; 78
     e18:	8b 01       	movw	r16, r22
     e1a:	01 50       	subi	r16, 0x01	; 1
     e1c:	11 09       	sbc	r17, r1
     e1e:	d8 01       	movw	r26, r16
     e20:	aa 0f       	add	r26, r26
     e22:	bb 1f       	adc	r27, r27
     e24:	aa 0f       	add	r26, r26
     e26:	bb 1f       	adc	r27, r27
     e28:	e1 e0       	ldi	r30, 0x01	; 1
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	ec 0f       	add	r30, r28
     e2e:	fd 1f       	adc	r31, r29
     e30:	ae 0f       	add	r26, r30
     e32:	bf 1f       	adc	r27, r31
     e34:	8d 91       	ld	r24, X+
     e36:	9c 91       	ld	r25, X
     e38:	11 97       	sbiw	r26, 0x01	; 1
     e3a:	12 96       	adiw	r26, 0x02	; 2
     e3c:	0d 90       	ld	r0, X+
     e3e:	bc 91       	ld	r27, X
     e40:	a0 2d       	mov	r26, r0
     e42:	9c 01       	movw	r18, r24
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	8a 0f       	add	r24, r26
     e5a:	9b 1f       	adc	r25, r27
     e5c:	dc 01       	movw	r26, r24
     e5e:	ae 5a       	subi	r26, 0xAE	; 174
     e60:	bd 4f       	sbci	r27, 0xFD	; 253
     e62:	8c 91       	ld	r24, X
     e64:	c9 50       	subi	r28, 0x09	; 9
     e66:	d1 4b       	sbci	r29, 0xB1	; 177
     e68:	f8 81       	ld	r31, Y
     e6a:	c7 5f       	subi	r28, 0xF7	; 247
     e6c:	de 44       	sbci	r29, 0x4E	; 78
     e6e:	8f 17       	cp	r24, r31
     e70:	09 f4       	brne	.+2      	; 0xe74 <findBestPath+0x16c>
     e72:	ba c0       	rjmp	.+372    	; 0xfe8 <findBestPath+0x2e0>
     e74:	9e 01       	movw	r18, r28
     e76:	2d 5d       	subi	r18, 0xDD	; 221
     e78:	31 4b       	sbci	r19, 0xB1	; 177
     e7a:	c1 51       	subi	r28, 0x11	; 17
     e7c:	d1 4b       	sbci	r29, 0xB1	; 177
     e7e:	39 83       	std	Y+1, r19	; 0x01
     e80:	28 83       	st	Y, r18
     e82:	cf 5e       	subi	r28, 0xEF	; 239
     e84:	de 44       	sbci	r29, 0x4E	; 78
     e86:	ce 01       	movw	r24, r28
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	cf 50       	subi	r28, 0x0F	; 15
     e8c:	d1 4b       	sbci	r29, 0xB1	; 177
     e8e:	99 83       	std	Y+1, r25	; 0x01
     e90:	88 83       	st	Y, r24
     e92:	c1 5f       	subi	r28, 0xF1	; 241
     e94:	de 44       	sbci	r29, 0x4E	; 78
     e96:	cd 50       	subi	r28, 0x0D	; 13
     e98:	d1 4b       	sbci	r29, 0xB1	; 177
     e9a:	19 82       	std	Y+1, r1	; 0x01
     e9c:	18 82       	st	Y, r1
     e9e:	c3 5f       	subi	r28, 0xF3	; 243
     ea0:	de 44       	sbci	r29, 0x4E	; 78
     ea2:	21 2c       	mov	r2, r1
     ea4:	31 2c       	mov	r3, r1
     ea6:	62 c0       	rjmp	.+196    	; 0xf6c <findBestPath+0x264>
     ea8:	c7 51       	subi	r28, 0x17	; 23
     eaa:	d1 4b       	sbci	r29, 0xB1	; 177
     eac:	a8 81       	ld	r26, Y
     eae:	b9 81       	ldd	r27, Y+1	; 0x01
     eb0:	c9 5e       	subi	r28, 0xE9	; 233
     eb2:	de 44       	sbci	r29, 0x4E	; 78
     eb4:	6d 91       	ld	r22, X+
     eb6:	7c 91       	ld	r23, X
     eb8:	c1 51       	subi	r28, 0x11	; 17
     eba:	d1 4b       	sbci	r29, 0xB1	; 177
     ebc:	e8 81       	ld	r30, Y
     ebe:	f9 81       	ldd	r31, Y+1	; 0x01
     ec0:	cf 5e       	subi	r28, 0xEF	; 239
     ec2:	de 44       	sbci	r29, 0x4E	; 78
     ec4:	32 96       	adiw	r30, 0x02	; 2
     ec6:	c1 51       	subi	r28, 0x11	; 17
     ec8:	d1 4b       	sbci	r29, 0xB1	; 177
     eca:	f9 83       	std	Y+1, r31	; 0x01
     ecc:	e8 83       	st	Y, r30
     ece:	cf 5e       	subi	r28, 0xEF	; 239
     ed0:	de 44       	sbci	r29, 0x4E	; 78
     ed2:	8b 01       	movw	r16, r22
     ed4:	01 50       	subi	r16, 0x01	; 1
     ed6:	11 09       	sbc	r17, r1
     ed8:	22 e3       	ldi	r18, 0x32	; 50
     eda:	22 9d       	mul	r18, r2
     edc:	f0 01       	movw	r30, r0
     ede:	23 9d       	mul	r18, r3
     ee0:	f0 0d       	add	r31, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	e0 0f       	add	r30, r16
     ee6:	f1 1f       	adc	r31, r17
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	8c 0f       	add	r24, r28
     ef6:	9d 1f       	adc	r25, r29
     ef8:	e8 0f       	add	r30, r24
     efa:	f9 1f       	adc	r31, r25
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	22 81       	ldd	r18, Z+2	; 0x02
     f02:	33 81       	ldd	r19, Z+3	; 0x03
     f04:	ac 01       	movw	r20, r24
     f06:	44 0f       	add	r20, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	84 0f       	add	r24, r20
     f18:	95 1f       	adc	r25, r21
     f1a:	28 0f       	add	r18, r24
     f1c:	39 1f       	adc	r19, r25
     f1e:	f9 01       	movw	r30, r18
     f20:	ee 5a       	subi	r30, 0xAE	; 174
     f22:	fd 4f       	sbci	r31, 0xFD	; 253
     f24:	80 81       	ld	r24, Z
     f26:	cf 50       	subi	r28, 0x0F	; 15
     f28:	d1 4b       	sbci	r29, 0xB1	; 177
     f2a:	a8 81       	ld	r26, Y
     f2c:	b9 81       	ldd	r27, Y+1	; 0x01
     f2e:	c1 5f       	subi	r28, 0xF1	; 241
     f30:	de 44       	sbci	r29, 0x4E	; 78
     f32:	a8 53       	subi	r26, 0x38	; 56
     f34:	bf 4f       	sbci	r27, 0xFF	; 255
     f36:	cf 50       	subi	r28, 0x0F	; 15
     f38:	d1 4b       	sbci	r29, 0xB1	; 177
     f3a:	b9 83       	std	Y+1, r27	; 0x01
     f3c:	a8 83       	st	Y, r26
     f3e:	c1 5f       	subi	r28, 0xF1	; 241
     f40:	de 44       	sbci	r29, 0x4E	; 78
     f42:	cd 50       	subi	r28, 0x0D	; 13
     f44:	d1 4b       	sbci	r29, 0xB1	; 177
     f46:	e8 81       	ld	r30, Y
     f48:	f9 81       	ldd	r31, Y+1	; 0x01
     f4a:	c3 5f       	subi	r28, 0xF3	; 243
     f4c:	de 44       	sbci	r29, 0x4E	; 78
     f4e:	f2 96       	adiw	r30, 0x32	; 50
     f50:	cd 50       	subi	r28, 0x0D	; 13
     f52:	d1 4b       	sbci	r29, 0xB1	; 177
     f54:	f9 83       	std	Y+1, r31	; 0x01
     f56:	e8 83       	st	Y, r30
     f58:	c3 5f       	subi	r28, 0xF3	; 243
     f5a:	de 44       	sbci	r29, 0x4E	; 78
     f5c:	c9 50       	subi	r28, 0x09	; 9
     f5e:	d1 4b       	sbci	r29, 0xB1	; 177
     f60:	f8 81       	ld	r31, Y
     f62:	c7 5f       	subi	r28, 0xF7	; 247
     f64:	de 44       	sbci	r29, 0x4E	; 78
     f66:	8f 17       	cp	r24, r31
     f68:	09 f4       	brne	.+2      	; 0xf6c <findBestPath+0x264>
     f6a:	40 c0       	rjmp	.+128    	; 0xfec <findBestPath+0x2e4>
			//bestDirectionPath[0] = down;
			//bestDirectionPath[1] = down;
			//bestDirectionPath[2] = left;
			for (int i = 0; i < pathLengths[p]; i++)
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	c1 51       	subi	r28, 0x11	; 17
     f72:	d1 4b       	sbci	r29, 0xB1	; 177
     f74:	28 81       	ld	r18, Y
     f76:	cf 5e       	subi	r28, 0xEF	; 239
     f78:	de 44       	sbci	r29, 0x4E	; 78
     f7a:	c3 51       	subi	r28, 0x13	; 19
     f7c:	d1 4b       	sbci	r29, 0xB1	; 177
     f7e:	28 83       	st	Y, r18
     f80:	cd 5e       	subi	r28, 0xED	; 237
     f82:	de 44       	sbci	r29, 0x4E	; 78
     f84:	c0 51       	subi	r28, 0x10	; 16
     f86:	d1 4b       	sbci	r29, 0xB1	; 177
     f88:	38 81       	ld	r19, Y
     f8a:	c0 5f       	subi	r28, 0xF0	; 240
     f8c:	de 44       	sbci	r29, 0x4E	; 78
     f8e:	c2 51       	subi	r28, 0x12	; 18
     f90:	d1 4b       	sbci	r29, 0xB1	; 177
     f92:	38 83       	st	Y, r19
     f94:	ce 5e       	subi	r28, 0xEE	; 238
     f96:	de 44       	sbci	r29, 0x4E	; 78
     f98:	c1 51       	subi	r28, 0x11	; 17
     f9a:	d1 4b       	sbci	r29, 0xB1	; 177
     f9c:	88 81       	ld	r24, Y
     f9e:	99 81       	ldd	r25, Y+1	; 0x01
     fa0:	cf 5e       	subi	r28, 0xEF	; 239
     fa2:	de 44       	sbci	r29, 0x4E	; 78
     fa4:	02 97       	sbiw	r24, 0x02	; 2
     fa6:	c5 51       	subi	r28, 0x15	; 21
     fa8:	d1 4b       	sbci	r29, 0xB1	; 177
     faa:	99 83       	std	Y+1, r25	; 0x01
     fac:	88 83       	st	Y, r24
     fae:	cb 5e       	subi	r28, 0xEB	; 235
     fb0:	de 44       	sbci	r29, 0x4E	; 78
			transformToDirectionList();
			return;
		}  
		for (int dir = 0; dir < 4; dir++)
		{
			if(getNodeTypeInDir(paths[p][pathLengths[p]-1][0],paths[p][pathLengths[p]-1][1],dir) != wall && getNodeTypeInDir(paths[p][pathLengths[p]-1][0],paths[p][pathLengths[p]-1][1],dir) != unexplored){
     fb2:	92 e3       	ldi	r25, 0x32	; 50
     fb4:	92 9d       	mul	r25, r2
     fb6:	30 01       	movw	r6, r0
     fb8:	93 9d       	mul	r25, r3
     fba:	70 0c       	add	r7, r0
     fbc:	11 24       	eor	r1, r1
						getNewY(paths[p][pathLengths[p]-1][1],dir) == paths[p][pathLengths[p]-3][1]){
						continue;
					}
				}
							
				for (int i = 0; i < pathLengths[p]; i++)
     fbe:	cf 50       	subi	r28, 0x0F	; 15
     fc0:	d1 4b       	sbci	r29, 0xB1	; 177
     fc2:	a8 81       	ld	r26, Y
     fc4:	c1 5f       	subi	r28, 0xF1	; 241
     fc6:	de 44       	sbci	r29, 0x4E	; 78
     fc8:	cb 50       	subi	r28, 0x0B	; 11
     fca:	d1 4b       	sbci	r29, 0xB1	; 177
     fcc:	a8 83       	st	Y, r26
     fce:	c5 5f       	subi	r28, 0xF5	; 245
     fd0:	de 44       	sbci	r29, 0x4E	; 78
     fd2:	ce 50       	subi	r28, 0x0E	; 14
     fd4:	d1 4b       	sbci	r29, 0xB1	; 177
     fd6:	b8 81       	ld	r27, Y
     fd8:	c2 5f       	subi	r28, 0xF2	; 242
     fda:	de 44       	sbci	r29, 0x4E	; 78
     fdc:	ca 50       	subi	r28, 0x0A	; 10
     fde:	d1 4b       	sbci	r29, 0xB1	; 177
     fe0:	b8 83       	st	Y, r27
     fe2:	c6 5f       	subi	r28, 0xF6	; 246
     fe4:	de 44       	sbci	r29, 0x4E	; 78
     fe6:	31 c0       	rjmp	.+98     	; 0x104a <findBestPath+0x342>
		}
	}
	
	for (int p = 0; p < arrayLength; p++)
	{
		if(labyrinth[paths[p][pathLengths[p]-1][0]][paths[p][pathLengths[p]-1][1]] == type){
     fe8:	21 2c       	mov	r2, r1
     fea:	31 2c       	mov	r3, r1
			//bestDirectionPath[0] = down;
			//bestDirectionPath[1] = down;
			//bestDirectionPath[2] = left;
			for (int i = 0; i < pathLengths[p]; i++)
     fec:	16 16       	cp	r1, r22
     fee:	17 06       	cpc	r1, r23
     ff0:	34 f5       	brge	.+76     	; 0x103e <findBestPath+0x336>
     ff2:	28 ec       	ldi	r18, 0xC8	; 200
     ff4:	22 9d       	mul	r18, r2
     ff6:	c0 01       	movw	r24, r0
     ff8:	23 9d       	mul	r18, r3
     ffa:	90 0d       	add	r25, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	e1 e0       	ldi	r30, 0x01	; 1
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ec 0f       	add	r30, r28
    1004:	fd 1f       	adc	r31, r29
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
			{
				bestPath[i][0] = paths[p][i][0];
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	d9 01       	movw	r26, r18
    1014:	aa 0f       	add	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	aa 0f       	add	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	ab 5a       	subi	r26, 0xAB	; 171
    101e:	be 4f       	sbci	r27, 0xFE	; 254
    1020:	11 96       	adiw	r26, 0x01	; 1
    1022:	9c 93       	st	X, r25
    1024:	8e 93       	st	-X, r24
				bestPath[i][1] = paths[p][i][1];
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	13 96       	adiw	r26, 0x03	; 3
    102c:	9c 93       	st	X, r25
    102e:	8e 93       	st	-X, r24
    1030:	12 97       	sbiw	r26, 0x02	; 2
	{
		if(labyrinth[paths[p][pathLengths[p]-1][0]][paths[p][pathLengths[p]-1][1]] == type){
			//bestDirectionPath[0] = down;
			//bestDirectionPath[1] = down;
			//bestDirectionPath[2] = left;
			for (int i = 0; i < pathLengths[p]; i++)
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	34 96       	adiw	r30, 0x04	; 4
    1038:	26 17       	cp	r18, r22
    103a:	37 07       	cpc	r19, r23
    103c:	41 f7       	brne	.-48     	; 0x100e <findBestPath+0x306>
			{
				bestPath[i][0] = paths[p][i][0];
				bestPath[i][1] = paths[p][i][1];
			}
			
			bestPathLength = pathLengths[p]-1;
    103e:	10 93 52 01 	sts	0x0152, r17
    1042:	00 93 51 01 	sts	0x0151, r16
			transformToDirectionList();
    1046:	ba dc       	rcall	.-1676   	; 0x9bc <transformToDirectionList>
    1048:	fc c0       	rjmp	.+504    	; 0x1242 <findBestPath+0x53a>
    104a:	c3 51       	subi	r28, 0x13	; 19
    104c:	d1 4b       	sbci	r29, 0xB1	; 177
    104e:	e8 81       	ld	r30, Y
    1050:	cd 5e       	subi	r28, 0xED	; 237
    1052:	de 44       	sbci	r29, 0x4E	; 78
    1054:	c7 51       	subi	r28, 0x17	; 23
    1056:	d1 4b       	sbci	r29, 0xB1	; 177
    1058:	e8 83       	st	Y, r30
    105a:	c9 5e       	subi	r28, 0xE9	; 233
    105c:	de 44       	sbci	r29, 0x4E	; 78
    105e:	c2 51       	subi	r28, 0x12	; 18
    1060:	d1 4b       	sbci	r29, 0xB1	; 177
    1062:	f8 81       	ld	r31, Y
    1064:	ce 5e       	subi	r28, 0xEE	; 238
    1066:	de 44       	sbci	r29, 0x4E	; 78
    1068:	c6 51       	subi	r28, 0x16	; 22
    106a:	d1 4b       	sbci	r29, 0xB1	; 177
    106c:	f8 83       	st	Y, r31
    106e:	ca 5e       	subi	r28, 0xEA	; 234
    1070:	de 44       	sbci	r29, 0x4E	; 78
			return;
		}  
		for (int dir = 0; dir < 4; dir++)
		{
			if(getNodeTypeInDir(paths[p][pathLengths[p]-1][0],paths[p][pathLengths[p]-1][1],dir) != wall && getNodeTypeInDir(paths[p][pathLengths[p]-1][0],paths[p][pathLengths[p]-1][1],dir) != unexplored){
    1072:	c5 51       	subi	r28, 0x15	; 21
    1074:	d1 4b       	sbci	r29, 0xB1	; 177
    1076:	a8 81       	ld	r26, Y
    1078:	b9 81       	ldd	r27, Y+1	; 0x01
    107a:	cb 5e       	subi	r28, 0xEB	; 235
    107c:	de 44       	sbci	r29, 0x4E	; 78
    107e:	ed 90       	ld	r14, X+
    1080:	fc 90       	ld	r15, X
    1082:	67 01       	movw	r12, r14
    1084:	b1 e0       	ldi	r27, 0x01	; 1
    1086:	cb 1a       	sub	r12, r27
    1088:	d1 08       	sbc	r13, r1
    108a:	f3 01       	movw	r30, r6
    108c:	ec 0d       	add	r30, r12
    108e:	fd 1d       	adc	r31, r13
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	2c 0f       	add	r18, r28
    109e:	3d 1f       	adc	r19, r29
    10a0:	e2 0f       	add	r30, r18
    10a2:	f3 1f       	adc	r31, r19
    10a4:	82 80       	ldd	r8, Z+2	; 0x02
    10a6:	93 80       	ldd	r9, Z+3	; 0x03
    10a8:	a0 80       	ld	r10, Z
    10aa:	b1 80       	ldd	r11, Z+1	; 0x01
    10ac:	40 2f       	mov	r20, r16
    10ae:	b4 01       	movw	r22, r8
    10b0:	c5 01       	movw	r24, r10
    10b2:	c6 db       	rcall	.-2164   	; 0x840 <getNodeTypeInDir>
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <findBestPath+0x3b2>
    10b8:	b7 c0       	rjmp	.+366    	; 0x1228 <findBestPath+0x520>
    10ba:	40 2f       	mov	r20, r16
    10bc:	b4 01       	movw	r22, r8
    10be:	c5 01       	movw	r24, r10
    10c0:	bf db       	rcall	.-2178   	; 0x840 <getNodeTypeInDir>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <findBestPath+0x3c0>
    10c6:	b0 c0       	rjmp	.+352    	; 0x1228 <findBestPath+0x520>
					//newWay[i][0] = paths[p][i][0];
					//newWay[i][1] = paths[p][i][1];
				//}
					
					
				if (pathLengths[p] > 2){
    10c8:	33 e0       	ldi	r19, 0x03	; 3
    10ca:	e3 16       	cp	r14, r19
    10cc:	f1 04       	cpc	r15, r1
    10ce:	7c f1       	brlt	.+94     	; 0x112e <findBestPath+0x426>
					if (getNewX(paths[p][pathLengths[p]-1][0],dir) == paths[p][pathLengths[p]-3][0] && 
    10d0:	b8 01       	movw	r22, r16
    10d2:	c5 01       	movw	r24, r10
    10d4:	06 de       	rcall	.-1012   	; 0xce2 <getNewX>
    10d6:	57 01       	movw	r10, r14
    10d8:	a3 e0       	ldi	r26, 0x03	; 3
    10da:	aa 1a       	sub	r10, r26
    10dc:	b1 08       	sbc	r11, r1
    10de:	f3 01       	movw	r30, r6
    10e0:	ea 0d       	add	r30, r10
    10e2:	fb 1d       	adc	r31, r11
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	2c 0f       	add	r18, r28
    10f2:	3d 1f       	adc	r19, r29
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	82 17       	cp	r24, r18
    10fe:	93 07       	cpc	r25, r19
    1100:	b1 f4       	brne	.+44     	; 0x112e <findBestPath+0x426>
						getNewY(paths[p][pathLengths[p]-1][1],dir) == paths[p][pathLengths[p]-3][1]){
    1102:	b8 01       	movw	r22, r16
    1104:	c4 01       	movw	r24, r8
    1106:	f7 dd       	rcall	.-1042   	; 0xcf6 <getNewY>
    1108:	f3 01       	movw	r30, r6
    110a:	ea 0d       	add	r30, r10
    110c:	fb 1d       	adc	r31, r11
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	a1 e0       	ldi	r26, 0x01	; 1
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ac 0f       	add	r26, r28
    111c:	bd 1f       	adc	r27, r29
    111e:	ea 0f       	add	r30, r26
    1120:	fb 1f       	adc	r31, r27
					//newWay[i][1] = paths[p][i][1];
				//}
					
					
				if (pathLengths[p] > 2){
					if (getNewX(paths[p][pathLengths[p]-1][0],dir) == paths[p][pathLengths[p]-3][0] && 
    1122:	22 81       	ldd	r18, Z+2	; 0x02
    1124:	33 81       	ldd	r19, Z+3	; 0x03
    1126:	82 17       	cp	r24, r18
    1128:	93 07       	cpc	r25, r19
    112a:	09 f4       	brne	.+2      	; 0x112e <findBestPath+0x426>
    112c:	7d c0       	rjmp	.+250    	; 0x1228 <findBestPath+0x520>
						getNewY(paths[p][pathLengths[p]-1][1],dir) == paths[p][pathLengths[p]-3][1]){
						continue;
					}
				}
							
				for (int i = 0; i < pathLengths[p]; i++)
    112e:	1e 14       	cp	r1, r14
    1130:	1f 04       	cpc	r1, r15
    1132:	c4 f5       	brge	.+112    	; 0x11a4 <findBestPath+0x49c>
    1134:	e8 ec       	ldi	r30, 0xC8	; 200
    1136:	e4 9d       	mul	r30, r4
    1138:	d0 01       	movw	r26, r0
    113a:	e5 9d       	mul	r30, r5
    113c:	b0 0d       	add	r27, r0
    113e:	11 24       	eor	r1, r1
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	2c 0f       	add	r18, r28
    1146:	3d 1f       	adc	r19, r29
    1148:	a2 0f       	add	r26, r18
    114a:	b3 1f       	adc	r27, r19
    114c:	cd 50       	subi	r28, 0x0D	; 13
    114e:	d1 4b       	sbci	r29, 0xB1	; 177
    1150:	28 81       	ld	r18, Y
    1152:	39 81       	ldd	r19, Y+1	; 0x01
    1154:	c3 5f       	subi	r28, 0xF3	; 243
    1156:	de 44       	sbci	r29, 0x4E	; 78
    1158:	2e 0d       	add	r18, r14
    115a:	3f 1d       	adc	r19, r15
    115c:	22 0f       	add	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	8c 0f       	add	r24, r28
    116a:	9d 1f       	adc	r25, r29
    116c:	28 0f       	add	r18, r24
    116e:	39 1f       	adc	r19, r25
    1170:	cb 50       	subi	r28, 0x0B	; 11
    1172:	d1 4b       	sbci	r29, 0xB1	; 177
    1174:	e8 81       	ld	r30, Y
    1176:	c5 5f       	subi	r28, 0xF5	; 245
    1178:	de 44       	sbci	r29, 0x4E	; 78
    117a:	ca 50       	subi	r28, 0x0A	; 10
    117c:	d1 4b       	sbci	r29, 0xB1	; 177
    117e:	f8 81       	ld	r31, Y
    1180:	c6 5f       	subi	r28, 0xF6	; 246
    1182:	de 44       	sbci	r29, 0x4E	; 78
				{
					paths[arrayLength][i][0] = paths[p][i][0];
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	9c 93       	st	X, r25
    118c:	8e 93       	st	-X, r24
					paths[arrayLength][i][1] = paths[p][i][1];
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	93 81       	ldd	r25, Z+3	; 0x03
    1192:	13 96       	adiw	r26, 0x03	; 3
    1194:	9c 93       	st	X, r25
    1196:	8e 93       	st	-X, r24
    1198:	12 97       	sbiw	r26, 0x02	; 2
    119a:	34 96       	adiw	r30, 0x04	; 4
    119c:	14 96       	adiw	r26, 0x04	; 4
						getNewY(paths[p][pathLengths[p]-1][1],dir) == paths[p][pathLengths[p]-3][1]){
						continue;
					}
				}
							
				for (int i = 0; i < pathLengths[p]; i++)
    119e:	e2 17       	cp	r30, r18
    11a0:	f3 07       	cpc	r31, r19
    11a2:	81 f7       	brne	.-32     	; 0x1184 <findBestPath+0x47c>
					paths[arrayLength][i][0] = paths[p][i][0];
					paths[arrayLength][i][1] = paths[p][i][1];
				}
					
								
				paths[arrayLength][pathLengths[p]][0] = getNewX(paths[p][pathLengths[p]-1][0],dir);
    11a4:	53 01       	movw	r10, r6
    11a6:	ac 0c       	add	r10, r12
    11a8:	bd 1c       	adc	r11, r13
    11aa:	aa 0c       	add	r10, r10
    11ac:	bb 1c       	adc	r11, r11
    11ae:	aa 0c       	add	r10, r10
    11b0:	bb 1c       	adc	r11, r11
    11b2:	a1 e0       	ldi	r26, 0x01	; 1
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ac 0f       	add	r26, r28
    11b8:	bd 1f       	adc	r27, r29
    11ba:	aa 0e       	add	r10, r26
    11bc:	bb 1e       	adc	r11, r27
    11be:	b8 01       	movw	r22, r16
    11c0:	f5 01       	movw	r30, r10
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	8d dd       	rcall	.-1254   	; 0xce2 <getNewX>
    11c8:	f2 e3       	ldi	r31, 0x32	; 50
    11ca:	f4 9d       	mul	r31, r4
    11cc:	60 01       	movw	r12, r0
    11ce:	f5 9d       	mul	r31, r5
    11d0:	d0 0c       	add	r13, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	ce 0c       	add	r12, r14
    11d6:	df 1c       	adc	r13, r15
    11d8:	cc 0c       	add	r12, r12
    11da:	dd 1c       	adc	r13, r13
    11dc:	cc 0c       	add	r12, r12
    11de:	dd 1c       	adc	r13, r13
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	2c 0f       	add	r18, r28
    11e6:	3d 1f       	adc	r19, r29
    11e8:	c2 0e       	add	r12, r18
    11ea:	d3 1e       	adc	r13, r19
    11ec:	d6 01       	movw	r26, r12
    11ee:	8d 93       	st	X+, r24
    11f0:	9c 93       	st	X, r25
				paths[arrayLength][pathLengths[p]][1] = getNewY(paths[p][pathLengths[p]-1][1], dir);
    11f2:	b8 01       	movw	r22, r16
    11f4:	f5 01       	movw	r30, r10
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	7d dd       	rcall	.-1286   	; 0xcf6 <getNewY>
    11fc:	d6 01       	movw	r26, r12
    11fe:	13 96       	adiw	r26, 0x03	; 3
    1200:	9c 93       	st	X, r25
    1202:	8e 93       	st	-X, r24
    1204:	12 97       	sbiw	r26, 0x02	; 2
				pathLengths[arrayLength] = pathLengths[p] + 1;
    1206:	f2 01       	movw	r30, r4
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	21 e2       	ldi	r18, 0x21	; 33
    120e:	3e e4       	ldi	r19, 0x4E	; 78
    1210:	2c 0f       	add	r18, r28
    1212:	3d 1f       	adc	r19, r29
    1214:	e2 0f       	add	r30, r18
    1216:	f3 1f       	adc	r31, r19
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	e3 1a       	sub	r14, r19
    121c:	f3 0a       	sbc	r15, r19
    121e:	f1 82       	std	Z+1, r15	; 0x01
    1220:	e0 82       	st	Z, r14
				arrayLength++;
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	48 1a       	sub	r4, r24
    1226:	58 0a       	sbc	r5, r24
			
			bestPathLength = pathLengths[p]-1;
			transformToDirectionList();
			return;
		}  
		for (int dir = 0; dir < 4; dir++)
    1228:	0f 5f       	subi	r16, 0xFF	; 255
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	04 30       	cpi	r16, 0x04	; 4
    122e:	11 05       	cpc	r17, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <findBestPath+0x52c>
    1232:	0b cf       	rjmp	.-490    	; 0x104a <findBestPath+0x342>
			paths[arrayLength][0][1] = getNewY(currentY, dir);
			arrayLength++;
		}
	}
	
	for (int p = 0; p < arrayLength; p++)
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	29 1a       	sub	r2, r25
    1238:	39 0a       	sbc	r3, r25
    123a:	24 14       	cp	r2, r4
    123c:	35 04       	cpc	r3, r5
    123e:	0c f4       	brge	.+2      	; 0x1242 <findBestPath+0x53a>
    1240:	33 ce       	rjmp	.-922    	; 0xea8 <findBestPath+0x1a0>
				//arrayLength++;
			}
		}
			
	}
}
    1242:	c9 50       	subi	r28, 0x09	; 9
    1244:	d1 4b       	sbci	r29, 0xB1	; 177
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	7f 90       	pop	r7
    126a:	6f 90       	pop	r6
    126c:	5f 90       	pop	r5
    126e:	4f 90       	pop	r4
    1270:	3f 90       	pop	r3
    1272:	2f 90       	pop	r2
    1274:	08 95       	ret

00001276 <shouldIGoThisWay>:
		return y;
	}
}

bool shouldIGoThisWay(direction dir){
	dir = getGlobalDirection(dir);
    1276:	69 da       	rcall	.-2862   	; 0x74a <getGlobalDirection>
		//return (bestPath[currentStepInPath][0] == currentX-1 && bestPath[currentStepInPath][1] == currentY);
	//}
	//if (dir == right){
		//return (bestPath[currentStepInPath][0] == currentX+1 && bestPath[currentStepInPath][1] == currentY);
	//}
	return bestDirectionPath[currentStepInPath] == dir;
    1278:	e0 91 53 01 	lds	r30, 0x0153
    127c:	f0 91 54 01 	lds	r31, 0x0154
    1280:	e1 5e       	subi	r30, 0xE1	; 225
    1282:	fd 4f       	sbci	r31, 0xFD	; 253
    1284:	20 81       	ld	r18, Z
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	28 13       	cpse	r18, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
}
    128c:	89 2f       	mov	r24, r25
    128e:	08 95       	ret

00001290 <activatedSensors>:

volatile bool pastFirstLine = false;

//Checks how many activated sensors there is in the given range.
int activatedSensors(int reflexData, int startIndex, int stopIndex)
{
    1290:	fc 01       	movw	r30, r24
	int amountActivated = 0;
	int x = startIndex;
	for (x; x < stopIndex; x++) {
    1292:	64 17       	cp	r22, r20
    1294:	75 07       	cpc	r23, r21
    1296:	e4 f4       	brge	.+56     	; 0x12d0 <activatedSensors+0x40>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
		if ((reflexData & (1<<x)) >> x) {
    129c:	a1 e0       	ldi	r26, 0x01	; 1
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	9d 01       	movw	r18, r26
    12a2:	06 2e       	mov	r0, r22
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <activatedSensors+0x1a>
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <activatedSensors+0x16>
    12ae:	2e 23       	and	r18, r30
    12b0:	3f 23       	and	r19, r31
    12b2:	06 2e       	mov	r0, r22
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <activatedSensors+0x2a>
    12b6:	35 95       	asr	r19
    12b8:	27 95       	ror	r18
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <activatedSensors+0x26>
    12be:	23 2b       	or	r18, r19
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <activatedSensors+0x34>
			amountActivated++;
    12c2:	01 96       	adiw	r24, 0x01	; 1
//Checks how many activated sensors there is in the given range.
int activatedSensors(int reflexData, int startIndex, int stopIndex)
{
	int amountActivated = 0;
	int x = startIndex;
	for (x; x < stopIndex; x++) {
    12c4:	6f 5f       	subi	r22, 0xFF	; 255
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	64 17       	cp	r22, r20
    12ca:	75 07       	cpc	r23, r21
    12cc:	49 f7       	brne	.-46     	; 0x12a0 <activatedSensors+0x10>
    12ce:	08 95       	ret
volatile bool pastFirstLine = false;

//Checks how many activated sensors there is in the given range.
int activatedSensors(int reflexData, int startIndex, int stopIndex)
{
	int amountActivated = 0;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
		if ((reflexData & (1<<x)) >> x) {
			amountActivated++;
		}
	}
	return amountActivated;
}
    12d4:	08 95       	ret

000012d6 <objectFinder>:

//Checks if any sensor is activated.
bool objectFinder(int reflexData)
{
	if (activatedSensors(reflexData, 0, 11) < 2) {
    12d6:	4b e0       	ldi	r20, 0x0B	; 11
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	d8 df       	rcall	.-80     	; 0x1290 <activatedSensors>
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	02 97       	sbiw	r24, 0x02	; 2
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <objectFinder+0x12>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	return false;
}
    12e8:	82 2f       	mov	r24, r18
    12ea:	08 95       	ret

000012ec <objectCentering>:
   --------------------------- (First line)


*/
void objectCentering(int reflexData)
{		
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	ec 01       	movw	r28, r24
	if (!pastFirstLine) {
    12f2:	80 91 0a 01 	lds	r24, 0x010A
    12f6:	81 11       	cpse	r24, r1
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <objectCentering+0x2e>
		drive_forward(50);
    12fa:	82 e3       	ldi	r24, 0x32	; 50
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	c3 d8       	rcall	.-3706   	; 0x486 <drive_forward>
    1300:	27 e0       	ldi	r18, 0x07	; 7
    1302:	81 e8       	ldi	r24, 0x81	; 129
    1304:	9d e0       	ldi	r25, 0x0D	; 13
    1306:	21 50       	subi	r18, 0x01	; 1
    1308:	80 40       	sbci	r24, 0x00	; 0
    130a:	90 40       	sbci	r25, 0x00	; 0
    130c:	e1 f7       	brne	.-8      	; 0x1306 <objectCentering+0x1a>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <objectCentering+0x24>
    1310:	00 00       	nop
		_delay_ms(300);
		pastFirstLine = true;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	80 93 0a 01 	sts	0x010A, r24
    1318:	31 c0       	rjmp	.+98     	; 0x137c <objectCentering+0x90>
	} else {
		//If a majority of sensors are active == finish line reached.
		if (activatedSensors(reflexData, 0,11) > 3) {
    131a:	4b e0       	ldi	r20, 0x0B	; 11
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	ce 01       	movw	r24, r28
    1324:	b5 df       	rcall	.-150    	; 0x1290 <activatedSensors>
    1326:	04 97       	sbiw	r24, 0x04	; 4
    1328:	24 f0       	brlt	.+8      	; 0x1332 <objectCentering+0x46>
			
			current_mode = GRAB;
    132a:	89 e0       	ldi	r24, 0x09	; 9
    132c:	80 93 10 03 	sts	0x0310, r24
			return;
    1330:	25 c0       	rjmp	.+74     	; 0x137c <objectCentering+0x90>
		}
		
		//If the center sensor is active, drive forward.
		if (activatedSensors(reflexData, 5, 6)) {
    1332:	46 e0       	ldi	r20, 0x06	; 6
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	65 e0       	ldi	r22, 0x05	; 5
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	ce 01       	movw	r24, r28
    133c:	a9 df       	rcall	.-174    	; 0x1290 <activatedSensors>
    133e:	89 2b       	or	r24, r25
    1340:	21 f0       	breq	.+8      	; 0x134a <objectCentering+0x5e>
			drive_forward(50);
    1342:	82 e3       	ldi	r24, 0x32	; 50
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9f d8       	rcall	.-3778   	; 0x486 <drive_forward>
    1348:	19 c0       	rjmp	.+50     	; 0x137c <objectCentering+0x90>
			
		//If any sensor to the left of the center is active, rotate left.
		} else if (activatedSensors(reflexData, 6, 11) > 0) {
    134a:	4b e0       	ldi	r20, 0x0B	; 11
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	66 e0       	ldi	r22, 0x06	; 6
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	ce 01       	movw	r24, r28
    1354:	9d df       	rcall	.-198    	; 0x1290 <activatedSensors>
    1356:	18 16       	cp	r1, r24
    1358:	19 06       	cpc	r1, r25
    135a:	24 f4       	brge	.+8      	; 0x1364 <objectCentering+0x78>
			rotate_left(70);
    135c:	86 e4       	ldi	r24, 0x46	; 70
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9b d8       	rcall	.-3786   	; 0x498 <rotate_left>
    1362:	0c c0       	rjmp	.+24     	; 0x137c <objectCentering+0x90>
			
		//If any sensor to the right of the center is active, rotate right.
		} else if (activatedSensors(reflexData, 0, 5) > 0) {
    1364:	45 e0       	ldi	r20, 0x05	; 5
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	ce 01       	movw	r24, r28
    136e:	90 df       	rcall	.-224    	; 0x1290 <activatedSensors>
    1370:	18 16       	cp	r1, r24
    1372:	19 06       	cpc	r1, r25
    1374:	1c f4       	brge	.+6      	; 0x137c <objectCentering+0x90>
			rotate_right(70);
    1376:	86 e4       	ldi	r24, 0x46	; 70
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	94 d8       	rcall	.-3800   	; 0x4a4 <rotate_right>
		}
	}
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <reglering>:

#include <avr/io.h>
#include "PDController.h"
#include "SensorAlgorithm.h"

int reglering(uint16_t irfl, uint16_t irfr, uint16_t irrl, uint16_t irrr){
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	8c 01       	movw	r16, r24
    1398:	7b 01       	movw	r14, r22
    139a:	6a 01       	movw	r12, r20
    139c:	59 01       	movw	r10, r18
	
	int position = corridor_side_position(irfl,irfr,irrl,irrr);
    139e:	08 d3       	rcall	.+1552   	; 0x19b0 <corridor_side_position>
    13a0:	ec 01       	movw	r28, r24
	int skewness = corridor_robot_skewness(irfl,irfr,irrl,irrr);
    13a2:	95 01       	movw	r18, r10
    13a4:	a6 01       	movw	r20, r12
    13a6:	b7 01       	movw	r22, r14
    13a8:	c8 01       	movw	r24, r16
    13aa:	bb d2       	rcall	.+1398   	; 0x1922 <corridor_robot_skewness>
	
	return SCALEFACTOR*(position + KD*skewness);
    13ac:	8c 0f       	add	r24, r28
    13ae:	9d 1f       	adc	r25, r29
    13b0:	9c 01       	movw	r18, r24
    13b2:	22 0f       	add	r18, r18
    13b4:	33 1f       	adc	r19, r19
    13b6:	22 0f       	add	r18, r18
    13b8:	33 1f       	adc	r19, r19
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	08 95       	ret

000013d8 <rotating_left>:
	//}
	//else{
		//return 1;
	//}
	return sensorFront >= 25; // Was 25 2015-12-15
}
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	60 91 00 01 	lds	r22, 0x0100
    13e4:	70 91 01 01 	lds	r23, 0x0101
    13e8:	c0 90 1a 03 	lds	r12, 0x031A
    13ec:	d0 90 1b 03 	lds	r13, 0x031B
    13f0:	e0 90 1c 03 	lds	r14, 0x031C
    13f4:	f0 90 1d 03 	lds	r15, 0x031D
    13f8:	07 2e       	mov	r0, r23
    13fa:	00 0c       	add	r0, r0
    13fc:	88 0b       	sbc	r24, r24
    13fe:	99 0b       	sbc	r25, r25
    1400:	de d6       	rcall	.+3516   	; 0x21be <__floatsisf>
    1402:	a7 01       	movw	r20, r14
    1404:	96 01       	movw	r18, r12
    1406:	a4 d6       	rcall	.+3400   	; 0x2150 <__cmpsf2>
    1408:	88 23       	and	r24, r24
    140a:	34 f4       	brge	.+12     	; 0x1418 <rotating_left+0x40>
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	14 da       	rcall	.-3032   	; 0x838 <turnInLabyrinth>
    1410:	84 e0       	ldi	r24, 0x04	; 4
    1412:	80 93 10 03 	sts	0x0310, r24
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <rotating_left+0x4a>
    1418:	80 91 49 01 	lds	r24, 0x0149
    141c:	90 91 4a 01 	lds	r25, 0x014A
    1420:	3b d8       	rcall	.-3978   	; 0x498 <rotate_left>
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	08 95       	ret

0000142c <rotating_right>:
    142c:	cf 92       	push	r12
    142e:	df 92       	push	r13
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	60 91 00 01 	lds	r22, 0x0100
    1438:	70 91 01 01 	lds	r23, 0x0101
    143c:	c0 90 1a 03 	lds	r12, 0x031A
    1440:	d0 90 1b 03 	lds	r13, 0x031B
    1444:	e0 90 1c 03 	lds	r14, 0x031C
    1448:	f0 90 1d 03 	lds	r15, 0x031D
    144c:	07 2e       	mov	r0, r23
    144e:	00 0c       	add	r0, r0
    1450:	88 0b       	sbc	r24, r24
    1452:	99 0b       	sbc	r25, r25
    1454:	b4 d6       	rcall	.+3432   	; 0x21be <__floatsisf>
    1456:	a7 01       	movw	r20, r14
    1458:	96 01       	movw	r18, r12
    145a:	7a d6       	rcall	.+3316   	; 0x2150 <__cmpsf2>
    145c:	88 23       	and	r24, r24
    145e:	34 f4       	brge	.+12     	; 0x146c <rotating_right+0x40>
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	ea d9       	rcall	.-3116   	; 0x838 <turnInLabyrinth>
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	80 93 10 03 	sts	0x0310, r24
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <rotating_right+0x4a>
    146c:	80 91 49 01 	lds	r24, 0x0149
    1470:	90 91 4a 01 	lds	r25, 0x014A
    1474:	17 d8       	rcall	.-4050   	; 0x4a4 <rotate_right>
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	08 95       	ret

00001480 <turn_around>:
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	60 91 00 01 	lds	r22, 0x0100
    148c:	70 91 01 01 	lds	r23, 0x0101
    1490:	c0 90 1a 03 	lds	r12, 0x031A
    1494:	d0 90 1b 03 	lds	r13, 0x031B
    1498:	e0 90 1c 03 	lds	r14, 0x031C
    149c:	f0 90 1d 03 	lds	r15, 0x031D
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	07 2e       	mov	r0, r23
    14a6:	00 0c       	add	r0, r0
    14a8:	88 0b       	sbc	r24, r24
    14aa:	99 0b       	sbc	r25, r25
    14ac:	88 d6       	rcall	.+3344   	; 0x21be <__floatsisf>
    14ae:	a7 01       	movw	r20, r14
    14b0:	96 01       	movw	r18, r12
    14b2:	4e d6       	rcall	.+3228   	; 0x2150 <__cmpsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	34 f4       	brge	.+12     	; 0x14c4 <turn_around+0x44>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	be d9       	rcall	.-3204   	; 0x838 <turnInLabyrinth>
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	80 93 10 03 	sts	0x0310, r24
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <turn_around+0x50>
    14c4:	80 91 49 01 	lds	r24, 0x0149
    14c8:	90 91 4a 01 	lds	r25, 0x014A
    14cc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <rotate_right>
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <correct_req_current_angle>:
    14da:	88 36       	cpi	r24, 0x68	; 104
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	92 07       	cpc	r25, r18
    14e0:	34 f0       	brlt	.+12     	; 0x14ee <correct_req_current_angle+0x14>
    14e2:	88 56       	subi	r24, 0x68	; 104
    14e4:	91 40       	sbci	r25, 0x01	; 1
    14e6:	88 36       	cpi	r24, 0x68	; 104
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	92 07       	cpc	r25, r18
    14ec:	d4 f7       	brge	.-12     	; 0x14e2 <correct_req_current_angle+0x8>
    14ee:	99 23       	and	r25, r25
    14f0:	1c f4       	brge	.+6      	; 0x14f8 <correct_req_current_angle+0x1e>
    14f2:	88 59       	subi	r24, 0x98	; 152
    14f4:	9e 4f       	sbci	r25, 0xFE	; 254
    14f6:	ea f3       	brmi	.-6      	; 0x14f2 <correct_req_current_angle+0x18>
    14f8:	08 95       	ret

000014fa <enter_mid_before_rotating_right>:
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	4b 01       	movw	r8, r22
    1510:	5c 01       	movw	r10, r24
    1512:	ea 01       	movw	r28, r20
    1514:	79 01       	movw	r14, r18
    1516:	00 91 0d 01 	lds	r16, 0x010D
    151a:	10 91 0e 01 	lds	r17, 0x010E
    151e:	b8 01       	movw	r22, r16
    1520:	11 0f       	add	r17, r17
    1522:	88 0b       	sbc	r24, r24
    1524:	99 0b       	sbc	r25, r25
    1526:	4b d6       	rcall	.+3222   	; 0x21be <__floatsisf>
    1528:	a5 01       	movw	r20, r10
    152a:	94 01       	movw	r18, r8
    152c:	11 d6       	rcall	.+3106   	; 0x2150 <__cmpsf2>
    152e:	88 23       	and	r24, r24
    1530:	24 f0       	brlt	.+8      	; 0x153a <enter_mid_before_rotating_right+0x40>
    1532:	89 e1       	ldi	r24, 0x19	; 25
    1534:	e8 16       	cp	r14, r24
    1536:	f1 04       	cpc	r15, r1
    1538:	5c f4       	brge	.+22     	; 0x1550 <enter_mid_before_rotating_right+0x56>
    153a:	ce 01       	movw	r24, r28
    153c:	82 5f       	subi	r24, 0xF2	; 242
    153e:	9e 4f       	sbci	r25, 0xFE	; 254
    1540:	cc df       	rcall	.-104    	; 0x14da <correct_req_current_angle>
    1542:	90 93 16 03 	sts	0x0316, r25
    1546:	80 93 15 03 	sts	0x0315, r24
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	80 93 10 03 	sts	0x0310, r24
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	bf 90       	pop	r11
    155e:	af 90       	pop	r10
    1560:	9f 90       	pop	r9
    1562:	8f 90       	pop	r8
    1564:	08 95       	ret

00001566 <enter_mid_before_rotating_left>:
    1566:	8f 92       	push	r8
    1568:	9f 92       	push	r9
    156a:	af 92       	push	r10
    156c:	bf 92       	push	r11
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	4b 01       	movw	r8, r22
    157c:	5c 01       	movw	r10, r24
    157e:	ea 01       	movw	r28, r20
    1580:	79 01       	movw	r14, r18
    1582:	00 91 0d 01 	lds	r16, 0x010D
    1586:	10 91 0e 01 	lds	r17, 0x010E
    158a:	b8 01       	movw	r22, r16
    158c:	11 0f       	add	r17, r17
    158e:	88 0b       	sbc	r24, r24
    1590:	99 0b       	sbc	r25, r25
    1592:	15 d6       	rcall	.+3114   	; 0x21be <__floatsisf>
    1594:	a5 01       	movw	r20, r10
    1596:	94 01       	movw	r18, r8
    1598:	db d5       	rcall	.+2998   	; 0x2150 <__cmpsf2>
    159a:	88 23       	and	r24, r24
    159c:	24 f0       	brlt	.+8      	; 0x15a6 <enter_mid_before_rotating_left+0x40>
    159e:	89 e1       	ldi	r24, 0x19	; 25
    15a0:	e8 16       	cp	r14, r24
    15a2:	f1 04       	cpc	r15, r1
    15a4:	5c f4       	brge	.+22     	; 0x15bc <enter_mid_before_rotating_left+0x56>
    15a6:	ce 01       	movw	r24, r28
    15a8:	86 5a       	subi	r24, 0xA6	; 166
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	96 df       	rcall	.-212    	; 0x14da <correct_req_current_angle>
    15ae:	90 93 16 03 	sts	0x0316, r25
    15b2:	80 93 15 03 	sts	0x0315, r24
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 10 03 	sts	0x0310, r24
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	08 95       	ret

000015d2 <startTurnAround>:
    15d2:	8c 54       	subi	r24, 0x4C	; 76
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	81 df       	rcall	.-254    	; 0x14da <correct_req_current_angle>
    15d8:	90 93 16 03 	sts	0x0316, r25
    15dc:	80 93 15 03 	sts	0x0315, r24
    15e0:	88 e0       	ldi	r24, 0x08	; 8
    15e2:	80 93 10 03 	sts	0x0310, r24
    15e6:	08 95       	ret

000015e8 <in_junction>:
    15e8:	20 91 02 01 	lds	r18, 0x0102
    15ec:	30 91 03 01 	lds	r19, 0x0103
    15f0:	28 17       	cp	r18, r24
    15f2:	39 07       	cpc	r19, r25
    15f4:	5c f4       	brge	.+22     	; 0x160c <in_junction+0x24>
    15f6:	20 91 02 01 	lds	r18, 0x0102
    15fa:	30 91 03 01 	lds	r19, 0x0103
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	26 17       	cp	r18, r22
    1604:	37 07       	cpc	r19, r23
    1606:	24 f0       	brlt	.+8      	; 0x1610 <in_junction+0x28>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	08 95       	ret
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	08 95       	ret

00001612 <check_if_junction_and_follow_path>:
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	ec 01       	movw	r28, r24
    1630:	4b 01       	movw	r8, r22
    1632:	ca 01       	movw	r24, r20
    1634:	b9 01       	movw	r22, r18
    1636:	d8 df       	rcall	.-80     	; 0x15e8 <in_junction>
    1638:	3c 01       	movw	r6, r24
    163a:	b4 01       	movw	r22, r8
    163c:	ce 01       	movw	r24, r28
    163e:	d4 df       	rcall	.-88     	; 0x15e8 <in_junction>
    1640:	67 28       	or	r6, r7
    1642:	09 f0       	breq	.+2      	; 0x1646 <check_if_junction_and_follow_path+0x34>
    1644:	5e c0       	rjmp	.+188    	; 0x1702 <check_if_junction_and_follow_path+0xf0>
    1646:	89 2b       	or	r24, r25
    1648:	09 f0       	breq	.+2      	; 0x164c <check_if_junction_and_follow_path+0x3a>
    164a:	64 c0       	rjmp	.+200    	; 0x1714 <check_if_junction_and_follow_path+0x102>
    164c:	4a c0       	rjmp	.+148    	; 0x16e2 <check_if_junction_and_follow_path+0xd0>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	44 e9       	ldi	r20, 0x94	; 148
    1654:	51 e4       	ldi	r21, 0x41	; 65
    1656:	c7 01       	movw	r24, r14
    1658:	b6 01       	movw	r22, r12
    165a:	16 d5       	rcall	.+2604   	; 0x2088 <__addsf3>
    165c:	7d d5       	rcall	.+2810   	; 0x2158 <__fixsfsi>
    165e:	70 93 0e 01 	sts	0x010E, r23
    1662:	60 93 0d 01 	sts	0x010D, r22
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	80 93 10 03 	sts	0x0310, r24
    166c:	80 91 53 01 	lds	r24, 0x0153
    1670:	90 91 54 01 	lds	r25, 0x0154
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	90 93 54 01 	sts	0x0154, r25
    167a:	80 93 53 01 	sts	0x0153, r24
    167e:	4f c0       	rjmp	.+158    	; 0x171e <check_if_junction_and_follow_path+0x10c>
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	f9 dd       	rcall	.-1038   	; 0x1276 <shouldIGoThisWay>
    1684:	88 23       	and	r24, r24
    1686:	c9 f0       	breq	.+50     	; 0x16ba <check_if_junction_and_follow_path+0xa8>
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	44 e9       	ldi	r20, 0x94	; 148
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	c7 01       	movw	r24, r14
    1692:	b6 01       	movw	r22, r12
    1694:	f9 d4       	rcall	.+2546   	; 0x2088 <__addsf3>
    1696:	60 d5       	rcall	.+2752   	; 0x2158 <__fixsfsi>
    1698:	70 93 0e 01 	sts	0x010E, r23
    169c:	60 93 0d 01 	sts	0x010D, r22
    16a0:	87 e0       	ldi	r24, 0x07	; 7
    16a2:	80 93 10 03 	sts	0x0310, r24
    16a6:	80 91 53 01 	lds	r24, 0x0153
    16aa:	90 91 54 01 	lds	r25, 0x0154
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	90 93 54 01 	sts	0x0154, r25
    16b4:	80 93 53 01 	sts	0x0153, r24
    16b8:	32 c0       	rjmp	.+100    	; 0x171e <check_if_junction_and_follow_path+0x10c>
    16ba:	0a 31       	cpi	r16, 0x1A	; 26
    16bc:	11 05       	cpc	r17, r1
    16be:	7c f1       	brlt	.+94     	; 0x171e <check_if_junction_and_follow_path+0x10c>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	d9 dd       	rcall	.-1102   	; 0x1276 <shouldIGoThisWay>
    16c4:	88 23       	and	r24, r24
    16c6:	59 f1       	breq	.+86     	; 0x171e <check_if_junction_and_follow_path+0x10c>
    16c8:	8b e0       	ldi	r24, 0x0B	; 11
    16ca:	80 93 10 03 	sts	0x0310, r24
    16ce:	80 91 53 01 	lds	r24, 0x0153
    16d2:	90 91 54 01 	lds	r25, 0x0154
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	90 93 54 01 	sts	0x0154, r25
    16dc:	80 93 53 01 	sts	0x0153, r24
    16e0:	1e c0       	rjmp	.+60     	; 0x171e <check_if_junction_and_follow_path+0x10c>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	c8 dd       	rcall	.-1136   	; 0x1276 <shouldIGoThisWay>
    16e6:	88 23       	and	r24, r24
    16e8:	d1 f0       	breq	.+52     	; 0x171e <check_if_junction_and_follow_path+0x10c>
    16ea:	c5 01       	movw	r24, r10
    16ec:	72 df       	rcall	.-284    	; 0x15d2 <startTurnAround>
    16ee:	80 91 53 01 	lds	r24, 0x0153
    16f2:	90 91 54 01 	lds	r25, 0x0154
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	90 93 54 01 	sts	0x0154, r25
    16fc:	80 93 53 01 	sts	0x0153, r24
    1700:	0e c0       	rjmp	.+28     	; 0x171e <check_if_junction_and_follow_path+0x10c>
    1702:	89 2b       	or	r24, r25
    1704:	09 f4       	brne	.+2      	; 0x1708 <check_if_junction_and_follow_path+0xf6>
    1706:	bc cf       	rjmp	.-136    	; 0x1680 <check_if_junction_and_follow_path+0x6e>
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	b5 dd       	rcall	.-1174   	; 0x1276 <shouldIGoThisWay>
    170c:	88 23       	and	r24, r24
    170e:	09 f4       	brne	.+2      	; 0x1712 <check_if_junction_and_follow_path+0x100>
    1710:	b7 cf       	rjmp	.-146    	; 0x1680 <check_if_junction_and_follow_path+0x6e>
    1712:	9d cf       	rjmp	.-198    	; 0x164e <check_if_junction_and_follow_path+0x3c>
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	af dd       	rcall	.-1186   	; 0x1276 <shouldIGoThisWay>
    1718:	88 23       	and	r24, r24
    171a:	79 f2       	breq	.-98     	; 0x16ba <check_if_junction_and_follow_path+0xa8>
    171c:	98 cf       	rjmp	.-208    	; 0x164e <check_if_junction_and_follow_path+0x3c>
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	08 95       	ret

0000173c <out_of_junction>:
//}

// Check whether or not the robot has left the junction.
int out_of_junction(int ir_front, int ir_back)
{	
	return ((ir_front < IR_threshold) && (ir_back < IR_threshold));
    173c:	20 91 02 01 	lds	r18, 0x0102
    1740:	30 91 03 01 	lds	r19, 0x0103
    1744:	82 17       	cp	r24, r18
    1746:	93 07       	cpc	r25, r19
    1748:	5c f4       	brge	.+22     	; 0x1760 <out_of_junction+0x24>
    174a:	20 91 02 01 	lds	r18, 0x0102
    174e:	30 91 03 01 	lds	r19, 0x0103
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	62 17       	cp	r22, r18
    1758:	73 07       	cpc	r23, r19
    175a:	24 f0       	brlt	.+8      	; 0x1764 <out_of_junction+0x28>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	08 95       	ret
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
}
    1764:	08 95       	ret

00001766 <exit_junction_left>:
		current_mode = ROTATE_LEFT;
	}
}

// Check if the robot has left the junction after its left rotation and in that case set current_mode to STRAIGHT
void exit_junction_left(int IRFL, int IRBL){
    1766:	cb 01       	movw	r24, r22
	int wall_left = out_of_junction(IRBL, IRBL);
    1768:	e9 df       	rcall	.-46     	; 0x173c <out_of_junction>
	if(wall_left){
    176a:	89 2b       	or	r24, r25
    176c:	19 f0       	breq	.+6      	; 0x1774 <exit_junction_left+0xe>
		current_mode = STRAIGHT;
    176e:	85 e0       	ldi	r24, 0x05	; 5
    1770:	80 93 10 03 	sts	0x0310, r24
    1774:	08 95       	ret

00001776 <exit_junction_right>:
	}
}

// Check if the robot has left the junction after its right rotation and in that case set current_mode to STRAIGHT
void exit_junction_right(int IRFR, int IRBR){
	int wall_right = out_of_junction(IRFR, IRBR);
    1776:	e2 df       	rcall	.-60     	; 0x173c <out_of_junction>
	if(wall_right){
    1778:	89 2b       	or	r24, r25
    177a:	19 f0       	breq	.+6      	; 0x1782 <exit_junction_right+0xc>
		current_mode = STRAIGHT;
    177c:	85 e0       	ldi	r24, 0x05	; 5
    177e:	80 93 10 03 	sts	0x0310, r24
    1782:	08 95       	ret

00001784 <exit_junction_forward_in_left_crossing>:
		//exiting = true;
	//}	
}

void exit_junction_forward_in_left_crossing(int IRFL, int IRBL){
	int wall_left = out_of_junction(IRFL, IRBL);
    1784:	db df       	rcall	.-74     	; 0x173c <out_of_junction>
	if(wall_left){
    1786:	89 2b       	or	r24, r25
    1788:	19 f0       	breq	.+6      	; 0x1790 <exit_junction_forward_in_left_crossing+0xc>
		current_mode = STRAIGHT;
    178a:	85 e0       	ldi	r24, 0x05	; 5
    178c:	80 93 10 03 	sts	0x0310, r24
    1790:	08 95       	ret

00001792 <exit_junction_forward_in_right_crossing>:
	}
}

void exit_junction_forward_in_right_crossing(int IRFR, int IRBR){
	int wall_right = out_of_junction(IRFR, IRBR);
    1792:	d4 df       	rcall	.-88     	; 0x173c <out_of_junction>
	if(wall_right){
    1794:	89 2b       	or	r24, r25
    1796:	19 f0       	breq	.+6      	; 0x179e <exit_junction_forward_in_right_crossing+0xc>
		current_mode = STRAIGHT;
    1798:	85 e0       	ldi	r24, 0x05	; 5
    179a:	80 93 10 03 	sts	0x0310, r24
    179e:	08 95       	ret

000017a0 <partly_open>:
	return ((ir_front < IR_threshold) && (ir_back < IR_threshold));
}

int partly_open(int ir_front, int ir_back)
{
	return ((ir_front > IR_threshold) && !(ir_back > IR_threshold));
    17a0:	20 91 02 01 	lds	r18, 0x0102
    17a4:	30 91 03 01 	lds	r19, 0x0103
    17a8:	28 17       	cp	r18, r24
    17aa:	39 07       	cpc	r19, r25
    17ac:	5c f4       	brge	.+22     	; 0x17c4 <partly_open+0x24>
    17ae:	20 91 02 01 	lds	r18, 0x0102
    17b2:	30 91 03 01 	lds	r19, 0x0103
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	26 17       	cp	r18, r22
    17bc:	37 07       	cpc	r19, r23
    17be:	24 f4       	brge	.+8      	; 0x17c8 <partly_open+0x28>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	08 95       	ret
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	08 95       	ret

000017ca <check_if_junction_and_keep_right>:
	}
	return angle;
}

// After gathering the sensor data, find out if the robot is in a junction and set current_mode accordingly.
void check_if_junction_and_keep_right(int IRFR, int IRBR, int IRFL, int IRBL, int distanceFront, double distance, int current_angle){
    17ca:	2f 92       	push	r2
    17cc:	3f 92       	push	r3
    17ce:	4f 92       	push	r4
    17d0:	5f 92       	push	r5
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <check_if_junction_and_keep_right+0x26>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <check_if_junction_and_keep_right+0x28>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	4b 01       	movw	r8, r22
    17fc:	5a 83       	std	Y+2, r21	; 0x02
    17fe:	49 83       	std	Y+1, r20	; 0x01
    1800:	19 01       	movw	r2, r18
	// Open means that there's a path that way.
	int open_left = in_junction(IRFL, IRBL);
    1802:	b9 01       	movw	r22, r18
    1804:	ca 01       	movw	r24, r20
    1806:	f0 de       	rcall	.-544    	; 0x15e8 <in_junction>
    1808:	2c 01       	movw	r4, r24
	int open_right = in_junction(IRFR, IRBR);
    180a:	b4 01       	movw	r22, r8
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	eb de       	rcall	.-554    	; 0x15e8 <in_junction>
    1812:	3c 01       	movw	r6, r24
	// We only tell the robot that it isn't open to the front if it is bad 50 times in a row
	int open_front = 1;
	if (openForward(distanceFront)){
    1814:	09 31       	cpi	r16, 0x19	; 25
    1816:	11 05       	cpc	r17, r1
    1818:	3c f0       	brlt	.+14     	; 0x1828 <check_if_junction_and_keep_right+0x5e>
		errorCount = 0;		
    181a:	10 92 0c 01 	sts	0x010C, r1
    181e:	10 92 0b 01 	sts	0x010B, r1
void check_if_junction_and_keep_right(int IRFR, int IRBR, int IRFL, int IRBL, int distanceFront, double distance, int current_angle){
	// Open means that there's a path that way.
	int open_left = in_junction(IRFL, IRBL);
	int open_right = in_junction(IRFR, IRBR);
	// We only tell the robot that it isn't open to the front if it is bad 50 times in a row
	int open_front = 1;
    1822:	01 e0       	ldi	r16, 0x01	; 1
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <check_if_junction_and_keep_right+0x86>
	if (openForward(distanceFront)){
		errorCount = 0;		
	}
	else{
		errorCount++;
    1828:	80 91 0b 01 	lds	r24, 0x010B
    182c:	90 91 0c 01 	lds	r25, 0x010C
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	90 93 0c 01 	sts	0x010C, r25
    1836:	80 93 0b 01 	sts	0x010B, r24
		if (errorCount > 50){
    183a:	80 91 0b 01 	lds	r24, 0x010B
    183e:	90 91 0c 01 	lds	r25, 0x010C
    1842:	31 e0       	ldi	r19, 0x01	; 1
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	c3 97       	sbiw	r24, 0x33	; 51
    1848:	0c f0       	brlt	.+2      	; 0x184c <check_if_junction_and_keep_right+0x82>
    184a:	30 e0       	ldi	r19, 0x00	; 0
void check_if_junction_and_keep_right(int IRFR, int IRBR, int IRFL, int IRBL, int distanceFront, double distance, int current_angle){
	// Open means that there's a path that way.
	int open_left = in_junction(IRFL, IRBL);
	int open_right = in_junction(IRFR, IRBR);
	// We only tell the robot that it isn't open to the front if it is bad 50 times in a row
	int open_front = 1;
    184c:	03 2f       	mov	r16, r19
    184e:	12 2f       	mov	r17, r18
		errorCount++;
		if (errorCount > 50){
			open_front = 0;
		}
	}
	int partly_open_right = partly_open(IRFR, IRBR);
    1850:	b4 01       	movw	r22, r8
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	a4 df       	rcall	.-184    	; 0x17a0 <partly_open>
    1858:	4c 01       	movw	r8, r24
	int partly_open_left = partly_open(IRFL, IRBL);
    185a:	b1 01       	movw	r22, r2
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	9f df       	rcall	.-194    	; 0x17a0 <partly_open>
	//			|							 |
	//			|							 |
	//			|							 |
	
	// Right rotate, we always rotate to the right if its possible.
	if (open_right || (open_left && partly_open_right)) {
    1862:	61 14       	cp	r6, r1
    1864:	71 04       	cpc	r7, r1
    1866:	31 f4       	brne	.+12     	; 0x1874 <check_if_junction_and_keep_right+0xaa>
    1868:	45 28       	or	r4, r5
    186a:	09 f4       	brne	.+2      	; 0x186e <check_if_junction_and_keep_right+0xa4>
    186c:	41 c0       	rjmp	.+130    	; 0x18f0 <check_if_junction_and_keep_right+0x126>
    186e:	89 28       	or	r8, r9
    1870:	09 f4       	brne	.+2      	; 0x1874 <check_if_junction_and_keep_right+0xaa>
    1872:	3b c0       	rjmp	.+118    	; 0x18ea <check_if_junction_and_keep_right+0x120>
		// The robot needs to find the center of the square before it starts rotating.
		addNode(partly_open_left, open_right, open_front, false);
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	01 2b       	or	r16, r17
    1878:	09 f4       	brne	.+2      	; 0x187c <check_if_junction_and_keep_right+0xb2>
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	67 28       	or	r6, r7
    1880:	09 f4       	brne	.+2      	; 0x1884 <check_if_junction_and_keep_right+0xba>
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	31 e0       	ldi	r19, 0x01	; 1
    1886:	89 2b       	or	r24, r25
    1888:	09 f4       	brne	.+2      	; 0x188c <check_if_junction_and_keep_right+0xc2>
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	83 2f       	mov	r24, r19
    1890:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <addNode>
		requested_vertical_value = distance + 18.5;
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	44 e9       	ldi	r20, 0x94	; 148
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	c7 01       	movw	r24, r14
    189e:	b6 01       	movw	r22, r12
    18a0:	f3 d3       	rcall	.+2022   	; 0x2088 <__addsf3>
    18a2:	5a d4       	rcall	.+2228   	; 0x2158 <__fixsfsi>
    18a4:	70 93 0e 01 	sts	0x010E, r23
    18a8:	60 93 0d 01 	sts	0x010D, r22
		current_mode = ENTER_MID_BEFORE_ROTATING_RIGHT;
    18ac:	86 e0       	ldi	r24, 0x06	; 6
    18ae:	80 93 10 03 	sts	0x0310, r24
    18b2:	20 c0       	rjmp	.+64     	; 0x18f4 <check_if_junction_and_keep_right+0x12a>
	}
	else if(open_front) {
		// Keep driving forward
	}
	else if(open_left) {
		addNode(open_left, partly_open_right, open_front, false);
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <addNode>
		requested_current_angle = correct_req_current_angle(current_angle + 90);
    18c0:	c5 01       	movw	r24, r10
    18c2:	86 5a       	subi	r24, 0xA6	; 166
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	09 de       	rcall	.-1006   	; 0x14da <correct_req_current_angle>
    18c8:	90 93 16 03 	sts	0x0316, r25
    18cc:	80 93 15 03 	sts	0x0315, r24
		current_mode = ROTATE_LEFT;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 10 03 	sts	0x0310, r24
    18d6:	0e c0       	rjmp	.+28     	; 0x18f4 <check_if_junction_and_keep_right+0x12a>
	}
	// dead-end, rotate 180*.
	else {
		addNode(false,false,false, false);
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <addNode>
		startTurnAround(current_angle);
    18e4:	c5 01       	movw	r24, r10
    18e6:	75 de       	rcall	.-790    	; 0x15d2 <startTurnAround>
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <check_if_junction_and_keep_right+0x12a>
		// The robot needs to find the center of the square before it starts rotating.
		addNode(partly_open_left, open_right, open_front, false);
		requested_vertical_value = distance + 18.5;
		current_mode = ENTER_MID_BEFORE_ROTATING_RIGHT;
	}
	else if(open_front) {
    18ea:	01 2b       	or	r16, r17
    18ec:	19 f3       	breq	.-58     	; 0x18b4 <check_if_junction_and_keep_right+0xea>
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <check_if_junction_and_keep_right+0x12a>
    18f0:	01 2b       	or	r16, r17
    18f2:	91 f3       	breq	.-28     	; 0x18d8 <check_if_junction_and_keep_right+0x10e>
	// dead-end, rotate 180*.
	else {
		addNode(false,false,false, false);
		startTurnAround(current_angle);
	}
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	7f 90       	pop	r7
    1916:	6f 90       	pop	r6
    1918:	5f 90       	pop	r5
    191a:	4f 90       	pop	r4
    191c:	3f 90       	pop	r3
    191e:	2f 90       	pop	r2
    1920:	08 95       	ret

00001922 <corridor_robot_skewness>:
	//// If there aren't any walls on either side, we cannot regulate at all :(
	//else{
		//result = 0;
	//}
	//
	if((A + B < 60) && (C + D < 60)){
    1922:	fc 01       	movw	r30, r24
    1924:	e6 0f       	add	r30, r22
    1926:	f7 1f       	adc	r31, r23
    1928:	fc 97       	sbiw	r30, 0x3c	; 60
    192a:	9c f4       	brge	.+38     	; 0x1952 <corridor_robot_skewness+0x30>
    192c:	fa 01       	movw	r30, r20
    192e:	e2 0f       	add	r30, r18
    1930:	f3 1f       	adc	r31, r19
    1932:	fc 97       	sbiw	r30, 0x3c	; 60
    1934:	74 f4       	brge	.+28     	; 0x1952 <corridor_robot_skewness+0x30>
		int left_len_diff = A-C;
    1936:	84 1b       	sub	r24, r20
    1938:	95 0b       	sbc	r25, r21
		int right_len_diff = D-B;
    193a:	26 1b       	sub	r18, r22
    193c:	37 0b       	sbc	r19, r23
			
		result = (left_len_diff + right_len_diff) / 2;		
    193e:	28 0f       	add	r18, r24
    1940:	39 1f       	adc	r19, r25
    1942:	33 23       	and	r19, r19
    1944:	14 f4       	brge	.+4      	; 0x194a <corridor_robot_skewness+0x28>
    1946:	2f 5f       	subi	r18, 0xFF	; 255
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	c9 01       	movw	r24, r18
    194c:	95 95       	asr	r25
    194e:	87 95       	ror	r24
	//// If there aren't any walls on either side, we cannot regulate at all :(
	//else{
		//result = 0;
	//}
	//
	if((A + B < 60) && (C + D < 60)){
    1950:	08 95       	ret
		int right_len_diff = D-B;
			
		result = (left_len_diff + right_len_diff) / 2;		
	}
	else{
		if((A > IR_threshold) && (B > IR_threshold)){
    1952:	e0 91 04 01 	lds	r30, 0x0104
    1956:	f0 91 05 01 	lds	r31, 0x0105
    195a:	e8 17       	cp	r30, r24
    195c:	f9 07       	cpc	r31, r25
    195e:	3c f4       	brge	.+14     	; 0x196e <corridor_robot_skewness+0x4c>
    1960:	e0 91 04 01 	lds	r30, 0x0104
    1964:	f0 91 05 01 	lds	r31, 0x0105
    1968:	e6 17       	cp	r30, r22
    196a:	f7 07       	cpc	r31, r23
    196c:	c4 f0       	brlt	.+48     	; 0x199e <corridor_robot_skewness+0x7c>
			result = 0;
		}	
		else if(A < B){
    196e:	86 17       	cp	r24, r22
    1970:	97 07       	cpc	r25, r23
    1972:	54 f4       	brge	.+20     	; 0x1988 <corridor_robot_skewness+0x66>
			if (C < IR_threshold){
    1974:	20 91 04 01 	lds	r18, 0x0104
    1978:	30 91 05 01 	lds	r19, 0x0105
    197c:	42 17       	cp	r20, r18
    197e:	53 07       	cpc	r21, r19
    1980:	8c f4       	brge	.+34     	; 0x19a4 <corridor_robot_skewness+0x82>
				result = A - C;
    1982:	84 1b       	sub	r24, r20
    1984:	95 0b       	sbc	r25, r21
    1986:	08 95       	ret
			else{
				result = 0;
			}
		}
		else{
			if ( D < IR_threshold){
    1988:	80 91 04 01 	lds	r24, 0x0104
    198c:	90 91 05 01 	lds	r25, 0x0105
    1990:	28 17       	cp	r18, r24
    1992:	39 07       	cpc	r19, r25
    1994:	54 f4       	brge	.+20     	; 0x19aa <corridor_robot_skewness+0x88>
				result = D - B;
    1996:	c9 01       	movw	r24, r18
    1998:	86 1b       	sub	r24, r22
    199a:	97 0b       	sbc	r25, r23
    199c:	08 95       	ret
			
		result = (left_len_diff + right_len_diff) / 2;		
	}
	else{
		if((A > IR_threshold) && (B > IR_threshold)){
			result = 0;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	08 95       	ret
		else if(A < B){
			if (C < IR_threshold){
				result = A - C;
			}
			else{
				result = 0;
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	08 95       	ret
		else{
			if ( D < IR_threshold){
				result = D - B;
			}
			else{
				result = 0;
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}	
	
	return result;
}
    19ae:	08 95       	ret

000019b0 <corridor_side_position>:
	//Calculate the robots distance from the middle of the corridor.
	//If negative, the robot is to the left of the middle of the corridor.
	//If positive, the robot is to the right of the middle of the corridor.
	int result;
		
	if(A + B < 60 && C+D < 60){
    19b0:	fc 01       	movw	r30, r24
    19b2:	e6 0f       	add	r30, r22
    19b4:	f7 1f       	adc	r31, r23
    19b6:	fc 97       	sbiw	r30, 0x3c	; 60
    19b8:	44 f5       	brge	.+80     	; 0x1a0a <corridor_side_position+0x5a>
    19ba:	fa 01       	movw	r30, r20
    19bc:	e2 0f       	add	r30, r18
    19be:	f3 1f       	adc	r31, r19
    19c0:	fc 97       	sbiw	r30, 0x3c	; 60
    19c2:	cc f4       	brge	.+50     	; 0x19f6 <corridor_side_position+0x46>
		// If we have walls on both sides we can regulate with both
		int dist_from_mid = (A-D)/2;
    19c4:	82 1b       	sub	r24, r18
    19c6:	93 0b       	sbc	r25, r19
    19c8:	9c 01       	movw	r18, r24
    19ca:	12 f4       	brpl	.+4      	; 0x19d0 <corridor_side_position+0x20>
    19cc:	2f 5f       	subi	r18, 0xFF	; 255
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255
    19d0:	c9 01       	movw	r24, r18
    19d2:	95 95       	asr	r25
    19d4:	87 95       	ror	r24
		int dist_from_mid_2 = (C-B)/2;
    19d6:	46 1b       	sub	r20, r22
    19d8:	57 0b       	sbc	r21, r23
    19da:	9a 01       	movw	r18, r20
    19dc:	12 f4       	brpl	.+4      	; 0x19e2 <corridor_side_position+0x32>
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	35 95       	asr	r19
    19e4:	27 95       	ror	r18
			
		result = (dist_from_mid + dist_from_mid_2) /2;		
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	99 23       	and	r25, r25
    19ec:	0c f4       	brge	.+2      	; 0x19f0 <corridor_side_position+0x40>
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	95 95       	asr	r25
    19f2:	87 95       	ror	r24
	//Calculate the robots distance from the middle of the corridor.
	//If negative, the robot is to the left of the middle of the corridor.
	//If positive, the robot is to the right of the middle of the corridor.
	int result;
		
	if(A + B < 60 && C+D < 60){
    19f4:	08 95       	ret
		else if((B > IR_threshold || D > IR_threshold) && A < IR_threshold && C < IR_threshold){
			result = (A-20)/2;
		}
		*/
		if (A+B < 60){
			result = (A-B)/2;
    19f6:	9c 01       	movw	r18, r24
    19f8:	26 1b       	sub	r18, r22
    19fa:	37 0b       	sbc	r19, r23
    19fc:	c9 01       	movw	r24, r18
    19fe:	99 23       	and	r25, r25
    1a00:	0c f4       	brge	.+2      	; 0x1a04 <corridor_side_position+0x54>
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	95 95       	asr	r25
    1a06:	87 95       	ror	r24
    1a08:	08 95       	ret
		}
		else if (C+D < 60){
    1a0a:	fa 01       	movw	r30, r20
    1a0c:	e2 0f       	add	r30, r18
    1a0e:	f3 1f       	adc	r31, r19
    1a10:	fc 97       	sbiw	r30, 0x3c	; 60
    1a12:	4c f4       	brge	.+18     	; 0x1a26 <corridor_side_position+0x76>
			result = (C-D)/2;
    1a14:	42 1b       	sub	r20, r18
    1a16:	53 0b       	sbc	r21, r19
    1a18:	ca 01       	movw	r24, r20
    1a1a:	99 23       	and	r25, r25
    1a1c:	0c f4       	brge	.+2      	; 0x1a20 <corridor_side_position+0x70>
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	95 95       	asr	r25
    1a22:	87 95       	ror	r24
    1a24:	08 95       	ret
		}
		else if((A > IR_threshold) && (B > IR_threshold)){
    1a26:	20 91 04 01 	lds	r18, 0x0104
    1a2a:	30 91 05 01 	lds	r19, 0x0105
    1a2e:	28 17       	cp	r18, r24
    1a30:	39 07       	cpc	r19, r25
    1a32:	3c f4       	brge	.+14     	; 0x1a42 <corridor_side_position+0x92>
    1a34:	20 91 04 01 	lds	r18, 0x0104
    1a38:	30 91 05 01 	lds	r19, 0x0105
    1a3c:	26 17       	cp	r18, r22
    1a3e:	37 07       	cpc	r19, r23
    1a40:	c4 f0       	brlt	.+48     	; 0x1a72 <corridor_side_position+0xc2>
			result = 0;
		}
		else if(A < B){
    1a42:	86 17       	cp	r24, r22
    1a44:	97 07       	cpc	r25, r23
    1a46:	54 f4       	brge	.+20     	; 0x1a5c <corridor_side_position+0xac>
			result = (A-20)/2;
    1a48:	9c 01       	movw	r18, r24
    1a4a:	24 51       	subi	r18, 0x14	; 20
    1a4c:	31 09       	sbc	r19, r1
    1a4e:	c9 01       	movw	r24, r18
    1a50:	99 23       	and	r25, r25
    1a52:	0c f4       	brge	.+2      	; 0x1a56 <corridor_side_position+0xa6>
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	95 95       	asr	r25
    1a58:	87 95       	ror	r24
    1a5a:	08 95       	ret
		}
		else{
			result = (20-B)/2;
    1a5c:	24 e1       	ldi	r18, 0x14	; 20
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	26 1b       	sub	r18, r22
    1a62:	37 0b       	sbc	r19, r23
    1a64:	c9 01       	movw	r24, r18
    1a66:	99 23       	and	r25, r25
    1a68:	0c f4       	brge	.+2      	; 0x1a6c <corridor_side_position+0xbc>
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	95 95       	asr	r25
    1a6e:	87 95       	ror	r24
    1a70:	08 95       	ret
		}
		else if (C+D < 60){
			result = (C-D)/2;
		}
		else if((A > IR_threshold) && (B > IR_threshold)){
			result = 0;
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
			result = (20-B)/2;
		}		
	}	
	
	return result;	
    1a76:	08 95       	ret

00001a78 <driveForwardPD>:
int IRBR;
int IRBL;*/


// Drive forward with PD-regulation
void driveForwardPD(){
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
	 double change = reglering(IRFL, IRFR, IRBL, IRBR);
    1a84:	20 91 11 01 	lds	r18, 0x0111
    1a88:	30 91 12 01 	lds	r19, 0x0112
    1a8c:	40 91 47 01 	lds	r20, 0x0147
    1a90:	50 91 48 01 	lds	r21, 0x0148
    1a94:	60 91 19 01 	lds	r22, 0x0119
    1a98:	70 91 1a 01 	lds	r23, 0x011A
    1a9c:	80 91 45 01 	lds	r24, 0x0145
    1aa0:	90 91 46 01 	lds	r25, 0x0146
    1aa4:	6e dc       	rcall	.-1828   	; 0x1382 <reglering>
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	99 0f       	add	r25, r25
    1aac:	88 0b       	sbc	r24, r24
    1aae:	99 0b       	sbc	r25, r25
    1ab0:	86 d3       	rcall	.+1804   	; 0x21be <__floatsisf>
    1ab2:	6b 01       	movw	r12, r22
    1ab4:	7c 01       	movw	r14, r24
	 displayBinaryNumber(change,8);
    1ab6:	68 e0       	ldi	r22, 0x08	; 8
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	ce 01       	movw	r24, r28
    1abc:	0e 94 be 01 	call	0x37c	; 0x37c <displayBinaryNumber>
	 //drive_general(RIGHT,LEFT);
	 if(change < 0){			 
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	b6 01       	movw	r22, r12
    1aca:	42 d3       	rcall	.+1668   	; 0x2150 <__cmpsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	0c f0       	brlt	.+2      	; 0x1ad2 <driveForwardPD+0x5a>
    1ad0:	37 c0       	rjmp	.+110    	; 0x1b40 <driveForwardPD+0xc8>
		 if (defaultSpeed - change > 255){
    1ad2:	60 91 4b 01 	lds	r22, 0x014B
    1ad6:	70 91 4c 01 	lds	r23, 0x014C
    1ada:	07 2e       	mov	r0, r23
    1adc:	00 0c       	add	r0, r0
    1ade:	88 0b       	sbc	r24, r24
    1ae0:	99 0b       	sbc	r25, r25
    1ae2:	6d d3       	rcall	.+1754   	; 0x21be <__floatsisf>
    1ae4:	a7 01       	movw	r20, r14
    1ae6:	96 01       	movw	r18, r12
    1ae8:	ce d2       	rcall	.+1436   	; 0x2086 <__subsf3>
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	53 e4       	ldi	r21, 0x43	; 67
    1af2:	15 d4       	rcall	.+2090   	; 0x231e <__gesf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	6c f4       	brge	.+26     	; 0x1b12 <driveForwardPD+0x9a>
			 change = defaultSpeed - 255;
    1af8:	60 91 4b 01 	lds	r22, 0x014B
    1afc:	70 91 4c 01 	lds	r23, 0x014C
    1b00:	6f 5f       	subi	r22, 0xFF	; 255
    1b02:	71 09       	sbc	r23, r1
    1b04:	07 2e       	mov	r0, r23
    1b06:	00 0c       	add	r0, r0
    1b08:	88 0b       	sbc	r24, r24
    1b0a:	99 0b       	sbc	r25, r25
    1b0c:	58 d3       	rcall	.+1712   	; 0x21be <__floatsisf>
    1b0e:	6b 01       	movw	r12, r22
    1b10:	7c 01       	movw	r14, r24
		 }	 
		
		 drive_general(defaultSpeed+change,defaultSpeed); //drive_general(defaultSpeed,defaultSpeed-change);
    1b12:	c0 91 4b 01 	lds	r28, 0x014B
    1b16:	d0 91 4c 01 	lds	r29, 0x014C
    1b1a:	60 91 4b 01 	lds	r22, 0x014B
    1b1e:	70 91 4c 01 	lds	r23, 0x014C
    1b22:	07 2e       	mov	r0, r23
    1b24:	00 0c       	add	r0, r0
    1b26:	88 0b       	sbc	r24, r24
    1b28:	99 0b       	sbc	r25, r25
    1b2a:	49 d3       	rcall	.+1682   	; 0x21be <__floatsisf>
    1b2c:	a7 01       	movw	r20, r14
    1b2e:	96 01       	movw	r18, r12
    1b30:	ab d2       	rcall	.+1366   	; 0x2088 <__addsf3>
    1b32:	12 d3       	rcall	.+1572   	; 0x2158 <__fixsfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	be 01       	movw	r22, r28
    1b3a:	0e 94 29 02 	call	0x452	; 0x452 <drive_general>
    1b3e:	36 c0       	rjmp	.+108    	; 0x1bac <driveForwardPD+0x134>
	 }
	 else{
		 if (change+defaultSpeed > 255){
    1b40:	60 91 4b 01 	lds	r22, 0x014B
    1b44:	70 91 4c 01 	lds	r23, 0x014C
    1b48:	07 2e       	mov	r0, r23
    1b4a:	00 0c       	add	r0, r0
    1b4c:	88 0b       	sbc	r24, r24
    1b4e:	99 0b       	sbc	r25, r25
    1b50:	36 d3       	rcall	.+1644   	; 0x21be <__floatsisf>
    1b52:	a7 01       	movw	r20, r14
    1b54:	96 01       	movw	r18, r12
    1b56:	98 d2       	rcall	.+1328   	; 0x2088 <__addsf3>
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	de d3       	rcall	.+1980   	; 0x231e <__gesf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	7c f4       	brge	.+30     	; 0x1b84 <driveForwardPD+0x10c>
			 change = 255-defaultSpeed;
    1b66:	80 91 4b 01 	lds	r24, 0x014B
    1b6a:	90 91 4c 01 	lds	r25, 0x014C
    1b6e:	6f ef       	ldi	r22, 0xFF	; 255
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	68 1b       	sub	r22, r24
    1b74:	79 0b       	sbc	r23, r25
    1b76:	07 2e       	mov	r0, r23
    1b78:	00 0c       	add	r0, r0
    1b7a:	88 0b       	sbc	r24, r24
    1b7c:	99 0b       	sbc	r25, r25
    1b7e:	1f d3       	rcall	.+1598   	; 0x21be <__floatsisf>
    1b80:	6b 01       	movw	r12, r22
    1b82:	7c 01       	movw	r14, r24
		 } 
		 drive_general(defaultSpeed,defaultSpeed-change); //drive_general(defaultSpeed+change,defaultSpeed);
    1b84:	60 91 4b 01 	lds	r22, 0x014B
    1b88:	70 91 4c 01 	lds	r23, 0x014C
    1b8c:	c0 91 4b 01 	lds	r28, 0x014B
    1b90:	d0 91 4c 01 	lds	r29, 0x014C
    1b94:	07 2e       	mov	r0, r23
    1b96:	00 0c       	add	r0, r0
    1b98:	88 0b       	sbc	r24, r24
    1b9a:	99 0b       	sbc	r25, r25
    1b9c:	10 d3       	rcall	.+1568   	; 0x21be <__floatsisf>
    1b9e:	a7 01       	movw	r20, r14
    1ba0:	96 01       	movw	r18, r12
    1ba2:	71 d2       	rcall	.+1250   	; 0x2086 <__subsf3>
    1ba4:	d9 d2       	rcall	.+1458   	; 0x2158 <__fixsfsi>
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	0e 94 29 02 	call	0x452	; 0x452 <drive_general>
	 }
}
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <main>:

int main(void)
{	
	init_motor_timers();
    1bba:	0e 94 58 02 	call	0x4b0	; 0x4b0 <init_motor_timers>
	initDistanceTimer();
    1bbe:	37 d2       	rcall	.+1134   	; 0x202e <initDistanceTimer>
	init_gripping_claw_timer();
    1bc0:	0e 94 09 02 	call	0x412	; 0x412 <init_gripping_claw_timer>
	initLabyrinthMemory();
    1bc4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initLabyrinthMemory>
	
	
	TWIdata = "000";
    1bc8:	86 e0       	ldi	r24, 0x06	; 6
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	90 93 16 01 	sts	0x0116, r25
    1bd0:	80 93 15 01 	sts	0x0115, r24
	initBuss(0b00000010);
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	0e 94 2a 01 	call	0x254	; 0x254 <initBuss>
	goingIn = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	90 93 1f 03 	sts	0x031F, r25
    1be2:	80 93 1e 03 	sts	0x031E, r24
	sei();	//global enable interrupts
    1be6:	78 94       	sei
	
	stop();
    1be8:	0e 94 25 02 	call	0x44a	; 0x44a <stop>
	//bestPathLength = 6;
	//transformToDirectionList();
	//bestDirectionPath[0] = right;
	//bestDirectionPath[1] = up;
	//bestDirectionPath[2] = left;
	currentStepInPath = 0;
    1bec:	10 92 54 01 	sts	0x0154, r1
    1bf0:	10 92 53 01 	sts	0x0153, r1
	labyrinthmode = lookingForObject;
    1bf4:	10 92 51 02 	sts	0x0251, r1
	//grab_object(250);
	//_delay_ms(1000);
	//grab_object(350);
	//while(1);
	
	justFoundTape = false;
    1bf8:	10 92 4e 01 	sts	0x014E, r1
	
	int timeToTravelSquare = 175;
	current_mode = STRAIGHT;
    1bfc:	85 e0       	ldi	r24, 0x05	; 5
    1bfe:	80 93 10 03 	sts	0x0310, r24
    1c02:	2f e6       	ldi	r18, 0x6F	; 111
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	9d e2       	ldi	r25, 0x2D	; 45
    1c08:	21 50       	subi	r18, 0x01	; 1
    1c0a:	80 40       	sbci	r24, 0x00	; 0
    1c0c:	90 40       	sbci	r25, 0x00	; 0
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <main+0x4e>
    1c10:	00 c0       	rjmp	.+0      	; 0x1c12 <main+0x58>
    1c12:	00 00       	nop
				{			
					case GRAB:
						stop();
						//grab_object(200);
						_delay_ms(200);
						labyrinthmode = goingOut;
    1c14:	d4 e0       	ldi	r29, 0x04	; 4
						findBestPath(start);
						//bestDirectionPath[0] = down;
						//bestDirectionPath[1] = down;
						//bestDirectionPath[2] = left;
						current_mode = STRAIGHT;
    1c16:	c5 e0       	ldi	r28, 0x05	; 5
	current_mode = STRAIGHT;
	
	_delay_ms(1000);
	while(1)
    {			
		if(startbutton){
    1c18:	80 91 41 01 	lds	r24, 0x0141
    1c1c:	90 91 42 01 	lds	r25, 0x0142
    1c20:	89 2b       	or	r24, r25
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <main+0x6c>
    1c24:	71 c1       	rjmp	.+738    	; 0x1f08 <main+0x34e>
			//drive_forward(defaultSpeed);
			if (mode){
    1c26:	80 91 1b 01 	lds	r24, 0x011B
    1c2a:	90 91 1c 01 	lds	r25, 0x011C
    1c2e:	89 2b       	or	r24, r25
    1c30:	39 f0       	breq	.+14     	; 0x1c40 <main+0x86>
				convertToMotorData(TWIdata);
    1c32:	80 91 15 01 	lds	r24, 0x0115
    1c36:	90 91 16 01 	lds	r25, 0x0116
    1c3a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <convertToMotorData>
    1c3e:	ec cf       	rjmp	.-40     	; 0x1c18 <main+0x5e>
			}
			else {
				if (!objectFinder(reflex) && current_mode == STRAIGHT && labyrinthmode != goingOut){
    1c40:	80 91 43 01 	lds	r24, 0x0143
    1c44:	90 91 44 01 	lds	r25, 0x0144
    1c48:	46 db       	rcall	.-2420   	; 0x12d6 <objectFinder>
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <main+0xc0>
    1c4e:	80 91 10 03 	lds	r24, 0x0310
    1c52:	85 30       	cpi	r24, 0x05	; 5
    1c54:	91 f4       	brne	.+36     	; 0x1c7a <main+0xc0>
    1c56:	80 91 51 02 	lds	r24, 0x0251
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <main+0xc0>
					justFoundTape = true;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 4e 01 	sts	0x014E, r24
					addNode(false,false,false,true);
    1c64:	21 e0       	ldi	r18, 0x01	; 1
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <addNode>
					// If we have explored the whole labyrinth, take the object. Otherwise, keep exploring.
					//if (!checkUnexploredNodes()){
						current_mode = TAPE;
    1c70:	10 92 10 03 	sts	0x0310, r1
						moveInLabyrinth(true);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <moveInLabyrinth>
						//startTurnAround(currentAngle);
						//labyrinthmode = exploreWithTurningRight;
					//}
				}
				
				switch(current_mode)
    1c7a:	e0 91 10 03 	lds	r30, 0x0310
    1c7e:	8e 2f       	mov	r24, r30
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	8c 30       	cpi	r24, 0x0C	; 12
    1c84:	91 05       	cpc	r25, r1
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <main+0xd0>
    1c88:	cc c0       	rjmp	.+408    	; 0x1e22 <main+0x268>
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	e6 5a       	subi	r30, 0xA6	; 166
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	ad c3       	rjmp	.+1882   	; 0x23ec <__tablejump2__>
				{			
					case GRAB:
						stop();
    1c92:	0e 94 25 02 	call	0x44a	; 0x44a <stop>
    1c96:	2f ea       	ldi	r18, 0xAF	; 175
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	99 e0       	ldi	r25, 0x09	; 9
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	80 40       	sbci	r24, 0x00	; 0
    1ca0:	90 40       	sbci	r25, 0x00	; 0
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <main+0xe2>
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <main+0xec>
    1ca6:	00 00       	nop
						//grab_object(200);
						_delay_ms(200);
						labyrinthmode = goingOut;
    1ca8:	d0 93 51 02 	sts	0x0251, r29
						findBestPath(start);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	2c d8       	rcall	.-4008   	; 0xd08 <findBestPath>
						//bestDirectionPath[0] = down;
						//bestDirectionPath[1] = down;
						//bestDirectionPath[2] = left;
						current_mode = STRAIGHT;
    1cb0:	c0 93 10 03 	sts	0x0310, r28
						currentStepInPath = 0;
    1cb4:	10 92 54 01 	sts	0x0154, r1
    1cb8:	10 92 53 01 	sts	0x0153, r1
						break;
    1cbc:	b2 c0       	rjmp	.+356    	; 0x1e22 <main+0x268>
				
					case TAPE:
						objectCentering(reflex);
    1cbe:	80 91 43 01 	lds	r24, 0x0143
    1cc2:	90 91 44 01 	lds	r25, 0x0144
    1cc6:	12 db       	rcall	.-2524   	; 0x12ec <objectCentering>
						//stop();
						break;
    1cc8:	ac c0       	rjmp	.+344    	; 0x1e22 <main+0x268>
					case ROTATE_LEFT:
						//grab_object(200);
						rotating_left(currentAngle);
    1cca:	80 91 1d 01 	lds	r24, 0x011D
    1cce:	90 91 1e 01 	lds	r25, 0x011E
    1cd2:	82 db       	rcall	.-2300   	; 0x13d8 <rotating_left>
						break;
    1cd4:	a6 c0       	rjmp	.+332    	; 0x1e22 <main+0x268>
			
					case ROTATE_RIGHT:
						//grab_object(200);
						rotating_right(currentAngle);
    1cd6:	80 91 1d 01 	lds	r24, 0x011D
    1cda:	90 91 1e 01 	lds	r25, 0x011E
    1cde:	a6 db       	rcall	.-2228   	; 0x142c <rotating_right>
						break;
    1ce0:	a0 c0       	rjmp	.+320    	; 0x1e22 <main+0x268>
				
					case ENTER_MID_BEFORE_ROTATING_RIGHT:
						//grab_object(300);
						enter_mid_before_rotating_right(timeTraveled, currentAngle,distanceFront);
    1ce2:	20 91 13 01 	lds	r18, 0x0113
    1ce6:	30 91 14 01 	lds	r19, 0x0114
    1cea:	40 91 1d 01 	lds	r20, 0x011D
    1cee:	50 91 1e 01 	lds	r21, 0x011E
    1cf2:	60 91 11 03 	lds	r22, 0x0311
    1cf6:	70 91 12 03 	lds	r23, 0x0312
    1cfa:	80 91 13 03 	lds	r24, 0x0313
    1cfe:	90 91 14 03 	lds	r25, 0x0314
    1d02:	fb db       	rcall	.-2058   	; 0x14fa <enter_mid_before_rotating_right>
						driveForwardPD();
    1d04:	b9 de       	rcall	.-654    	; 0x1a78 <driveForwardPD>
						break;
    1d06:	8d c0       	rjmp	.+282    	; 0x1e22 <main+0x268>
				
					case ENTER_MID_BEFORE_ROTATING_LEFT:
						//grab_object(300);
						enter_mid_before_rotating_left(timeTraveled, currentAngle, distanceFront);
    1d08:	20 91 13 01 	lds	r18, 0x0113
    1d0c:	30 91 14 01 	lds	r19, 0x0114
    1d10:	40 91 1d 01 	lds	r20, 0x011D
    1d14:	50 91 1e 01 	lds	r21, 0x011E
    1d18:	60 91 11 03 	lds	r22, 0x0311
    1d1c:	70 91 12 03 	lds	r23, 0x0312
    1d20:	80 91 13 03 	lds	r24, 0x0313
    1d24:	90 91 14 03 	lds	r25, 0x0314
    1d28:	1e dc       	rcall	.-1988   	; 0x1566 <enter_mid_before_rotating_left>
						driveForwardPD();
    1d2a:	a6 de       	rcall	.-692    	; 0x1a78 <driveForwardPD>
						break;
    1d2c:	7a c0       	rjmp	.+244    	; 0x1e22 <main+0x268>
				
					case EXIT_JUNCTION_LEFT:
						exit_junction_left(IRFL, IRBL);
    1d2e:	60 91 47 01 	lds	r22, 0x0147
    1d32:	70 91 48 01 	lds	r23, 0x0148
    1d36:	80 91 45 01 	lds	r24, 0x0145
    1d3a:	90 91 46 01 	lds	r25, 0x0146
    1d3e:	13 dd       	rcall	.-1498   	; 0x1766 <exit_junction_left>
						driveForwardPD();
    1d40:	9b de       	rcall	.-714    	; 0x1a78 <driveForwardPD>
						break;
    1d42:	6f c0       	rjmp	.+222    	; 0x1e22 <main+0x268>
				
					case EXIT_JUNCTION_RIGHT:
						exit_junction_right(IRFR, IRBR);
    1d44:	60 91 11 01 	lds	r22, 0x0111
    1d48:	70 91 12 01 	lds	r23, 0x0112
    1d4c:	80 91 19 01 	lds	r24, 0x0119
    1d50:	90 91 1a 01 	lds	r25, 0x011A
    1d54:	10 dd       	rcall	.-1504   	; 0x1776 <exit_junction_right>
						driveForwardPD();
    1d56:	90 de       	rcall	.-736    	; 0x1a78 <driveForwardPD>
						break;	
    1d58:	64 c0       	rjmp	.+200    	; 0x1e22 <main+0x268>
				
					case TURN_AROUND:
						//stop();
						turn_around(currentAngle);
    1d5a:	80 91 1d 01 	lds	r24, 0x011D
    1d5e:	90 91 1e 01 	lds	r25, 0x011E
    1d62:	8e db       	rcall	.-2276   	; 0x1480 <turn_around>
						break;
    1d64:	5e c0       	rjmp	.+188    	; 0x1e22 <main+0x268>
				
					case STRAIGHT:
						if (labyrinthmode == goingOut){
    1d66:	80 91 51 02 	lds	r24, 0x0251
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	11 f5       	brne	.+68     	; 0x1db2 <main+0x1f8>
							check_if_junction_and_follow_path(IRFR, IRBR, IRFL, IRBL, distanceFront, timeTraveled, currentAngle);
    1d6e:	a0 90 1d 01 	lds	r10, 0x011D
    1d72:	b0 90 1e 01 	lds	r11, 0x011E
    1d76:	c0 90 11 03 	lds	r12, 0x0311
    1d7a:	d0 90 12 03 	lds	r13, 0x0312
    1d7e:	e0 90 13 03 	lds	r14, 0x0313
    1d82:	f0 90 14 03 	lds	r15, 0x0314
    1d86:	00 91 13 01 	lds	r16, 0x0113
    1d8a:	10 91 14 01 	lds	r17, 0x0114
    1d8e:	20 91 47 01 	lds	r18, 0x0147
    1d92:	30 91 48 01 	lds	r19, 0x0148
    1d96:	40 91 45 01 	lds	r20, 0x0145
    1d9a:	50 91 46 01 	lds	r21, 0x0146
    1d9e:	60 91 11 01 	lds	r22, 0x0111
    1da2:	70 91 12 01 	lds	r23, 0x0112
    1da6:	80 91 19 01 	lds	r24, 0x0119
    1daa:	90 91 1a 01 	lds	r25, 0x011A
    1dae:	31 dc       	rcall	.-1950   	; 0x1612 <check_if_junction_and_follow_path>
    1db0:	21 c0       	rjmp	.+66     	; 0x1df4 <main+0x23a>
						}
						else{
							check_if_junction_and_keep_right(IRFR, IRBR, IRFL, IRBL, distanceFront, timeTraveled, currentAngle);
    1db2:	a0 90 1d 01 	lds	r10, 0x011D
    1db6:	b0 90 1e 01 	lds	r11, 0x011E
    1dba:	c0 90 11 03 	lds	r12, 0x0311
    1dbe:	d0 90 12 03 	lds	r13, 0x0312
    1dc2:	e0 90 13 03 	lds	r14, 0x0313
    1dc6:	f0 90 14 03 	lds	r15, 0x0314
    1dca:	00 91 13 01 	lds	r16, 0x0113
    1dce:	10 91 14 01 	lds	r17, 0x0114
    1dd2:	20 91 47 01 	lds	r18, 0x0147
    1dd6:	30 91 48 01 	lds	r19, 0x0148
    1dda:	40 91 45 01 	lds	r20, 0x0145
    1dde:	50 91 46 01 	lds	r21, 0x0146
    1de2:	60 91 11 01 	lds	r22, 0x0111
    1de6:	70 91 12 01 	lds	r23, 0x0112
    1dea:	80 91 19 01 	lds	r24, 0x0119
    1dee:	90 91 1a 01 	lds	r25, 0x011A
    1df2:	eb dc       	rcall	.-1578   	; 0x17ca <check_if_junction_and_keep_right>
						}
						driveForwardPD();
    1df4:	41 de       	rcall	.-894    	; 0x1a78 <driveForwardPD>
							//driveForwardPD();
						//}
						//else{
							//stop;
						//}
						break;
    1df6:	15 c0       	rjmp	.+42     	; 0x1e22 <main+0x268>
				
					case GO_FORWARD_IN_LEFT_JUNCTION:
						exit_junction_forward_in_left_crossing(IRFR, IRBR);
    1df8:	60 91 11 01 	lds	r22, 0x0111
    1dfc:	70 91 12 01 	lds	r23, 0x0112
    1e00:	80 91 19 01 	lds	r24, 0x0119
    1e04:	90 91 1a 01 	lds	r25, 0x011A
    1e08:	bd dc       	rcall	.-1670   	; 0x1784 <exit_junction_forward_in_left_crossing>
						driveForwardPD();
    1e0a:	36 de       	rcall	.-916    	; 0x1a78 <driveForwardPD>
						break;
    1e0c:	0a c0       	rjmp	.+20     	; 0x1e22 <main+0x268>
			
					case GO_FORWARD_IN_RIGHT_JUNCTION:
						exit_junction_forward_in_right_crossing(IRFR, IRBR);
    1e0e:	60 91 11 01 	lds	r22, 0x0111
    1e12:	70 91 12 01 	lds	r23, 0x0112
    1e16:	80 91 19 01 	lds	r24, 0x0119
    1e1a:	90 91 1a 01 	lds	r25, 0x011A
    1e1e:	b9 dc       	rcall	.-1678   	; 0x1792 <exit_junction_forward_in_right_crossing>
						driveForwardPD();
    1e20:	2b de       	rcall	.-938    	; 0x1a78 <driveForwardPD>
						break;
				}
			
				if(current_mode == STRAIGHT || current_mode == ENTER_MID_BEFORE_ROTATING_RIGHT || current_mode == EXIT_JUNCTION_LEFT || current_mode == EXIT_JUNCTION_RIGHT){
    1e22:	80 91 10 03 	lds	r24, 0x0310
    1e26:	85 30       	cpi	r24, 0x05	; 5
    1e28:	61 f0       	breq	.+24     	; 0x1e42 <main+0x288>
    1e2a:	80 91 10 03 	lds	r24, 0x0310
    1e2e:	86 30       	cpi	r24, 0x06	; 6
    1e30:	41 f0       	breq	.+16     	; 0x1e42 <main+0x288>
    1e32:	80 91 10 03 	lds	r24, 0x0310
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <main+0x288>
    1e3a:	80 91 10 03 	lds	r24, 0x0310
    1e3e:	83 30       	cpi	r24, 0x03	; 3
    1e40:	c9 f5       	brne	.+114    	; 0x1eb4 <main+0x2fa>
					startMeasuringDistance();
    1e42:	13 d1       	rcall	.+550    	; 0x206a <startMeasuringDistance>
					stopMeasuringRotateTime();
    1e44:	1d d1       	rcall	.+570    	; 0x2080 <stopMeasuringRotateTime>
					rotatedTime = 0;
    1e46:	10 92 1a 03 	sts	0x031A, r1
    1e4a:	10 92 1b 03 	sts	0x031B, r1
    1e4e:	10 92 1c 03 	sts	0x031C, r1
    1e52:	10 92 1d 03 	sts	0x031D, r1
					if (timeTraveled > timeToTravelSquare){
    1e56:	60 91 11 03 	lds	r22, 0x0311
    1e5a:	70 91 12 03 	lds	r23, 0x0312
    1e5e:	80 91 13 03 	lds	r24, 0x0313
    1e62:	90 91 14 03 	lds	r25, 0x0314
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4f e2       	ldi	r20, 0x2F	; 47
    1e6c:	53 e4       	ldi	r21, 0x43	; 67
    1e6e:	57 d2       	rcall	.+1198   	; 0x231e <__gesf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	0c f0       	brlt	.+2      	; 0x1e76 <main+0x2bc>
    1e74:	d1 ce       	rjmp	.-606    	; 0x1c18 <main+0x5e>
						moveInLabyrinth(1);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <moveInLabyrinth>
						timeTraveled -= timeToTravelSquare;
    1e7c:	60 91 11 03 	lds	r22, 0x0311
    1e80:	70 91 12 03 	lds	r23, 0x0312
    1e84:	80 91 13 03 	lds	r24, 0x0313
    1e88:	90 91 14 03 	lds	r25, 0x0314
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4f e2       	ldi	r20, 0x2F	; 47
    1e92:	53 e4       	ldi	r21, 0x43	; 67
    1e94:	f8 d0       	rcall	.+496    	; 0x2086 <__subsf3>
    1e96:	60 93 11 03 	sts	0x0311, r22
    1e9a:	70 93 12 03 	sts	0x0312, r23
    1e9e:	80 93 13 03 	sts	0x0313, r24
    1ea2:	90 93 14 03 	sts	0x0314, r25
						addNode(false,false,true,false);
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <addNode>
    1eb2:	b2 ce       	rjmp	.-668    	; 0x1c18 <main+0x5e>
					}
				}
				else if (current_mode == ROTATE_LEFT || current_mode == ROTATE_RIGHT || current_mode == TURN_AROUND){
    1eb4:	80 91 10 03 	lds	r24, 0x0310
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	41 f0       	breq	.+16     	; 0x1ecc <main+0x312>
    1ebc:	80 91 10 03 	lds	r24, 0x0310
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	21 f0       	breq	.+8      	; 0x1ecc <main+0x312>
    1ec4:	80 91 10 03 	lds	r24, 0x0310
    1ec8:	88 30       	cpi	r24, 0x08	; 8
    1eca:	59 f4       	brne	.+22     	; 0x1ee2 <main+0x328>
					startMeasuringRotateTime();
    1ecc:	d5 d0       	rcall	.+426    	; 0x2078 <startMeasuringRotateTime>
					stopMeasuringDistance();
    1ece:	d1 d0       	rcall	.+418    	; 0x2072 <stopMeasuringDistance>
					timeTraveled = 0;					
    1ed0:	10 92 11 03 	sts	0x0311, r1
    1ed4:	10 92 12 03 	sts	0x0312, r1
    1ed8:	10 92 13 03 	sts	0x0313, r1
    1edc:	10 92 14 03 	sts	0x0314, r1
    1ee0:	9b ce       	rjmp	.-714    	; 0x1c18 <main+0x5e>
				}	
				else{
					stopMeasuringDistance();
    1ee2:	c7 d0       	rcall	.+398    	; 0x2072 <stopMeasuringDistance>
					timeTraveled = 0;
    1ee4:	10 92 11 03 	sts	0x0311, r1
    1ee8:	10 92 12 03 	sts	0x0312, r1
    1eec:	10 92 13 03 	sts	0x0313, r1
    1ef0:	10 92 14 03 	sts	0x0314, r1
					stopMeasuringRotateTime();
    1ef4:	c5 d0       	rcall	.+394    	; 0x2080 <stopMeasuringRotateTime>
					rotatedTime = 0;
    1ef6:	10 92 1a 03 	sts	0x031A, r1
    1efa:	10 92 1b 03 	sts	0x031B, r1
    1efe:	10 92 1c 03 	sts	0x031C, r1
    1f02:	10 92 1d 03 	sts	0x031D, r1
    1f06:	88 ce       	rjmp	.-752    	; 0x1c18 <main+0x5e>
			}*/
			}
		}
		else
		{
			stop();
    1f08:	0e 94 25 02 	call	0x44a	; 0x44a <stop>
    1f0c:	85 ce       	rjmp	.-758    	; 0x1c18 <main+0x5e>

00001f0e <__vector_32>:

bool measure = false;
bool rotating = false;

// This happens about 100 times per second
ISR(TIMER3_COMPA_vect){
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	0b b6       	in	r0, 0x3b	; 59
    1f1a:	0f 92       	push	r0
    1f1c:	2f 93       	push	r18
    1f1e:	3f 93       	push	r19
    1f20:	4f 93       	push	r20
    1f22:	5f 93       	push	r21
    1f24:	6f 93       	push	r22
    1f26:	7f 93       	push	r23
    1f28:	8f 93       	push	r24
    1f2a:	9f 93       	push	r25
    1f2c:	af 93       	push	r26
    1f2e:	bf 93       	push	r27
    1f30:	ef 93       	push	r30
    1f32:	ff 93       	push	r31
	//double distanceChange = currentSpeed / 255;
	if (measure)
    1f34:	80 91 10 01 	lds	r24, 0x0110
    1f38:	88 23       	and	r24, r24
    1f3a:	79 f1       	breq	.+94     	; 0x1f9a <__vector_32+0x8c>
	{
		if(labyrinthmode != goingOut){
    1f3c:	80 91 51 02 	lds	r24, 0x0251
    1f40:	84 30       	cpi	r24, 0x04	; 4
    1f42:	b1 f0       	breq	.+44     	; 0x1f70 <__vector_32+0x62>
			timeTraveled += 1;
    1f44:	60 91 11 03 	lds	r22, 0x0311
    1f48:	70 91 12 03 	lds	r23, 0x0312
    1f4c:	80 91 13 03 	lds	r24, 0x0313
    1f50:	90 91 14 03 	lds	r25, 0x0314
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	95 d0       	rcall	.+298    	; 0x2088 <__addsf3>
    1f5e:	60 93 11 03 	sts	0x0311, r22
    1f62:	70 93 12 03 	sts	0x0312, r23
    1f66:	80 93 13 03 	sts	0x0313, r24
    1f6a:	90 93 14 03 	sts	0x0314, r25
    1f6e:	15 c0       	rjmp	.+42     	; 0x1f9a <__vector_32+0x8c>
		}
		// This is for when the object has been taken and the robot is on its way out of the labyrinth
		else{
			timeTraveled += 0.5;
    1f70:	60 91 11 03 	lds	r22, 0x0311
    1f74:	70 91 12 03 	lds	r23, 0x0312
    1f78:	80 91 13 03 	lds	r24, 0x0313
    1f7c:	90 91 14 03 	lds	r25, 0x0314
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	7f d0       	rcall	.+254    	; 0x2088 <__addsf3>
    1f8a:	60 93 11 03 	sts	0x0311, r22
    1f8e:	70 93 12 03 	sts	0x0312, r23
    1f92:	80 93 13 03 	sts	0x0313, r24
    1f96:	90 93 14 03 	sts	0x0314, r25
		}
	}
	if(rotating){
    1f9a:	80 91 0f 01 	lds	r24, 0x010F
    1f9e:	88 23       	and	r24, r24
    1fa0:	b1 f0       	breq	.+44     	; 0x1fce <__vector_32+0xc0>
		rotatedTime += 1;
    1fa2:	60 91 1a 03 	lds	r22, 0x031A
    1fa6:	70 91 1b 03 	lds	r23, 0x031B
    1faa:	80 91 1c 03 	lds	r24, 0x031C
    1fae:	90 91 1d 03 	lds	r25, 0x031D
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	66 d0       	rcall	.+204    	; 0x2088 <__addsf3>
    1fbc:	60 93 1a 03 	sts	0x031A, r22
    1fc0:	70 93 1b 03 	sts	0x031B, r23
    1fc4:	80 93 1c 03 	sts	0x031C, r24
    1fc8:	90 93 1d 03 	sts	0x031D, r25
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <__vector_32+0xe8>
	}
	else{
		rotatedTime += 0;	
    1fce:	60 91 1a 03 	lds	r22, 0x031A
    1fd2:	70 91 1b 03 	lds	r23, 0x031B
    1fd6:	80 91 1c 03 	lds	r24, 0x031C
    1fda:	90 91 1d 03 	lds	r25, 0x031D
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	a9 01       	movw	r20, r18
    1fe4:	51 d0       	rcall	.+162    	; 0x2088 <__addsf3>
    1fe6:	60 93 1a 03 	sts	0x031A, r22
    1fea:	70 93 1b 03 	sts	0x031B, r23
    1fee:	80 93 1c 03 	sts	0x031C, r24
    1ff2:	90 93 1d 03 	sts	0x031D, r25
	}

	exiting_junction++; // Variable that's needed for keeping track of how long we've been exiting a junction	
    1ff6:	80 91 17 03 	lds	r24, 0x0317
    1ffa:	90 91 18 03 	lds	r25, 0x0318
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	90 93 18 03 	sts	0x0318, r25
    2004:	80 93 17 03 	sts	0x0317, r24
}
    2008:	ff 91       	pop	r31
    200a:	ef 91       	pop	r30
    200c:	bf 91       	pop	r27
    200e:	af 91       	pop	r26
    2010:	9f 91       	pop	r25
    2012:	8f 91       	pop	r24
    2014:	7f 91       	pop	r23
    2016:	6f 91       	pop	r22
    2018:	5f 91       	pop	r21
    201a:	4f 91       	pop	r20
    201c:	3f 91       	pop	r19
    201e:	2f 91       	pop	r18
    2020:	0f 90       	pop	r0
    2022:	0b be       	out	0x3b, r0	; 59
    2024:	0f 90       	pop	r0
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	0f 90       	pop	r0
    202a:	1f 90       	pop	r1
    202c:	18 95       	reti

0000202e <initDistanceTimer>:

void initDistanceTimer(){
	TCCR3B |= (1 << CS32) | (1 << WGM32);
    202e:	e1 e9       	ldi	r30, 0x91	; 145
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8c 60       	ori	r24, 0x0C	; 12
    2036:	80 83       	st	Z, r24
	OCR3AH = (573 >> 8);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 573;
    203e:	9d e3       	ldi	r25, 0x3D	; 61
    2040:	90 93 98 00 	sts	0x0098, r25
	TIMSK3 = (1 << 1);
    2044:	80 93 71 00 	sts	0x0071, r24
	
	timeTraveled = 0;
    2048:	10 92 11 03 	sts	0x0311, r1
    204c:	10 92 12 03 	sts	0x0312, r1
    2050:	10 92 13 03 	sts	0x0313, r1
    2054:	10 92 14 03 	sts	0x0314, r1
	rotatedTime = 0;
    2058:	10 92 1a 03 	sts	0x031A, r1
    205c:	10 92 1b 03 	sts	0x031B, r1
    2060:	10 92 1c 03 	sts	0x031C, r1
    2064:	10 92 1d 03 	sts	0x031D, r1
    2068:	08 95       	ret

0000206a <startMeasuringDistance>:
}

void startMeasuringDistance(){
	measure = true;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	80 93 10 01 	sts	0x0110, r24
    2070:	08 95       	ret

00002072 <stopMeasuringDistance>:
}

void stopMeasuringDistance(){
	measure = false;
    2072:	10 92 10 01 	sts	0x0110, r1
    2076:	08 95       	ret

00002078 <startMeasuringRotateTime>:
}

void startMeasuringRotateTime(){
	rotating = true;	
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 0f 01 	sts	0x010F, r24
    207e:	08 95       	ret

00002080 <stopMeasuringRotateTime>:
}

void stopMeasuringRotateTime(){
	rotating = false;	
    2080:	10 92 0f 01 	sts	0x010F, r1
    2084:	08 95       	ret

00002086 <__subsf3>:
    2086:	50 58       	subi	r21, 0x80	; 128

00002088 <__addsf3>:
    2088:	bb 27       	eor	r27, r27
    208a:	aa 27       	eor	r26, r26
    208c:	0e d0       	rcall	.+28     	; 0x20aa <__addsf3x>
    208e:	0d c1       	rjmp	.+538    	; 0x22aa <__fp_round>
    2090:	fe d0       	rcall	.+508    	; 0x228e <__fp_pscA>
    2092:	30 f0       	brcs	.+12     	; 0x20a0 <__addsf3+0x18>
    2094:	03 d1       	rcall	.+518    	; 0x229c <__fp_pscB>
    2096:	20 f0       	brcs	.+8      	; 0x20a0 <__addsf3+0x18>
    2098:	31 f4       	brne	.+12     	; 0x20a6 <__addsf3+0x1e>
    209a:	9f 3f       	cpi	r25, 0xFF	; 255
    209c:	11 f4       	brne	.+4      	; 0x20a2 <__addsf3+0x1a>
    209e:	1e f4       	brtc	.+6      	; 0x20a6 <__addsf3+0x1e>
    20a0:	f3 c0       	rjmp	.+486    	; 0x2288 <__fp_nan>
    20a2:	0e f4       	brtc	.+2      	; 0x20a6 <__addsf3+0x1e>
    20a4:	e0 95       	com	r30
    20a6:	e7 fb       	bst	r30, 7
    20a8:	e9 c0       	rjmp	.+466    	; 0x227c <__fp_inf>

000020aa <__addsf3x>:
    20aa:	e9 2f       	mov	r30, r25
    20ac:	0f d1       	rcall	.+542    	; 0x22cc <__fp_split3>
    20ae:	80 f3       	brcs	.-32     	; 0x2090 <__addsf3+0x8>
    20b0:	ba 17       	cp	r27, r26
    20b2:	62 07       	cpc	r22, r18
    20b4:	73 07       	cpc	r23, r19
    20b6:	84 07       	cpc	r24, r20
    20b8:	95 07       	cpc	r25, r21
    20ba:	18 f0       	brcs	.+6      	; 0x20c2 <__addsf3x+0x18>
    20bc:	71 f4       	brne	.+28     	; 0x20da <__addsf3x+0x30>
    20be:	9e f5       	brtc	.+102    	; 0x2126 <__addsf3x+0x7c>
    20c0:	27 c1       	rjmp	.+590    	; 0x2310 <__fp_zero>
    20c2:	0e f4       	brtc	.+2      	; 0x20c6 <__addsf3x+0x1c>
    20c4:	e0 95       	com	r30
    20c6:	0b 2e       	mov	r0, r27
    20c8:	ba 2f       	mov	r27, r26
    20ca:	a0 2d       	mov	r26, r0
    20cc:	0b 01       	movw	r0, r22
    20ce:	b9 01       	movw	r22, r18
    20d0:	90 01       	movw	r18, r0
    20d2:	0c 01       	movw	r0, r24
    20d4:	ca 01       	movw	r24, r20
    20d6:	a0 01       	movw	r20, r0
    20d8:	11 24       	eor	r1, r1
    20da:	ff 27       	eor	r31, r31
    20dc:	59 1b       	sub	r21, r25
    20de:	99 f0       	breq	.+38     	; 0x2106 <__addsf3x+0x5c>
    20e0:	59 3f       	cpi	r21, 0xF9	; 249
    20e2:	50 f4       	brcc	.+20     	; 0x20f8 <__addsf3x+0x4e>
    20e4:	50 3e       	cpi	r21, 0xE0	; 224
    20e6:	68 f1       	brcs	.+90     	; 0x2142 <__addsf3x+0x98>
    20e8:	1a 16       	cp	r1, r26
    20ea:	f0 40       	sbci	r31, 0x00	; 0
    20ec:	a2 2f       	mov	r26, r18
    20ee:	23 2f       	mov	r18, r19
    20f0:	34 2f       	mov	r19, r20
    20f2:	44 27       	eor	r20, r20
    20f4:	58 5f       	subi	r21, 0xF8	; 248
    20f6:	f3 cf       	rjmp	.-26     	; 0x20de <__addsf3x+0x34>
    20f8:	46 95       	lsr	r20
    20fa:	37 95       	ror	r19
    20fc:	27 95       	ror	r18
    20fe:	a7 95       	ror	r26
    2100:	f0 40       	sbci	r31, 0x00	; 0
    2102:	53 95       	inc	r21
    2104:	c9 f7       	brne	.-14     	; 0x20f8 <__addsf3x+0x4e>
    2106:	7e f4       	brtc	.+30     	; 0x2126 <__addsf3x+0x7c>
    2108:	1f 16       	cp	r1, r31
    210a:	ba 0b       	sbc	r27, r26
    210c:	62 0b       	sbc	r22, r18
    210e:	73 0b       	sbc	r23, r19
    2110:	84 0b       	sbc	r24, r20
    2112:	ba f0       	brmi	.+46     	; 0x2142 <__addsf3x+0x98>
    2114:	91 50       	subi	r25, 0x01	; 1
    2116:	a1 f0       	breq	.+40     	; 0x2140 <__addsf3x+0x96>
    2118:	ff 0f       	add	r31, r31
    211a:	bb 1f       	adc	r27, r27
    211c:	66 1f       	adc	r22, r22
    211e:	77 1f       	adc	r23, r23
    2120:	88 1f       	adc	r24, r24
    2122:	c2 f7       	brpl	.-16     	; 0x2114 <__addsf3x+0x6a>
    2124:	0e c0       	rjmp	.+28     	; 0x2142 <__addsf3x+0x98>
    2126:	ba 0f       	add	r27, r26
    2128:	62 1f       	adc	r22, r18
    212a:	73 1f       	adc	r23, r19
    212c:	84 1f       	adc	r24, r20
    212e:	48 f4       	brcc	.+18     	; 0x2142 <__addsf3x+0x98>
    2130:	87 95       	ror	r24
    2132:	77 95       	ror	r23
    2134:	67 95       	ror	r22
    2136:	b7 95       	ror	r27
    2138:	f7 95       	ror	r31
    213a:	9e 3f       	cpi	r25, 0xFE	; 254
    213c:	08 f0       	brcs	.+2      	; 0x2140 <__addsf3x+0x96>
    213e:	b3 cf       	rjmp	.-154    	; 0x20a6 <__addsf3+0x1e>
    2140:	93 95       	inc	r25
    2142:	88 0f       	add	r24, r24
    2144:	08 f0       	brcs	.+2      	; 0x2148 <__addsf3x+0x9e>
    2146:	99 27       	eor	r25, r25
    2148:	ee 0f       	add	r30, r30
    214a:	97 95       	ror	r25
    214c:	87 95       	ror	r24
    214e:	08 95       	ret

00002150 <__cmpsf2>:
    2150:	71 d0       	rcall	.+226    	; 0x2234 <__fp_cmp>
    2152:	08 f4       	brcc	.+2      	; 0x2156 <__cmpsf2+0x6>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	08 95       	ret

00002158 <__fixsfsi>:
    2158:	04 d0       	rcall	.+8      	; 0x2162 <__fixunssfsi>
    215a:	68 94       	set
    215c:	b1 11       	cpse	r27, r1
    215e:	d9 c0       	rjmp	.+434    	; 0x2312 <__fp_szero>
    2160:	08 95       	ret

00002162 <__fixunssfsi>:
    2162:	bc d0       	rcall	.+376    	; 0x22dc <__fp_splitA>
    2164:	88 f0       	brcs	.+34     	; 0x2188 <__fixunssfsi+0x26>
    2166:	9f 57       	subi	r25, 0x7F	; 127
    2168:	90 f0       	brcs	.+36     	; 0x218e <__fixunssfsi+0x2c>
    216a:	b9 2f       	mov	r27, r25
    216c:	99 27       	eor	r25, r25
    216e:	b7 51       	subi	r27, 0x17	; 23
    2170:	a0 f0       	brcs	.+40     	; 0x219a <__fixunssfsi+0x38>
    2172:	d1 f0       	breq	.+52     	; 0x21a8 <__fixunssfsi+0x46>
    2174:	66 0f       	add	r22, r22
    2176:	77 1f       	adc	r23, r23
    2178:	88 1f       	adc	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	1a f0       	brmi	.+6      	; 0x2184 <__fixunssfsi+0x22>
    217e:	ba 95       	dec	r27
    2180:	c9 f7       	brne	.-14     	; 0x2174 <__fixunssfsi+0x12>
    2182:	12 c0       	rjmp	.+36     	; 0x21a8 <__fixunssfsi+0x46>
    2184:	b1 30       	cpi	r27, 0x01	; 1
    2186:	81 f0       	breq	.+32     	; 0x21a8 <__fixunssfsi+0x46>
    2188:	c3 d0       	rcall	.+390    	; 0x2310 <__fp_zero>
    218a:	b1 e0       	ldi	r27, 0x01	; 1
    218c:	08 95       	ret
    218e:	c0 c0       	rjmp	.+384    	; 0x2310 <__fp_zero>
    2190:	67 2f       	mov	r22, r23
    2192:	78 2f       	mov	r23, r24
    2194:	88 27       	eor	r24, r24
    2196:	b8 5f       	subi	r27, 0xF8	; 248
    2198:	39 f0       	breq	.+14     	; 0x21a8 <__fixunssfsi+0x46>
    219a:	b9 3f       	cpi	r27, 0xF9	; 249
    219c:	cc f3       	brlt	.-14     	; 0x2190 <__fixunssfsi+0x2e>
    219e:	86 95       	lsr	r24
    21a0:	77 95       	ror	r23
    21a2:	67 95       	ror	r22
    21a4:	b3 95       	inc	r27
    21a6:	d9 f7       	brne	.-10     	; 0x219e <__fixunssfsi+0x3c>
    21a8:	3e f4       	brtc	.+14     	; 0x21b8 <__fixunssfsi+0x56>
    21aa:	90 95       	com	r25
    21ac:	80 95       	com	r24
    21ae:	70 95       	com	r23
    21b0:	61 95       	neg	r22
    21b2:	7f 4f       	sbci	r23, 0xFF	; 255
    21b4:	8f 4f       	sbci	r24, 0xFF	; 255
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	08 95       	ret

000021ba <__floatunsisf>:
    21ba:	e8 94       	clt
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <__floatsisf+0x12>

000021be <__floatsisf>:
    21be:	97 fb       	bst	r25, 7
    21c0:	3e f4       	brtc	.+14     	; 0x21d0 <__floatsisf+0x12>
    21c2:	90 95       	com	r25
    21c4:	80 95       	com	r24
    21c6:	70 95       	com	r23
    21c8:	61 95       	neg	r22
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	99 23       	and	r25, r25
    21d2:	a9 f0       	breq	.+42     	; 0x21fe <__floatsisf+0x40>
    21d4:	f9 2f       	mov	r31, r25
    21d6:	96 e9       	ldi	r25, 0x96	; 150
    21d8:	bb 27       	eor	r27, r27
    21da:	93 95       	inc	r25
    21dc:	f6 95       	lsr	r31
    21de:	87 95       	ror	r24
    21e0:	77 95       	ror	r23
    21e2:	67 95       	ror	r22
    21e4:	b7 95       	ror	r27
    21e6:	f1 11       	cpse	r31, r1
    21e8:	f8 cf       	rjmp	.-16     	; 0x21da <__floatsisf+0x1c>
    21ea:	fa f4       	brpl	.+62     	; 0x222a <__floatsisf+0x6c>
    21ec:	bb 0f       	add	r27, r27
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <__floatsisf+0x36>
    21f0:	60 ff       	sbrs	r22, 0
    21f2:	1b c0       	rjmp	.+54     	; 0x222a <__floatsisf+0x6c>
    21f4:	6f 5f       	subi	r22, 0xFF	; 255
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	8f 4f       	sbci	r24, 0xFF	; 255
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <__floatsisf+0x6c>
    21fe:	88 23       	and	r24, r24
    2200:	11 f0       	breq	.+4      	; 0x2206 <__floatsisf+0x48>
    2202:	96 e9       	ldi	r25, 0x96	; 150
    2204:	11 c0       	rjmp	.+34     	; 0x2228 <__floatsisf+0x6a>
    2206:	77 23       	and	r23, r23
    2208:	21 f0       	breq	.+8      	; 0x2212 <__floatsisf+0x54>
    220a:	9e e8       	ldi	r25, 0x8E	; 142
    220c:	87 2f       	mov	r24, r23
    220e:	76 2f       	mov	r23, r22
    2210:	05 c0       	rjmp	.+10     	; 0x221c <__floatsisf+0x5e>
    2212:	66 23       	and	r22, r22
    2214:	71 f0       	breq	.+28     	; 0x2232 <__floatsisf+0x74>
    2216:	96 e8       	ldi	r25, 0x86	; 134
    2218:	86 2f       	mov	r24, r22
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	2a f0       	brmi	.+10     	; 0x222a <__floatsisf+0x6c>
    2220:	9a 95       	dec	r25
    2222:	66 0f       	add	r22, r22
    2224:	77 1f       	adc	r23, r23
    2226:	88 1f       	adc	r24, r24
    2228:	da f7       	brpl	.-10     	; 0x2220 <__floatsisf+0x62>
    222a:	88 0f       	add	r24, r24
    222c:	96 95       	lsr	r25
    222e:	87 95       	ror	r24
    2230:	97 f9       	bld	r25, 7
    2232:	08 95       	ret

00002234 <__fp_cmp>:
    2234:	99 0f       	add	r25, r25
    2236:	00 08       	sbc	r0, r0
    2238:	55 0f       	add	r21, r21
    223a:	aa 0b       	sbc	r26, r26
    223c:	e0 e8       	ldi	r30, 0x80	; 128
    223e:	fe ef       	ldi	r31, 0xFE	; 254
    2240:	16 16       	cp	r1, r22
    2242:	17 06       	cpc	r1, r23
    2244:	e8 07       	cpc	r30, r24
    2246:	f9 07       	cpc	r31, r25
    2248:	c0 f0       	brcs	.+48     	; 0x227a <__fp_cmp+0x46>
    224a:	12 16       	cp	r1, r18
    224c:	13 06       	cpc	r1, r19
    224e:	e4 07       	cpc	r30, r20
    2250:	f5 07       	cpc	r31, r21
    2252:	98 f0       	brcs	.+38     	; 0x227a <__fp_cmp+0x46>
    2254:	62 1b       	sub	r22, r18
    2256:	73 0b       	sbc	r23, r19
    2258:	84 0b       	sbc	r24, r20
    225a:	95 0b       	sbc	r25, r21
    225c:	39 f4       	brne	.+14     	; 0x226c <__fp_cmp+0x38>
    225e:	0a 26       	eor	r0, r26
    2260:	61 f0       	breq	.+24     	; 0x227a <__fp_cmp+0x46>
    2262:	23 2b       	or	r18, r19
    2264:	24 2b       	or	r18, r20
    2266:	25 2b       	or	r18, r21
    2268:	21 f4       	brne	.+8      	; 0x2272 <__fp_cmp+0x3e>
    226a:	08 95       	ret
    226c:	0a 26       	eor	r0, r26
    226e:	09 f4       	brne	.+2      	; 0x2272 <__fp_cmp+0x3e>
    2270:	a1 40       	sbci	r26, 0x01	; 1
    2272:	a6 95       	lsr	r26
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	81 1d       	adc	r24, r1
    2278:	81 1d       	adc	r24, r1
    227a:	08 95       	ret

0000227c <__fp_inf>:
    227c:	97 f9       	bld	r25, 7
    227e:	9f 67       	ori	r25, 0x7F	; 127
    2280:	80 e8       	ldi	r24, 0x80	; 128
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	08 95       	ret

00002288 <__fp_nan>:
    2288:	9f ef       	ldi	r25, 0xFF	; 255
    228a:	80 ec       	ldi	r24, 0xC0	; 192
    228c:	08 95       	ret

0000228e <__fp_pscA>:
    228e:	00 24       	eor	r0, r0
    2290:	0a 94       	dec	r0
    2292:	16 16       	cp	r1, r22
    2294:	17 06       	cpc	r1, r23
    2296:	18 06       	cpc	r1, r24
    2298:	09 06       	cpc	r0, r25
    229a:	08 95       	ret

0000229c <__fp_pscB>:
    229c:	00 24       	eor	r0, r0
    229e:	0a 94       	dec	r0
    22a0:	12 16       	cp	r1, r18
    22a2:	13 06       	cpc	r1, r19
    22a4:	14 06       	cpc	r1, r20
    22a6:	05 06       	cpc	r0, r21
    22a8:	08 95       	ret

000022aa <__fp_round>:
    22aa:	09 2e       	mov	r0, r25
    22ac:	03 94       	inc	r0
    22ae:	00 0c       	add	r0, r0
    22b0:	11 f4       	brne	.+4      	; 0x22b6 <__fp_round+0xc>
    22b2:	88 23       	and	r24, r24
    22b4:	52 f0       	brmi	.+20     	; 0x22ca <__fp_round+0x20>
    22b6:	bb 0f       	add	r27, r27
    22b8:	40 f4       	brcc	.+16     	; 0x22ca <__fp_round+0x20>
    22ba:	bf 2b       	or	r27, r31
    22bc:	11 f4       	brne	.+4      	; 0x22c2 <__fp_round+0x18>
    22be:	60 ff       	sbrs	r22, 0
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <__fp_round+0x20>
    22c2:	6f 5f       	subi	r22, 0xFF	; 255
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8f 4f       	sbci	r24, 0xFF	; 255
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	08 95       	ret

000022cc <__fp_split3>:
    22cc:	57 fd       	sbrc	r21, 7
    22ce:	90 58       	subi	r25, 0x80	; 128
    22d0:	44 0f       	add	r20, r20
    22d2:	55 1f       	adc	r21, r21
    22d4:	59 f0       	breq	.+22     	; 0x22ec <__fp_splitA+0x10>
    22d6:	5f 3f       	cpi	r21, 0xFF	; 255
    22d8:	71 f0       	breq	.+28     	; 0x22f6 <__fp_splitA+0x1a>
    22da:	47 95       	ror	r20

000022dc <__fp_splitA>:
    22dc:	88 0f       	add	r24, r24
    22de:	97 fb       	bst	r25, 7
    22e0:	99 1f       	adc	r25, r25
    22e2:	61 f0       	breq	.+24     	; 0x22fc <__fp_splitA+0x20>
    22e4:	9f 3f       	cpi	r25, 0xFF	; 255
    22e6:	79 f0       	breq	.+30     	; 0x2306 <__fp_splitA+0x2a>
    22e8:	87 95       	ror	r24
    22ea:	08 95       	ret
    22ec:	12 16       	cp	r1, r18
    22ee:	13 06       	cpc	r1, r19
    22f0:	14 06       	cpc	r1, r20
    22f2:	55 1f       	adc	r21, r21
    22f4:	f2 cf       	rjmp	.-28     	; 0x22da <__fp_split3+0xe>
    22f6:	46 95       	lsr	r20
    22f8:	f1 df       	rcall	.-30     	; 0x22dc <__fp_splitA>
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <__fp_splitA+0x30>
    22fc:	16 16       	cp	r1, r22
    22fe:	17 06       	cpc	r1, r23
    2300:	18 06       	cpc	r1, r24
    2302:	99 1f       	adc	r25, r25
    2304:	f1 cf       	rjmp	.-30     	; 0x22e8 <__fp_splitA+0xc>
    2306:	86 95       	lsr	r24
    2308:	71 05       	cpc	r23, r1
    230a:	61 05       	cpc	r22, r1
    230c:	08 94       	sec
    230e:	08 95       	ret

00002310 <__fp_zero>:
    2310:	e8 94       	clt

00002312 <__fp_szero>:
    2312:	bb 27       	eor	r27, r27
    2314:	66 27       	eor	r22, r22
    2316:	77 27       	eor	r23, r23
    2318:	cb 01       	movw	r24, r22
    231a:	97 f9       	bld	r25, 7
    231c:	08 95       	ret

0000231e <__gesf2>:
    231e:	8a df       	rcall	.-236    	; 0x2234 <__fp_cmp>
    2320:	08 f4       	brcc	.+2      	; 0x2324 <__gesf2+0x6>
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	08 95       	ret

00002326 <__mulsf3>:
    2326:	0b d0       	rcall	.+22     	; 0x233e <__mulsf3x>
    2328:	c0 cf       	rjmp	.-128    	; 0x22aa <__fp_round>
    232a:	b1 df       	rcall	.-158    	; 0x228e <__fp_pscA>
    232c:	28 f0       	brcs	.+10     	; 0x2338 <__mulsf3+0x12>
    232e:	b6 df       	rcall	.-148    	; 0x229c <__fp_pscB>
    2330:	18 f0       	brcs	.+6      	; 0x2338 <__mulsf3+0x12>
    2332:	95 23       	and	r25, r21
    2334:	09 f0       	breq	.+2      	; 0x2338 <__mulsf3+0x12>
    2336:	a2 cf       	rjmp	.-188    	; 0x227c <__fp_inf>
    2338:	a7 cf       	rjmp	.-178    	; 0x2288 <__fp_nan>
    233a:	11 24       	eor	r1, r1
    233c:	ea cf       	rjmp	.-44     	; 0x2312 <__fp_szero>

0000233e <__mulsf3x>:
    233e:	c6 df       	rcall	.-116    	; 0x22cc <__fp_split3>
    2340:	a0 f3       	brcs	.-24     	; 0x232a <__mulsf3+0x4>

00002342 <__mulsf3_pse>:
    2342:	95 9f       	mul	r25, r21
    2344:	d1 f3       	breq	.-12     	; 0x233a <__mulsf3+0x14>
    2346:	95 0f       	add	r25, r21
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	55 1f       	adc	r21, r21
    234c:	62 9f       	mul	r22, r18
    234e:	f0 01       	movw	r30, r0
    2350:	72 9f       	mul	r23, r18
    2352:	bb 27       	eor	r27, r27
    2354:	f0 0d       	add	r31, r0
    2356:	b1 1d       	adc	r27, r1
    2358:	63 9f       	mul	r22, r19
    235a:	aa 27       	eor	r26, r26
    235c:	f0 0d       	add	r31, r0
    235e:	b1 1d       	adc	r27, r1
    2360:	aa 1f       	adc	r26, r26
    2362:	64 9f       	mul	r22, r20
    2364:	66 27       	eor	r22, r22
    2366:	b0 0d       	add	r27, r0
    2368:	a1 1d       	adc	r26, r1
    236a:	66 1f       	adc	r22, r22
    236c:	82 9f       	mul	r24, r18
    236e:	22 27       	eor	r18, r18
    2370:	b0 0d       	add	r27, r0
    2372:	a1 1d       	adc	r26, r1
    2374:	62 1f       	adc	r22, r18
    2376:	73 9f       	mul	r23, r19
    2378:	b0 0d       	add	r27, r0
    237a:	a1 1d       	adc	r26, r1
    237c:	62 1f       	adc	r22, r18
    237e:	83 9f       	mul	r24, r19
    2380:	a0 0d       	add	r26, r0
    2382:	61 1d       	adc	r22, r1
    2384:	22 1f       	adc	r18, r18
    2386:	74 9f       	mul	r23, r20
    2388:	33 27       	eor	r19, r19
    238a:	a0 0d       	add	r26, r0
    238c:	61 1d       	adc	r22, r1
    238e:	23 1f       	adc	r18, r19
    2390:	84 9f       	mul	r24, r20
    2392:	60 0d       	add	r22, r0
    2394:	21 1d       	adc	r18, r1
    2396:	82 2f       	mov	r24, r18
    2398:	76 2f       	mov	r23, r22
    239a:	6a 2f       	mov	r22, r26
    239c:	11 24       	eor	r1, r1
    239e:	9f 57       	subi	r25, 0x7F	; 127
    23a0:	50 40       	sbci	r21, 0x00	; 0
    23a2:	8a f0       	brmi	.+34     	; 0x23c6 <__mulsf3_pse+0x84>
    23a4:	e1 f0       	breq	.+56     	; 0x23de <__mulsf3_pse+0x9c>
    23a6:	88 23       	and	r24, r24
    23a8:	4a f0       	brmi	.+18     	; 0x23bc <__mulsf3_pse+0x7a>
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	bb 1f       	adc	r27, r27
    23b0:	66 1f       	adc	r22, r22
    23b2:	77 1f       	adc	r23, r23
    23b4:	88 1f       	adc	r24, r24
    23b6:	91 50       	subi	r25, 0x01	; 1
    23b8:	50 40       	sbci	r21, 0x00	; 0
    23ba:	a9 f7       	brne	.-22     	; 0x23a6 <__mulsf3_pse+0x64>
    23bc:	9e 3f       	cpi	r25, 0xFE	; 254
    23be:	51 05       	cpc	r21, r1
    23c0:	70 f0       	brcs	.+28     	; 0x23de <__mulsf3_pse+0x9c>
    23c2:	5c cf       	rjmp	.-328    	; 0x227c <__fp_inf>
    23c4:	a6 cf       	rjmp	.-180    	; 0x2312 <__fp_szero>
    23c6:	5f 3f       	cpi	r21, 0xFF	; 255
    23c8:	ec f3       	brlt	.-6      	; 0x23c4 <__mulsf3_pse+0x82>
    23ca:	98 3e       	cpi	r25, 0xE8	; 232
    23cc:	dc f3       	brlt	.-10     	; 0x23c4 <__mulsf3_pse+0x82>
    23ce:	86 95       	lsr	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	b7 95       	ror	r27
    23d6:	f7 95       	ror	r31
    23d8:	e7 95       	ror	r30
    23da:	9f 5f       	subi	r25, 0xFF	; 255
    23dc:	c1 f7       	brne	.-16     	; 0x23ce <__mulsf3_pse+0x8c>
    23de:	fe 2b       	or	r31, r30
    23e0:	88 0f       	add	r24, r24
    23e2:	91 1d       	adc	r25, r1
    23e4:	96 95       	lsr	r25
    23e6:	87 95       	ror	r24
    23e8:	97 f9       	bld	r25, 7
    23ea:	08 95       	ret

000023ec <__tablejump2__>:
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	00 24       	eor	r0, r0
    23f2:	00 1c       	adc	r0, r0
    23f4:	0b be       	out	0x3b, r0	; 59
    23f6:	07 90       	elpm	r0, Z+
    23f8:	f6 91       	elpm	r31, Z
    23fa:	e0 2d       	mov	r30, r0
    23fc:	09 94       	ijmp

000023fe <_exit>:
    23fe:	f8 94       	cli

00002400 <__stop_program>:
    2400:	ff cf       	rjmp	.-2      	; 0x2400 <__stop_program>
