
Sensormodul_6_2(1).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00002036  00800100  0000141a  000014ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00802136  00802136  000034e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f41  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abd  00000000  00000000  0000564d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001174  00000000  00000000  0000610a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00007280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  00007764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6c  00000000  00000000  00007dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c7       	rjmp	.+3650   	; 0xe54 <__vector_4>
      12:	00 00       	nop
      14:	f6 c5       	rjmp	.+3052   	; 0xc02 <__vector_5>
      16:	00 00       	nop
      18:	c9 c6       	rjmp	.+3474   	; 0xdac <__vector_6>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	3b c3       	rjmp	.+1654   	; 0x69c <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c6       	rjmp	.+3410   	; 0xd88 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__vector_26>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e2       	ldi	r17, 0x21	; 33
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e1       	ldi	r30, 0x1A	; 26
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 33       	cpi	r26, 0x36	; 54
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e2       	ldi	r18, 0x21	; 33
      b4:	a6 e3       	ldi	r26, 0x36	; 54
      b6:	b1 e2       	ldi	r27, 0x21	; 33
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3c       	cpi	r26, 0xCB	; 203
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c1 d5       	rcall	.+2946   	; 0xc46 <main>
      c4:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_26>:
#include "BusSlave.h"
//#include <util/twi.h>
#include "DebugHelp.h"


ISR(TWI_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	// SEND DATA - sensormodul
	pulse(PORTC, 7);
      f0:	47 98       	cbi	0x08, 7	; 8
      f2:	47 9a       	sbi	0x08, 7	; 8
      f4:	47 98       	cbi	0x08, 7	; 8
	// The Slave has been addressed by the Master
	if ((TWSR & 0xF8) == 0xA8){ // use TW_ST_DATA_ACK instead of 0xA8 maybe?
      f6:	80 91 b9 00 	lds	r24, 0x00B9
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 3a       	cpi	r24, 0xA8	; 168
      fe:	39 f5       	brne	.+78     	; 0x14e <__vector_26+0x84>
		sending = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 5c 21 	sts	0x215C, r25
     108:	80 93 5b 21 	sts	0x215B, r24
		pulse(PORTD,0);
     10c:	58 98       	cbi	0x0b, 0	; 11
     10e:	58 9a       	sbi	0x0b, 0	; 11
     110:	58 98       	cbi	0x0b, 0	; 11
		TWIcounter = 0;
     112:	10 92 60 21 	sts	0x2160, r1
     116:	10 92 5f 21 	sts	0x215F, r1
		TWDR = TWIdata[TWIcounter];
     11a:	80 91 5f 21 	lds	r24, 0x215F
     11e:	90 91 60 21 	lds	r25, 0x2160
     122:	e0 91 5d 21 	lds	r30, 0x215D
     126:	f0 91 5e 21 	lds	r31, 0x215E
     12a:	e8 0f       	add	r30, r24
     12c:	f9 1f       	adc	r31, r25
     12e:	80 81       	ld	r24, Z
     130:	80 93 bb 00 	sts	0x00BB, r24
		TWIcounter++;
     134:	80 91 5f 21 	lds	r24, 0x215F
     138:	90 91 60 21 	lds	r25, 0x2160
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	90 93 60 21 	sts	0x2160, r25
     142:	80 93 5f 21 	sts	0x215F, r24
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     146:	85 ec       	ldi	r24, 0xC5	; 197
     148:	80 93 bc 00 	sts	0x00BC, r24
     14c:	56 c0       	rjmp	.+172    	; 0x1fa <__vector_26+0x130>
	}
	// Send data now
	else if ((TWSR & 0xF8) == 0xB8){
     14e:	80 91 b9 00 	lds	r24, 0x00B9
     152:	88 7f       	andi	r24, 0xF8	; 248
     154:	88 3b       	cpi	r24, 0xB8	; 184
     156:	01 f5       	brne	.+64     	; 0x198 <__vector_26+0xce>
		pulse(PORTC, 7);
     158:	47 98       	cbi	0x08, 7	; 8
     15a:	47 9a       	sbi	0x08, 7	; 8
     15c:	47 98       	cbi	0x08, 7	; 8
		pulse(PORTC, 7);
     15e:	47 98       	cbi	0x08, 7	; 8
     160:	47 9a       	sbi	0x08, 7	; 8
     162:	47 98       	cbi	0x08, 7	; 8
		TWDR = TWIdata[TWIcounter];
     164:	80 91 5f 21 	lds	r24, 0x215F
     168:	90 91 60 21 	lds	r25, 0x2160
     16c:	e0 91 5d 21 	lds	r30, 0x215D
     170:	f0 91 5e 21 	lds	r31, 0x215E
     174:	e8 0f       	add	r30, r24
     176:	f9 1f       	adc	r31, r25
     178:	80 81       	ld	r24, Z
     17a:	80 93 bb 00 	sts	0x00BB, r24
		TWIcounter++;
     17e:	80 91 5f 21 	lds	r24, 0x215F
     182:	90 91 60 21 	lds	r25, 0x2160
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	90 93 60 21 	sts	0x2160, r25
     18c:	80 93 5f 21 	sts	0x215F, r24
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     190:	85 ec       	ldi	r24, 0xC5	; 197
     192:	80 93 bc 00 	sts	0x00BC, r24
     196:	31 c0       	rjmp	.+98     	; 0x1fa <__vector_26+0x130>
	}
	// Done with sending data
	else if ((TWSR & 0xF8) == 0xC0){
     198:	80 91 b9 00 	lds	r24, 0x00B9
     19c:	88 7f       	andi	r24, 0xF8	; 248
     19e:	80 3c       	cpi	r24, 0xC0	; 192
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <__vector_26+0xe8>
		sending = 0;
     1a2:	10 92 5c 21 	sts	0x215C, r1
     1a6:	10 92 5b 21 	sts	0x215B, r1
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);		
     1aa:	85 ec       	ldi	r24, 0xC5	; 197
     1ac:	80 93 bc 00 	sts	0x00BC, r24
     1b0:	24 c0       	rjmp	.+72     	; 0x1fa <__vector_26+0x130>
	}
	
	//RECEIVE DATA - styrmodul
	
	// The Slave has been addressed by the Master
	else if ((TWSR & 0xF8) == 0x60){
     1b2:	80 91 b9 00 	lds	r24, 0x00B9
     1b6:	88 7f       	andi	r24, 0xF8	; 248
     1b8:	80 36       	cpi	r24, 0x60	; 96
     1ba:	49 f4       	brne	.+18     	; 0x1ce <__vector_26+0x104>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1bc:	85 ec       	ldi	r24, 0xC5	; 197
     1be:	80 93 bc 00 	sts	0x00BC, r24
		calibrateReflexSensors();
     1c2:	95 d4       	rcall	.+2346   	; 0xaee <calibrateReflexSensors>
		TWIcounter = 0;
     1c4:	10 92 60 21 	sts	0x2160, r1
     1c8:	10 92 5f 21 	sts	0x215F, r1
     1cc:	16 c0       	rjmp	.+44     	; 0x1fa <__vector_26+0x130>
	}
	
	// Data is received
	else if ((TWSR & 0xF8) == 0x80){	
     1ce:	80 91 b9 00 	lds	r24, 0x00B9
     1d2:	88 7f       	andi	r24, 0xF8	; 248
     1d4:	80 38       	cpi	r24, 0x80	; 128
     1d6:	21 f4       	brne	.+8      	; 0x1e0 <__vector_26+0x116>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1d8:	85 ec       	ldi	r24, 0xC5	; 197
     1da:	80 93 bc 00 	sts	0x00BC, r24
     1de:	0d c0       	rjmp	.+26     	; 0x1fa <__vector_26+0x130>
	}
	
	// STOP condition is received
	else if ((TWSR & 0xF8) == 0xA0){
     1e0:	80 91 b9 00 	lds	r24, 0x00B9
     1e4:	88 7f       	andi	r24, 0xF8	; 248
     1e6:	80 3a       	cpi	r24, 0xA0	; 160
     1e8:	21 f4       	brne	.+8      	; 0x1f2 <__vector_26+0x128>
		TWCR = (1<< TWINT) | (1 << TWEA) | (1 << TWIE) | (1 << TWEN);
     1ea:	85 ec       	ldi	r24, 0xC5	; 197
     1ec:	80 93 bc 00 	sts	0x00BC, r24
     1f0:	04 c0       	rjmp	.+8      	; 0x1fa <__vector_26+0x130>
	}
	else{
		sending = 0;
     1f2:	10 92 5c 21 	sts	0x215C, r1
     1f6:	10 92 5b 21 	sts	0x215B, r1
	}
}
     1fa:	ff 91       	pop	r31
     1fc:	ef 91       	pop	r30
     1fe:	bf 91       	pop	r27
     200:	af 91       	pop	r26
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	7f 91       	pop	r23
     208:	6f 91       	pop	r22
     20a:	5f 91       	pop	r21
     20c:	4f 91       	pop	r20
     20e:	3f 91       	pop	r19
     210:	2f 91       	pop	r18
     212:	0f 90       	pop	r0
     214:	0b be       	out	0x3b, r0	; 59
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <initBuss>:

void initBuss(char address){
	DDRC |= (1 << 7);
     220:	3f 9a       	sbi	0x07, 7	; 7
	DDRD |= (1 << 0);
     222:	50 9a       	sbi	0x0a, 0	; 10
	//pulse(PORTC, 7);
	sending = 0;
     224:	10 92 5c 21 	sts	0x215C, r1
     228:	10 92 5b 21 	sts	0x215B, r1
	
	TWAR = address;
     22c:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE); // set the TWCR to enable address matching and enable TWI, enable TWI interrupt
     230:	ec eb       	ldi	r30, 0xBC	; 188
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	85 e4       	ldi	r24, 0x45	; 69
     236:	80 83       	st	Z, r24
	TWCR |= (1 << TWINT); // clear TWINT
     238:	80 81       	ld	r24, Z
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	80 83       	st	Z, r24
	cbi(TWCR, TWSTA);
     23e:	80 81       	ld	r24, Z
     240:	8f 7d       	andi	r24, 0xDF	; 223
     242:	80 83       	st	Z, r24
	cbi(TWCR, TWSTO);
     244:	80 81       	ld	r24, Z
     246:	8f 7e       	andi	r24, 0xEF	; 239
     248:	80 83       	st	Z, r24
     24a:	08 95       	ret

0000024c <lcd_cmd>:
	_delay_ms(100);	
}

void lcd_cmd(unsigned char cmd)
{
	PORTD = (cmd & 0xF0) | LCD_EN;
     24c:	98 2f       	mov	r25, r24
     24e:	90 7f       	andi	r25, 0xF0	; 240
     250:	29 2f       	mov	r18, r25
     252:	22 60       	ori	r18, 0x02	; 2
     254:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     256:	e9 ef       	ldi	r30, 0xF9	; 249
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_cmd+0xe>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_cmd+0x14>
     260:	00 00       	nop
	_delay_ms(1);
	PORTD = (cmd & 0xF0);
     262:	9b b9       	out	0x0b, r25	; 11
     264:	e9 ef       	ldi	r30, 0xF9	; 249
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_cmd+0x1c>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_cmd+0x22>
     26e:	00 00       	nop
	_delay_ms(1);
	PORTD = ((cmd << 4) & 0xF0) | LCD_EN;
     270:	f0 e1       	ldi	r31, 0x10	; 16
     272:	8f 9f       	mul	r24, r31
     274:	c0 01       	movw	r24, r0
     276:	11 24       	eor	r1, r1
     278:	98 2f       	mov	r25, r24
     27a:	92 60       	ori	r25, 0x02	; 2
     27c:	9b b9       	out	0x0b, r25	; 11
     27e:	e9 ef       	ldi	r30, 0xF9	; 249
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_cmd+0x36>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_cmd+0x3c>
     288:	00 00       	nop
	_delay_ms(1);
	PORTD = ((cmd << 4) & 0xF0);
     28a:	8b b9       	out	0x0b, r24	; 11
     28c:	89 ef       	ldi	r24, 0xF9	; 249
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <lcd_cmd+0x44>
     294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_cmd+0x4a>
     296:	00 00       	nop
     298:	08 95       	ret

0000029a <lcd_init>:

volatile bool whiteSpaceSwitch = true;

void lcd_init()
{	
	DDRD |= 0xFF;
     29a:	8a b1       	in	r24, 0x0a	; 10
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	8a b9       	out	0x0a, r24	; 10
     2a0:	2f e3       	ldi	r18, 0x3F	; 63
     2a2:	8d e0       	ldi	r24, 0x0D	; 13
     2a4:	93 e0       	ldi	r25, 0x03	; 3
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <lcd_init+0xc>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x16>
     2b0:	00 00       	nop
	
	//Wait for power
	_delay_ms(1000);
	
	//Function set, 2-line mode, 5x7 Dots
	PORTD = (1<<DB5) | (1<<EN);
     2b2:	92 e2       	ldi	r25, 0x22	; 34
     2b4:	9b b9       	out	0x0b, r25	; 11
     2b6:	e9 ef       	ldi	r30, 0xF9	; 249
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x20>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x26>
     2c0:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB5);
     2c2:	80 e2       	ldi	r24, 0x20	; 32
     2c4:	8b b9       	out	0x0b, r24	; 11
     2c6:	e9 ef       	ldi	r30, 0xF9	; 249
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_init+0x30>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_init+0x36>
     2d0:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB5) | (1<<EN);
     2d2:	9b b9       	out	0x0b, r25	; 11
     2d4:	e9 ef       	ldi	r30, 0xF9	; 249
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_init+0x3e>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_init+0x44>
     2de:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB5);
     2e0:	8b b9       	out	0x0b, r24	; 11
     2e2:	89 ef       	ldi	r24, 0xF9	; 249
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_init+0x4c>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_init+0x52>
     2ec:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7) | (1<<EN);
     2ee:	82 e8       	ldi	r24, 0x82	; 130
     2f0:	8b b9       	out	0x0b, r24	; 11
     2f2:	e9 ef       	ldi	r30, 0xF9	; 249
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0x5c>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0x62>
     2fc:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7);
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	8b b9       	out	0x0b, r24	; 11
     302:	89 ef       	ldi	r24, 0xF9	; 249
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x6c>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x72>
     30c:	00 00       	nop
	_delay_ms(1);
	
	//Display on, cursor off, blink off
	PORTD = (1<<EN);
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	8b b9       	out	0x0b, r24	; 11
     312:	e9 ef       	ldi	r30, 0xF9	; 249
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <lcd_init+0x7c>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_init+0x82>
     31c:	00 00       	nop
	_delay_ms(1);
	PORTD = 0x00;
     31e:	1b b8       	out	0x0b, r1	; 11
     320:	89 ef       	ldi	r24, 0xF9	; 249
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x8a>
     328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_init+0x90>
     32a:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7) | (1<<DB6) | (1<<EN);
     32c:	82 ec       	ldi	r24, 0xC2	; 194
     32e:	8b b9       	out	0x0b, r24	; 11
     330:	e9 ef       	ldi	r30, 0xF9	; 249
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_init+0x9a>
     338:	00 c0       	rjmp	.+0      	; 0x33a <lcd_init+0xa0>
     33a:	00 00       	nop
	_delay_ms(1);
	PORTD = (1<<DB7) | (1<<DB6);
     33c:	80 ec       	ldi	r24, 0xC0	; 192
     33e:	8b b9       	out	0x0b, r24	; 11
     340:	89 ef       	ldi	r24, 0xF9	; 249
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_init+0xaa>
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0xb0>
     34a:	00 00       	nop
	_delay_ms(1);
	
	lcd_cmd(0x01);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	7e df       	rcall	.-260    	; 0x24c <lcd_cmd>
     350:	e7 ea       	ldi	r30, 0xA7	; 167
     352:	f1 e6       	ldi	r31, 0x61	; 97
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0xba>
     358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_init+0xc0>
     35a:	00 00       	nop
     35c:	08 95       	ret

0000035e <lcd_data>:
	_delay_ms(1);
}

void lcd_data(unsigned char data)
{
	PORTD = (data & 0xF0) | LCD_EN | LCD_RS;
     35e:	98 2f       	mov	r25, r24
     360:	90 7f       	andi	r25, 0xF0	; 240
     362:	29 2f       	mov	r18, r25
     364:	26 60       	ori	r18, 0x06	; 6
     366:	2b b9       	out	0x0b, r18	; 11
     368:	e9 ef       	ldi	r30, 0xF9	; 249
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_data+0xe>
     370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_data+0x14>
     372:	00 00       	nop
	_delay_ms(1);
	PORTD = (data & 0xF0) | LCD_RS;
     374:	94 60       	ori	r25, 0x04	; 4
     376:	9b b9       	out	0x0b, r25	; 11
     378:	e9 ef       	ldi	r30, 0xF9	; 249
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_data+0x1e>
     380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_data+0x24>
     382:	00 00       	nop
	_delay_ms(1);
	PORTD = ((data << 4) & 0xF0) | LCD_EN | LCD_RS;
     384:	f0 e1       	ldi	r31, 0x10	; 16
     386:	8f 9f       	mul	r24, r31
     388:	c0 01       	movw	r24, r0
     38a:	11 24       	eor	r1, r1
     38c:	98 2f       	mov	r25, r24
     38e:	96 60       	ori	r25, 0x06	; 6
     390:	9b b9       	out	0x0b, r25	; 11
     392:	e9 ef       	ldi	r30, 0xF9	; 249
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <lcd_data+0x38>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <lcd_data+0x3e>
     39c:	00 00       	nop
	_delay_ms(1);
	PORTD = ((data << 4) & 0xF0) | LCD_RS;
     39e:	84 60       	ori	r24, 0x04	; 4
     3a0:	8b b9       	out	0x0b, r24	; 11
     3a2:	89 ef       	ldi	r24, 0xF9	; 249
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_data+0x48>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lcd_data+0x4e>
     3ac:	00 00       	nop
     3ae:	08 95       	ret

000003b0 <lcd_print>:
	_delay_ms(1);
}

void lcd_print(char *string)
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
	unsigned int i;
	for (i = 0; string[i]!=0; i++) {
     3b6:	88 81       	ld	r24, Y
     3b8:	88 23       	and	r24, r24
     3ba:	29 f0       	breq	.+10     	; 0x3c6 <lcd_print+0x16>
     3bc:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(string[i]);
     3be:	cf df       	rcall	.-98     	; 0x35e <lcd_data>
}

void lcd_print(char *string)
{
	unsigned int i;
	for (i = 0; string[i]!=0; i++) {
     3c0:	89 91       	ld	r24, Y+
     3c2:	81 11       	cpse	r24, r1
     3c4:	fc cf       	rjmp	.-8      	; 0x3be <lcd_print+0xe>
		lcd_data(string[i]);
	}
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <lcd_build_row>:

char* lcd_build_row(char *label1, char *data1, char *label2, char *data2)
{
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	7b 01       	movw	r14, r22
     3da:	8a 01       	movw	r16, r20
     3dc:	e9 01       	movw	r28, r18
	static char tmpStr[17];
	strcpy(tmpStr, label1);
     3de:	bc 01       	movw	r22, r24
     3e0:	82 e4       	ldi	r24, 0x42	; 66
     3e2:	91 e2       	ldi	r25, 0x21	; 33
     3e4:	de d7       	rcall	.+4028   	; 0x13a2 <strcpy>
	strcat(tmpStr, data1);
     3e6:	b7 01       	movw	r22, r14
     3e8:	82 e4       	ldi	r24, 0x42	; 66
     3ea:	91 e2       	ldi	r25, 0x21	; 33
     3ec:	cf d7       	rcall	.+3998   	; 0x138c <strcat>
	strcat(tmpStr, label2);
     3ee:	b8 01       	movw	r22, r16
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	91 e2       	ldi	r25, 0x21	; 33
     3f4:	cb d7       	rcall	.+3990   	; 0x138c <strcat>
	strcat(tmpStr, data2);
     3f6:	be 01       	movw	r22, r28
     3f8:	82 e4       	ldi	r24, 0x42	; 66
     3fa:	91 e2       	ldi	r25, 0x21	; 33
     3fc:	c7 d7       	rcall	.+3982   	; 0x138c <strcat>
	return tmpStr;
}
     3fe:	82 e4       	ldi	r24, 0x42	; 66
     400:	91 e2       	ldi	r25, 0x21	; 33
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	08 95       	ret

00000410 <lcd_whitespace_adder>:

//Adds whitespace in front of the the inputed string until it reaches max_length+1.
char* lcd_whitespace_adder(char *str, int max_length)
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	ab 01       	movw	r20, r22
	static char result1[6];
	static char result2[6];
	int length = strlen(str);
     416:	fc 01       	movw	r30, r24
     418:	01 90       	ld	r0, Z+
     41a:	00 20       	and	r0, r0
     41c:	e9 f7       	brne	.-6      	; 0x418 <lcd_whitespace_adder+0x8>
     41e:	31 97       	sbiw	r30, 0x01	; 1
     420:	9f 01       	movw	r18, r30
     422:	28 1b       	sub	r18, r24
     424:	39 0b       	sbc	r19, r25
	if (whiteSpaceSwitch)
     426:	60 91 00 01 	lds	r22, 0x0100
     42a:	66 23       	and	r22, r22
     42c:	01 f1       	breq	.+64     	; 0x46e <lcd_whitespace_adder+0x5e>
	{
		strcpy(result1, " ");
     42e:	60 e2       	ldi	r22, 0x20	; 32
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	70 93 3d 21 	sts	0x213D, r23
     436:	60 93 3c 21 	sts	0x213C, r22
		while(length < max_length) {
     43a:	24 17       	cp	r18, r20
     43c:	35 07       	cpc	r19, r21
     43e:	74 f4       	brge	.+28     	; 0x45c <lcd_whitespace_adder+0x4c>
			strcat(result1, " ");
     440:	ac e3       	ldi	r26, 0x3C	; 60
     442:	b1 e2       	ldi	r27, 0x21	; 33
     444:	fd 01       	movw	r30, r26
     446:	01 90       	ld	r0, Z+
     448:	00 20       	and	r0, r0
     44a:	e9 f7       	brne	.-6      	; 0x446 <lcd_whitespace_adder+0x36>
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	71 83       	std	Z+1, r23	; 0x01
     450:	60 83       	st	Z, r22
			length++;
     452:	2f 5f       	subi	r18, 0xFF	; 255
     454:	3f 4f       	sbci	r19, 0xFF	; 255
	static char result2[6];
	int length = strlen(str);
	if (whiteSpaceSwitch)
	{
		strcpy(result1, " ");
		while(length < max_length) {
     456:	24 17       	cp	r18, r20
     458:	35 07       	cpc	r19, r21
     45a:	a4 f3       	brlt	.-24     	; 0x444 <lcd_whitespace_adder+0x34>
			strcat(result1, " ");
			length++;
		}
		strcat(result1, str);
     45c:	bc 01       	movw	r22, r24
     45e:	8c e3       	ldi	r24, 0x3C	; 60
     460:	91 e2       	ldi	r25, 0x21	; 33
     462:	94 d7       	rcall	.+3880   	; 0x138c <strcat>
		whiteSpaceSwitch = false;
     464:	10 92 00 01 	sts	0x0100, r1
		return result1;
     468:	8c e3       	ldi	r24, 0x3C	; 60
     46a:	91 e2       	ldi	r25, 0x21	; 33
     46c:	22 c0       	rjmp	.+68     	; 0x4b2 <lcd_whitespace_adder+0xa2>
	}
	else
	{
		strcpy(result2, " ");
     46e:	60 e2       	ldi	r22, 0x20	; 32
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	70 93 37 21 	sts	0x2137, r23
     476:	60 93 36 21 	sts	0x2136, r22
		while(length < max_length) {
     47a:	24 17       	cp	r18, r20
     47c:	35 07       	cpc	r19, r21
     47e:	84 f4       	brge	.+32     	; 0x4a0 <lcd_whitespace_adder+0x90>
			strcat(result2, " ");
     480:	c6 e3       	ldi	r28, 0x36	; 54
     482:	d1 e2       	ldi	r29, 0x21	; 33
     484:	a0 e2       	ldi	r26, 0x20	; 32
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	fe 01       	movw	r30, r28
     48a:	01 90       	ld	r0, Z+
     48c:	00 20       	and	r0, r0
     48e:	e9 f7       	brne	.-6      	; 0x48a <lcd_whitespace_adder+0x7a>
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	b1 83       	std	Z+1, r27	; 0x01
     494:	a0 83       	st	Z, r26
			length++;
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
		return result1;
	}
	else
	{
		strcpy(result2, " ");
		while(length < max_length) {
     49a:	24 17       	cp	r18, r20
     49c:	35 07       	cpc	r19, r21
     49e:	a4 f3       	brlt	.-24     	; 0x488 <lcd_whitespace_adder+0x78>
			strcat(result2, " ");
			length++;
		}
		strcat(result2, str);
     4a0:	bc 01       	movw	r22, r24
     4a2:	86 e3       	ldi	r24, 0x36	; 54
     4a4:	91 e2       	ldi	r25, 0x21	; 33
     4a6:	72 d7       	rcall	.+3812   	; 0x138c <strcat>
		whiteSpaceSwitch = true;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 00 01 	sts	0x0100, r24
		return result2;
     4ae:	86 e3       	ldi	r24, 0x36	; 54
     4b0:	91 e2       	ldi	r25, 0x21	; 33
	}
	
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <lcd_update>:

void lcd_update(bool manualMode, int gyro, int usf, int usr,int irfl, int irfr, int irrl, int irrr)
{
     4b8:	6f 92       	push	r6
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	64 97       	sbiw	r28, 0x14	; 20
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	fb 01       	movw	r30, r22
     4e6:	3a 01       	movw	r6, r20
     4e8:	49 01       	movw	r8, r18
	char str2[10];
	
	//lcd_cmd(0x01);
	//_delay_ms(100);
	
	if(manualMode){
     4ea:	88 23       	and	r24, r24
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <lcd_update+0x40>
		strcpy(str1, "M");
     4ee:	8d e4       	ldi	r24, 0x4D	; 77
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <lcd_update+0x48>
	}
	else{
		strcpy(str1, "A");
     4f8:	81 e4       	ldi	r24, 0x41	; 65
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9a 83       	std	Y+2, r25	; 0x02
     4fe:	89 83       	std	Y+1, r24	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     500:	4a e0       	ldi	r20, 0x0A	; 10
     502:	be 01       	movw	r22, r28
     504:	65 5f       	subi	r22, 0xF5	; 245
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	cf 01       	movw	r24, r30
     50a:	52 d7       	rcall	.+3748   	; 0x13b0 <__itoa_ncheck>
	}
	itoa(gyro,str2,10);
	
	//Write Mode, Gyro
	lcd_cmd(0x80);	//Set row 1 on the display
     50c:	80 e8       	ldi	r24, 0x80	; 128
     50e:	9e de       	rcall	.-708    	; 0x24c <lcd_cmd>
	lcd_print(lcd_build_row("MODE ", str1, " GYRO", lcd_whitespace_adder(str2, 4)));
     510:	64 e0       	ldi	r22, 0x04	; 4
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	ce 01       	movw	r24, r28
     516:	0b 96       	adiw	r24, 0x0b	; 11
     518:	7b df       	rcall	.-266    	; 0x410 <lcd_whitespace_adder>
     51a:	9c 01       	movw	r18, r24
     51c:	49 e0       	ldi	r20, 0x09	; 9
     51e:	51 e2       	ldi	r21, 0x21	; 33
     520:	be 01       	movw	r22, r28
     522:	6f 5f       	subi	r22, 0xFF	; 255
     524:	7f 4f       	sbci	r23, 0xFF	; 255
     526:	8f e0       	ldi	r24, 0x0F	; 15
     528:	91 e2       	ldi	r25, 0x21	; 33
     52a:	50 df       	rcall	.-352    	; 0x3cc <lcd_build_row>
     52c:	41 df       	rcall	.-382    	; 0x3b0 <lcd_print>
     52e:	4a e0       	ldi	r20, 0x0A	; 10
     530:	be 01       	movw	r22, r28
     532:	6f 5f       	subi	r22, 0xFF	; 255
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	c3 01       	movw	r24, r6
     538:	3b d7       	rcall	.+3702   	; 0x13b0 <__itoa_ncheck>
     53a:	4a e0       	ldi	r20, 0x0A	; 10
     53c:	be 01       	movw	r22, r28
     53e:	65 5f       	subi	r22, 0xF5	; 245
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	c4 01       	movw	r24, r8
     544:	35 d7       	rcall	.+3690   	; 0x13b0 <__itoa_ncheck>
	//lcd_print(lcd_build_row("MODE ", str1, " GYRO ", str2));
	
	itoa(usf,str1,10);
	itoa(usr,str2,10);
	//Write Ultrasound
	lcd_cmd(0xc0);	//Set row 2 on the display
     546:	80 ec       	ldi	r24, 0xC0	; 192
     548:	81 de       	rcall	.-766    	; 0x24c <lcd_cmd>
	lcd_print(lcd_build_row("USF", lcd_whitespace_adder(str1, 3), " REF", lcd_whitespace_adder(str2, 4)));
     54a:	64 e0       	ldi	r22, 0x04	; 4
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	ce 01       	movw	r24, r28
     550:	0b 96       	adiw	r24, 0x0b	; 11
     552:	5e df       	rcall	.-324    	; 0x410 <lcd_whitespace_adder>
     554:	4c 01       	movw	r8, r24
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	58 df       	rcall	.-336    	; 0x410 <lcd_whitespace_adder>
     560:	94 01       	movw	r18, r8
     562:	45 e1       	ldi	r20, 0x15	; 21
     564:	51 e2       	ldi	r21, 0x21	; 33
     566:	bc 01       	movw	r22, r24
     568:	8a e1       	ldi	r24, 0x1A	; 26
     56a:	91 e2       	ldi	r25, 0x21	; 33
     56c:	2f df       	rcall	.-418    	; 0x3cc <lcd_build_row>
     56e:	20 df       	rcall	.-448    	; 0x3b0 <lcd_print>
     570:	4a e0       	ldi	r20, 0x0A	; 10
     572:	be 01       	movw	r22, r28
     574:	6f 5f       	subi	r22, 0xFF	; 255
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	c8 01       	movw	r24, r16
     57a:	1a d7       	rcall	.+3636   	; 0x13b0 <__itoa_ncheck>
     57c:	4a e0       	ldi	r20, 0x0A	; 10
     57e:	be 01       	movw	r22, r28
     580:	65 5f       	subi	r22, 0xF5	; 245
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	c7 01       	movw	r24, r14
     586:	14 d7       	rcall	.+3624   	; 0x13b0 <__itoa_ncheck>
	//lcd_print(lcd_build_row("USF ",str1, " REF ", str2));
	
	itoa(irfl,str1,10);
	itoa(irfr,str2,10);
	//Write IRFL, IRFR
	lcd_cmd(0x90);	//Set row 3 the display
     588:	80 e9       	ldi	r24, 0x90	; 144
     58a:	60 de       	rcall	.-832    	; 0x24c <lcd_cmd>
	lcd_print(lcd_build_row("IRFL", lcd_whitespace_adder(str1, 2), "  IRFR", lcd_whitespace_adder(str2, 2)));
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	ce 01       	movw	r24, r28
     592:	0b 96       	adiw	r24, 0x0b	; 11
     594:	3d df       	rcall	.-390    	; 0x410 <lcd_whitespace_adder>
     596:	8c 01       	movw	r16, r24
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	37 df       	rcall	.-402    	; 0x410 <lcd_whitespace_adder>
     5a2:	bc 01       	movw	r22, r24
     5a4:	98 01       	movw	r18, r16
     5a6:	4e e1       	ldi	r20, 0x1E	; 30
     5a8:	51 e2       	ldi	r21, 0x21	; 33
     5aa:	85 e2       	ldi	r24, 0x25	; 37
     5ac:	91 e2       	ldi	r25, 0x21	; 33
     5ae:	0e df       	rcall	.-484    	; 0x3cc <lcd_build_row>
     5b0:	ff de       	rcall	.-514    	; 0x3b0 <lcd_print>
     5b2:	4a e0       	ldi	r20, 0x0A	; 10
     5b4:	be 01       	movw	r22, r28
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	c6 01       	movw	r24, r12
     5bc:	f9 d6       	rcall	.+3570   	; 0x13b0 <__itoa_ncheck>
     5be:	4a e0       	ldi	r20, 0x0A	; 10
     5c0:	be 01       	movw	r22, r28
     5c2:	65 5f       	subi	r22, 0xF5	; 245
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	c5 01       	movw	r24, r10
     5c8:	f3 d6       	rcall	.+3558   	; 0x13b0 <__itoa_ncheck>
	//lcd_print(lcd_build_row("IRFL ", str1, " IRFR ", str2));
	
	itoa(irrl,str1,10);
	itoa(irrr,str2,10);
	//Write IRRL, IRRR
	lcd_cmd(0xd0);	//Set row 4 the display
     5ca:	80 ed       	ldi	r24, 0xD0	; 208
     5cc:	3f de       	rcall	.-898    	; 0x24c <lcd_cmd>
	//lcd_print(lcd_build_row("IRFL", lcd_white
	lcd_print(lcd_build_row("IRRL", lcd_whitespace_adder(str1, 2), "  IRRR", lcd_whitespace_adder(str2, 2)));
     5ce:	62 e0       	ldi	r22, 0x02	; 2
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	ce 01       	movw	r24, r28
     5d4:	0b 96       	adiw	r24, 0x0b	; 11
     5d6:	1c df       	rcall	.-456    	; 0x410 <lcd_whitespace_adder>
     5d8:	8c 01       	movw	r16, r24
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	16 df       	rcall	.-468    	; 0x410 <lcd_whitespace_adder>
     5e4:	bc 01       	movw	r22, r24
     5e6:	98 01       	movw	r18, r16
     5e8:	4a e2       	ldi	r20, 0x2A	; 42
     5ea:	51 e2       	ldi	r21, 0x21	; 33
     5ec:	81 e3       	ldi	r24, 0x31	; 49
     5ee:	91 e2       	ldi	r25, 0x21	; 33
     5f0:	ed de       	rcall	.-550    	; 0x3cc <lcd_build_row>
     5f2:	de de       	rcall	.-580    	; 0x3b0 <lcd_print>
	
	////Write IRRL, IRRR
	lcd_cmd(0xd0);	//Set row 4 the display
	lcd_print(lcd_build_row("IRRL ", "CM_", "IRRR ", "CM"));
	*/
}
     5f4:	64 96       	adiw	r28, 0x14	; 20
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	bf 90       	pop	r11
     612:	af 90       	pop	r10
     614:	9f 90       	pop	r9
     616:	8f 90       	pop	r8
     618:	7f 90       	pop	r7
     61a:	6f 90       	pop	r6
     61c:	08 95       	ret

0000061e <adcGyro>:
 */
uint16_t adcGyro(){
	// Select which channel to make the ADC (Analog-digital converter) read on, since the gyro is connected to PA4 make a read on port 4.
	// The three bits MUX2-MUX0 selects which channel to read from where MUX2 is MSB and MUX0 is LSB
	// Clear MUX3 so no overflow occurs since sbi uses or.		
	cbi(ADMUX, MUX3);
     61e:	ec e7       	ldi	r30, 0x7C	; 124
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	80 83       	st	Z, r24
	sbi(ADMUX, MUX2);
     628:	80 81       	ld	r24, Z
     62a:	84 60       	ori	r24, 0x04	; 4
     62c:	80 83       	st	Z, r24
	cbi(ADMUX, MUX1);
     62e:	80 81       	ld	r24, Z
     630:	8d 7f       	andi	r24, 0xFD	; 253
     632:	80 83       	st	Z, r24
	cbi(ADMUX, MUX0);
     634:	80 81       	ld	r24, Z
     636:	8e 7f       	andi	r24, 0xFE	; 254
     638:	80 83       	st	Z, r24
	
	// For the ADC to give reliable output we have to make an extra read every time we change channel.
	//(We are also using IR-sensors which need the ADC so we have to do this extra read every time we want a value from the gyro)
	// This read is useless, see AVRs documentation for analog-digital converter.	
	sbi(ADCSRA, ADSC);
     63a:	ea e7       	ldi	r30, 0x7A	; 122
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	80 64       	ori	r24, 0x40	; 64
     642:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     644:	80 81       	ld	r24, Z
     646:	86 fd       	sbrc	r24, 6
     648:	fd cf       	rjmp	.-6      	; 0x644 <adcGyro+0x26>
		
	// Reads the current output from the gyro
	sbi(ADCSRA, ADSC);
     64a:	ea e7       	ldi	r30, 0x7A	; 122
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	80 64       	ori	r24, 0x40	; 64
     652:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     654:	80 81       	ld	r24, Z
     656:	86 fd       	sbrc	r24, 6
     658:	fd cf       	rjmp	.-6      	; 0x654 <adcGyro+0x36>
	
	// Since the ad converted value is saved in 2 8-bit registers
	// we have to read the first 8 low bits to not corrupt the read.
	int low = ADCL;
     65a:	80 91 78 00 	lds	r24, 0x0078
	
	// Shift the 2 high bits 8 steps, and then add the low bits 
	return (ADCH << 8) | low;
     65e:	20 91 79 00 	lds	r18, 0x0079
     662:	90 e0       	ldi	r25, 0x00	; 0
}
     664:	92 2b       	or	r25, r18
     666:	08 95       	ret

00000668 <adcInit>:

void adcInit(){
	// Set the reference voltage to AVCC, 5V
	sbi(ADMUX, REFS0);
     668:	ec e7       	ldi	r30, 0x7C	; 124
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	80 64       	ori	r24, 0x40	; 64
     670:	80 83       	st	Z, r24
	cbi(ADMUX, REFS1);
     672:	80 81       	ld	r24, Z
     674:	8f 77       	andi	r24, 0x7F	; 127
     676:	80 83       	st	Z, r24
	
	// Disable the digital input buffer
	DIDR0 = 0x0F;
     678:	8f e0       	ldi	r24, 0x0F	; 15
     67a:	80 93 7e 00 	sts	0x007E, r24
	
	// Enable the ADC
	sbi(ADCSRA, ADEN);	
     67e:	ea e7       	ldi	r30, 0x7A	; 122
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	80 68       	ori	r24, 0x80	; 128
     686:	80 83       	st	Z, r24
	//		0		1		1	8
	//		1		0		0	16
	//		1		0		1	32
	//		1		1		0	64
	//		1		1		1	128
	sbi(ADCSRA,ADPS0);
     688:	80 81       	ld	r24, Z
     68a:	81 60       	ori	r24, 0x01	; 1
     68c:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS1);
     68e:	80 81       	ld	r24, Z
     690:	82 60       	ori	r24, 0x02	; 2
     692:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS2);
     694:	80 81       	ld	r24, Z
     696:	84 60       	ori	r24, 0x04	; 4
     698:	80 83       	st	Z, r24
     69a:	08 95       	ret

0000069c <__vector_9>:
}


ISR(TIMER2_COMPA_vect){	
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	0b b6       	in	r0, 0x3b	; 59
     6a8:	0f 92       	push	r0
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
	// Read the current output from the ADC
	gyroADCValue = adcGyro();
     6ce:	a7 df       	rcall	.-178    	; 0x61e <adcGyro>
     6d0:	90 93 98 21 	sts	0x2198, r25
     6d4:	80 93 97 21 	sts	0x2197, r24
	
	// Calculate the difference in the newly read value and the one read at the start
	int val = gyroADCValue - defaultAngle;	
     6d8:	20 91 9b 21 	lds	r18, 0x219B
     6dc:	30 91 9c 21 	lds	r19, 0x219C
     6e0:	ec 01       	movw	r28, r24
     6e2:	c2 1b       	sub	r28, r18
     6e4:	d3 0b       	sbc	r29, r19
	
	// Since the ADC doesn't give the same value every time even while standing still we set a threshold
	if (abs(val) > angleThreshold){		
     6e6:	be 01       	movw	r22, r28
     6e8:	22 f4       	brpl	.+8      	; 0x6f2 <__vector_9+0x56>
     6ea:	66 27       	eor	r22, r22
     6ec:	77 27       	eor	r23, r23
     6ee:	6c 1b       	sub	r22, r28
     6f0:	7d 0b       	sbc	r23, r29
     6f2:	07 2e       	mov	r0, r23
     6f4:	00 0c       	add	r0, r0
     6f6:	88 0b       	sbc	r24, r24
     6f8:	99 0b       	sbc	r25, r25
     6fa:	0a d5       	rcall	.+2580   	; 0x1110 <__floatsisf>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e2       	ldi	r20, 0x20	; 32
     702:	51 e4       	ldi	r21, 0x41	; 65
     704:	b5 d5       	rcall	.+2922   	; 0x1270 <__gesf2>
     706:	18 16       	cp	r1, r24
     708:	0c f0       	brlt	.+2      	; 0x70c <__vector_9+0x70>
     70a:	90 c0       	rjmp	.+288    	; 0x82c <__vector_9+0x190>
		// Integrate the angular rate to get the new difference in angle
		float angle = angularRate*gyrotime;
		
		// Add the change to our current angle which gives us the angle which 
		// we are standing in compared to the original angle
		currentAngle += angle;
     70c:	c0 90 53 21 	lds	r12, 0x2153
     710:	d0 90 54 21 	lds	r13, 0x2154
     714:	e0 90 55 21 	lds	r14, 0x2155
     718:	f0 90 56 21 	lds	r15, 0x2156
	int val = gyroADCValue - defaultAngle;	
	
	// Since the ADC doesn't give the same value every time even while standing still we set a threshold
	if (abs(val) > angleThreshold){		
		// To calculate the angular rate (the current speed we are turning at)
		float angularRate = val/gain;
     71c:	be 01       	movw	r22, r28
     71e:	dd 0f       	add	r29, r29
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	f5 d4       	rcall	.+2538   	; 0x1110 <__floatsisf>
     726:	20 91 05 01 	lds	r18, 0x0105
     72a:	30 91 06 01 	lds	r19, 0x0106
     72e:	40 91 07 01 	lds	r20, 0x0107
     732:	50 91 08 01 	lds	r21, 0x0108
     736:	51 d4       	rcall	.+2210   	; 0xfda <__divsf3>
		
		// Integrate the angular rate to get the new difference in angle
		float angle = angularRate*gyrotime;
     738:	20 91 01 01 	lds	r18, 0x0101
     73c:	30 91 02 01 	lds	r19, 0x0102
     740:	40 91 03 01 	lds	r20, 0x0103
     744:	50 91 04 01 	lds	r21, 0x0104
     748:	97 d5       	rcall	.+2862   	; 0x1278 <__mulsf3>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
		
		// Add the change to our current angle which gives us the angle which 
		// we are standing in compared to the original angle
		currentAngle += angle;
     74e:	c7 01       	movw	r24, r14
     750:	b6 01       	movw	r22, r12
     752:	db d3       	rcall	.+1974   	; 0xf0a <__addsf3>
     754:	60 93 53 21 	sts	0x2153, r22
     758:	70 93 54 21 	sts	0x2154, r23
     75c:	80 93 55 21 	sts	0x2155, r24
     760:	90 93 56 21 	sts	0x2156, r25
		
		// To keep the angle within 0 to 360 degrees we either subtract or add 360 degrees 
		// as soon as we go over 360 degrees or below 0 degrees
		while (currentAngle > 359){
     764:	60 91 53 21 	lds	r22, 0x2153
     768:	70 91 54 21 	lds	r23, 0x2154
     76c:	80 91 55 21 	lds	r24, 0x2155
     770:	90 91 56 21 	lds	r25, 0x2156
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e8       	ldi	r19, 0x80	; 128
     778:	43 eb       	ldi	r20, 0xB3	; 179
     77a:	53 e4       	ldi	r21, 0x43	; 67
     77c:	79 d5       	rcall	.+2802   	; 0x1270 <__gesf2>
     77e:	18 16       	cp	r1, r24
     780:	24 f5       	brge	.+72     	; 0x7ca <__vector_9+0x12e>
			currentAngle -= 360;
     782:	60 91 53 21 	lds	r22, 0x2153
     786:	70 91 54 21 	lds	r23, 0x2154
     78a:	80 91 55 21 	lds	r24, 0x2155
     78e:	90 91 56 21 	lds	r25, 0x2156
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	44 eb       	ldi	r20, 0xB4	; 180
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	b6 d3       	rcall	.+1900   	; 0xf08 <__subsf3>
     79c:	60 93 53 21 	sts	0x2153, r22
     7a0:	70 93 54 21 	sts	0x2154, r23
     7a4:	80 93 55 21 	sts	0x2155, r24
     7a8:	90 93 56 21 	sts	0x2156, r25
		// we are standing in compared to the original angle
		currentAngle += angle;
		
		// To keep the angle within 0 to 360 degrees we either subtract or add 360 degrees 
		// as soon as we go over 360 degrees or below 0 degrees
		while (currentAngle > 359){
     7ac:	60 91 53 21 	lds	r22, 0x2153
     7b0:	70 91 54 21 	lds	r23, 0x2154
     7b4:	80 91 55 21 	lds	r24, 0x2155
     7b8:	90 91 56 21 	lds	r25, 0x2156
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e8       	ldi	r19, 0x80	; 128
     7c0:	43 eb       	ldi	r20, 0xB3	; 179
     7c2:	53 e4       	ldi	r21, 0x43	; 67
     7c4:	55 d5       	rcall	.+2730   	; 0x1270 <__gesf2>
     7c6:	18 16       	cp	r1, r24
     7c8:	e4 f2       	brlt	.-72     	; 0x782 <__vector_9+0xe6>
			currentAngle -= 360;
		}
		while (currentAngle < 0){
     7ca:	60 91 53 21 	lds	r22, 0x2153
     7ce:	70 91 54 21 	lds	r23, 0x2154
     7d2:	80 91 55 21 	lds	r24, 0x2155
     7d6:	90 91 56 21 	lds	r25, 0x2156
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	a9 01       	movw	r20, r18
     7e0:	f8 d3       	rcall	.+2032   	; 0xfd2 <__cmpsf2>
     7e2:	88 23       	and	r24, r24
     7e4:	1c f5       	brge	.+70     	; 0x82c <__vector_9+0x190>
			currentAngle += 360;
     7e6:	60 91 53 21 	lds	r22, 0x2153
     7ea:	70 91 54 21 	lds	r23, 0x2154
     7ee:	80 91 55 21 	lds	r24, 0x2155
     7f2:	90 91 56 21 	lds	r25, 0x2156
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	44 eb       	ldi	r20, 0xB4	; 180
     7fc:	53 e4       	ldi	r21, 0x43	; 67
     7fe:	85 d3       	rcall	.+1802   	; 0xf0a <__addsf3>
     800:	60 93 53 21 	sts	0x2153, r22
     804:	70 93 54 21 	sts	0x2154, r23
     808:	80 93 55 21 	sts	0x2155, r24
     80c:	90 93 56 21 	sts	0x2156, r25
		// To keep the angle within 0 to 360 degrees we either subtract or add 360 degrees 
		// as soon as we go over 360 degrees or below 0 degrees
		while (currentAngle > 359){
			currentAngle -= 360;
		}
		while (currentAngle < 0){
     810:	60 91 53 21 	lds	r22, 0x2153
     814:	70 91 54 21 	lds	r23, 0x2154
     818:	80 91 55 21 	lds	r24, 0x2155
     81c:	90 91 56 21 	lds	r25, 0x2156
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	a9 01       	movw	r20, r18
     826:	d5 d3       	rcall	.+1962   	; 0xfd2 <__cmpsf2>
     828:	88 23       	and	r24, r24
     82a:	ec f2       	brlt	.-70     	; 0x7e6 <__vector_9+0x14a>
			currentAngle += 360;
		}
	}
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	0f 90       	pop	r0
     852:	0b be       	out	0x3b, r0	; 59
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <getBias>:

void getBias()
{
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	89 ef       	ldi	r24, 0xF9	; 249
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <getBias+0xc>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <getBias+0x12>
     870:	00 00       	nop
     872:	c5 e0       	ldi	r28, 0x05	; 5
     874:	d0 e0       	ldi	r29, 0x00	; 0
	
	_delay_ms(1);
	// Make a read straight in the beginning to give a value which will count as 0 degrees
	
	int sum = 0;	
     876:	00 e0       	ldi	r16, 0x00	; 0
     878:	10 e0       	ldi	r17, 0x00	; 0
     87a:	89 ef       	ldi	r24, 0xF9	; 249
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <getBias+0x20>
     882:	00 c0       	rjmp	.+0      	; 0x884 <getBias+0x26>
     884:	00 00       	nop
	
	for (int i = 0; i < 5; i++)
	{
		_delay_ms(1);
		sum += adcGyro();
     886:	cb de       	rcall	.-618    	; 0x61e <adcGyro>
     888:	08 0f       	add	r16, r24
     88a:	19 1f       	adc	r17, r25
     88c:	21 97       	sbiw	r28, 0x01	; 1
	_delay_ms(1);
	// Make a read straight in the beginning to give a value which will count as 0 degrees
	
	int sum = 0;	
	
	for (int i = 0; i < 5; i++)
     88e:	a9 f7       	brne	.-22     	; 0x87a <getBias+0x1c>
	{
		_delay_ms(1);
		sum += adcGyro();
	}	
	
	int average = sum/5;
     890:	c8 01       	movw	r24, r16
     892:	65 e0       	ldi	r22, 0x05	; 5
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	53 d5       	rcall	.+2726   	; 0x133e <__divmodhi4>
	
	
	defaultAngle = average;
     898:	70 93 9c 21 	sts	0x219C, r23
     89c:	60 93 9b 21 	sts	0x219B, r22
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <initTimer>:

void initTimer(){	
	// Set what frequency the timer will run on, setting the prescalar to 1024
	// will give us a clock which counts to 15625, since we have a 16MHz clock 
	// Set prescalar to 1024
	sbi(TCCR2B, CS22);
     8aa:	e1 eb       	ldi	r30, 0xB1	; 177
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	84 60       	ori	r24, 0x04	; 4
     8b2:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     8b4:	80 81       	ld	r24, Z
     8b6:	82 60       	ori	r24, 0x02	; 2
     8b8:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);
     8ba:	80 81       	ld	r24, Z
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	80 83       	st	Z, r24
	
	// Enables the timer interrupt
	sbi(TIMSK2, OCIE2A);
     8c0:	a0 e7       	ldi	r26, 0x70	; 112
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	8c 91       	ld	r24, X
     8c6:	82 60       	ori	r24, 0x02	; 2
     8c8:	8c 93       	st	X, r24
	
	// Set the timer mode to be CTC(Clear timer on Compare match)
	// Making the timer to count to the value specified in OCR2A and then reset
	sbi(TCCR2B,WGM12);
     8ca:	80 81       	ld	r24, Z
     8cc:	88 60       	ori	r24, 0x08	; 8
     8ce:	80 83       	st	Z, r24
	
	// Setting the OCR2A to 50 will give us an interrupt which occurs every 3ms 
	OCR2A = 50;
     8d0:	82 e3       	ldi	r24, 0x32	; 50
     8d2:	80 93 b3 00 	sts	0x00B3, r24
     8d6:	08 95       	ret

000008d8 <gyroInit>:
}

void gyroInit()
{
	// Initiate the ADC
	adcInit();	
     8d8:	c7 de       	rcall	.-626    	; 0x668 <adcInit>
	// Initatate the timer used for the gyro
	initTimer();
     8da:	e7 cf       	rjmp	.-50     	; 0x8aa <initTimer>
     8dc:	08 95       	ret

000008de <irRead>:

#pragma IR sensor
int irRead(uint8_t channel){
	// Read from ADMUX channel
	channel &= 0b00000011;
	ADMUX &= 0b11111000;
     8de:	ec e7       	ldi	r30, 0x7C	; 124
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	90 81       	ld	r25, Z
     8e4:	98 7f       	andi	r25, 0xF8	; 248
     8e6:	90 83       	st	Z, r25
	ADMUX |= channel;
     8e8:	90 81       	ld	r25, Z


#pragma IR sensor
int irRead(uint8_t channel){
	// Read from ADMUX channel
	channel &= 0b00000011;
     8ea:	83 70       	andi	r24, 0x03	; 3
	ADMUX &= 0b11111000;
	ADMUX |= channel;
     8ec:	98 2b       	or	r25, r24
     8ee:	90 83       	st	Z, r25
	
	// Start first conversion (useless)
	sbi(ADCSRA, ADSC);
     8f0:	ea e7       	ldi	r30, 0x7A	; 122
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	80 64       	ori	r24, 0x40	; 64
     8f8:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA,ADSC);
     8fa:	80 81       	ld	r24, Z
     8fc:	86 fd       	sbrc	r24, 6
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <irRead+0x1c>
	
	//_delay_ms(5);
	
	// Start second conversion
	sbi(ADCSRA, ADSC);
     900:	ea e7       	ldi	r30, 0x7A	; 122
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	80 64       	ori	r24, 0x40	; 64
     908:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA,ADSC);
     90a:	80 81       	ld	r24, Z
     90c:	86 fd       	sbrc	r24, 6
     90e:	fd cf       	rjmp	.-6      	; 0x90a <irRead+0x2c>
	
	int low = ADCL;
     910:	80 91 78 00 	lds	r24, 0x0078
	int highAndLow = (ADCH << 8) | low;	
     914:	20 91 79 00 	lds	r18, 0x0079
     918:	90 e0       	ldi	r25, 0x00	; 0
	
	return highAndLow;
}
     91a:	92 2b       	or	r25, r18
     91c:	08 95       	ret

0000091e <irInit>:

void irInit(){
	
	//DDRA = 0x00;
	// Use AREF = AVCC
	sbi(ADMUX, REFS0);
     91e:	ec e7       	ldi	r30, 0x7C	; 124
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	80 64       	ori	r24, 0x40	; 64
     926:	80 83       	st	Z, r24
	cbi(ADMUX, REFS1);	
     928:	80 81       	ld	r24, Z
     92a:	8f 77       	andi	r24, 0x7F	; 127
     92c:	80 83       	st	Z, r24
	
	DIDR0 = 0xFF;
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	80 93 7e 00 	sts	0x007E, r24
	
	// Enable ADC
	sbi(ADCSRA, ADEN);
     934:	ea e7       	ldi	r30, 0x7A	; 122
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	80 68       	ori	r24, 0x80	; 128
     93c:	80 83       	st	Z, r24
	//		0		1		1	8
	//		1		0		0	16
	//		1		0		1	32	
	//		1		1		0	64
	//		1		1		1	128	
	sbi(ADCSRA,ADPS0);
     93e:	80 81       	ld	r24, Z
     940:	81 60       	ori	r24, 0x01	; 1
     942:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS1);	
     944:	80 81       	ld	r24, Z
     946:	82 60       	ori	r24, 0x02	; 2
     948:	80 83       	st	Z, r24
	sbi(ADCSRA,ADPS2);	
     94a:	80 81       	ld	r24, Z
     94c:	84 60       	ori	r24, 0x04	; 4
     94e:	80 83       	st	Z, r24
     950:	08 95       	ret

00000952 <readAllIr>:
}

#pragma endregion

void readAllIr()
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
	// OBS! ULTRA SOUND WORKS WORSE WHEN YOU USE CLI AND SEI
	cli();
     956:	f8 94       	cli
	//IR_read(IR_channel);
	IR_values[0] = irRead(0);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	c1 df       	rcall	.-126    	; 0x8de <irRead>
     95c:	cd e9       	ldi	r28, 0x9D	; 157
     95e:	d1 e2       	ldi	r29, 0x21	; 33
     960:	99 83       	std	Y+1, r25	; 0x01
     962:	88 83       	st	Y, r24
	IR_values[1] = irRead(1);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	bb df       	rcall	.-138    	; 0x8de <irRead>
     968:	9b 83       	std	Y+3, r25	; 0x03
     96a:	8a 83       	std	Y+2, r24	; 0x02
	IR_values[2] = irRead(2);
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	b7 df       	rcall	.-146    	; 0x8de <irRead>
     970:	9d 83       	std	Y+5, r25	; 0x05
     972:	8c 83       	std	Y+4, r24	; 0x04
	IR_values[3] = irRead(3);
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	b3 df       	rcall	.-154    	; 0x8de <irRead>
     978:	9f 83       	std	Y+7, r25	; 0x07
     97a:	8e 83       	std	Y+6, r24	; 0x06
	sei();	
     97c:	78 94       	sei
		
	// Needs adjustment, just placeholding
	IRBR = sensorZero[IR_values[0]];
     97e:	e8 81       	ld	r30, Y
     980:	f9 81       	ldd	r31, Y+1	; 0x01
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	e7 5f       	subi	r30, 0xF7	; 247
     988:	f6 4e       	sbci	r31, 0xE6	; 230
     98a:	80 81       	ld	r24, Z
     98c:	80 93 57 21 	sts	0x2157, r24
	IRBL = sensorOne[IR_values[1]];
     990:	ea 81       	ldd	r30, Y+2	; 0x02
     992:	fb 81       	ldd	r31, Y+3	; 0x03
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e7 5f       	subi	r30, 0xF7	; 247
     99a:	fe 4e       	sbci	r31, 0xEE	; 238
     99c:	80 81       	ld	r24, Z
     99e:	80 93 58 21 	sts	0x2158, r24
	IRFL = sensorTwo[IR_values[2]];
     9a2:	ec 81       	ldd	r30, Y+4	; 0x04
     9a4:	fd 81       	ldd	r31, Y+5	; 0x05
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	e7 5f       	subi	r30, 0xF7	; 247
     9ac:	f6 4f       	sbci	r31, 0xF6	; 246
     9ae:	80 81       	ld	r24, Z
     9b0:	80 93 5a 21 	sts	0x215A, r24
	IRFR = sensorThree[IR_values[3]];	
     9b4:	ee 81       	ldd	r30, Y+6	; 0x06
     9b6:	ff 81       	ldd	r31, Y+7	; 0x07
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	e7 5f       	subi	r30, 0xF7	; 247
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	80 81       	ld	r24, Z
     9c2:	80 93 59 21 	sts	0x2159, r24
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <reflex_init>:
#include "Reflexsensormodul.h"

void reflex_init()
{
	//PORTB set to output
	DDRB = 0xff;
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	84 b9       	out	0x04, r24	; 4
	//PB0 set as input
	DDRB &= ~(1<<DDB0);
     9d0:	20 98       	cbi	0x04, 0	; 4
	reflex_data = 0;
     9d2:	10 92 ae 21 	sts	0x21AE, r1
     9d6:	10 92 ad 21 	sts	0x21AD, r1
	reflexValue1 = 0;
     9da:	10 92 a8 21 	sts	0x21A8, r1
     9de:	10 92 a7 21 	sts	0x21A7, r1
	reflexValue11 = 0;
     9e2:	10 92 ac 21 	sts	0x21AC, r1
     9e6:	10 92 ab 21 	sts	0x21AB, r1
	threshold = 600;
     9ea:	88 e5       	ldi	r24, 0x58	; 88
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	90 93 aa 21 	sts	0x21AA, r25
     9f2:	80 93 a9 21 	sts	0x21A9, r24
     9f6:	08 95       	ret

000009f8 <adcRead>:
}

int adcRead(){	
	cbi(ADMUX, MUX3);
     9f8:	ec e7       	ldi	r30, 0x7C	; 124
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	87 7f       	andi	r24, 0xF7	; 247
     a00:	80 83       	st	Z, r24
	sbi(ADMUX, MUX2);
     a02:	80 81       	ld	r24, Z
     a04:	84 60       	ori	r24, 0x04	; 4
     a06:	80 83       	st	Z, r24
	cbi(ADMUX, MUX1);
     a08:	80 81       	ld	r24, Z
     a0a:	8d 7f       	andi	r24, 0xFD	; 253
     a0c:	80 83       	st	Z, r24
	sbi(ADMUX, MUX0);	
     a0e:	80 81       	ld	r24, Z
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	80 83       	st	Z, r24
	
	// For the ADC to give reliable output we have to make an extra read every time we change channel.
	//(We are also using IR-sensors which need the ADC so we have to do this extra read every time we want a value from the gyro)
	// This read is useless, see AVRs documentation for analog-digital converter.
	sbi(ADCSRA, ADSC);
     a14:	ea e7       	ldi	r30, 0x7A	; 122
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	80 64       	ori	r24, 0x40	; 64
     a1c:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     a1e:	80 81       	ld	r24, Z
     a20:	86 fd       	sbrc	r24, 6
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <adcRead+0x26>
	
	// Reads the current output from the gyro
	sbi(ADCSRA, ADSC);
     a24:	ea e7       	ldi	r30, 0x7A	; 122
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	80 64       	ori	r24, 0x40	; 64
     a2c:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     a2e:	80 81       	ld	r24, Z
     a30:	86 fd       	sbrc	r24, 6
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <adcRead+0x36>
	
	// Since the ad converted value is saved in 2 8-bit registers
	// we have to read the first 8 low bits to not corrupt the read.
	int low = ADCL;
     a34:	80 91 78 00 	lds	r24, 0x0078
	
	// Shift the 2 high bits 8 steps, and then add the low bits
	return (ADCH << 8) | low;	
     a38:	20 91 79 00 	lds	r18, 0x0079
     a3c:	90 e0       	ldi	r25, 0x00	; 0
}
     a3e:	92 2b       	or	r25, r18
     a40:	08 95       	ret

00000a42 <reflex_run>:

void reflex_run(int channel_select)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
	//Sends channel data on PB1-PB4 and enable signal on PB5.
	PORTB = (channel_select<<1) | (1<<PB5);
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	80 62       	ori	r24, 0x20	; 32
     a4e:	85 b9       	out	0x05, r24	; 5
     a50:	87 e8       	ldi	r24, 0x87	; 135
     a52:	93 e1       	ldi	r25, 0x13	; 19
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <reflex_run+0x12>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <reflex_run+0x18>
     a5a:	00 00       	nop
	//int testing = 0b00000111111;
	//Receives response data on PB0
	_delay_ms(20);
	int compareData = adcRead();
     a5c:	cd df       	rcall	.-102    	; 0x9f8 <adcRead>
	// Saves the values of sensor 1 and 11 in seperate variables, used for the display and to calibrate the threshold
	if (channel_select == 0){
     a5e:	20 97       	sbiw	r28, 0x00	; 0
     a60:	29 f4       	brne	.+10     	; 0xa6c <reflex_run+0x2a>
		reflexValue1 = compareData;
     a62:	90 93 a8 21 	sts	0x21A8, r25
     a66:	80 93 a7 21 	sts	0x21A7, r24
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <reflex_run+0x38>
	}
	else if (channel_select == 10){
     a6c:	ca 30       	cpi	r28, 0x0A	; 10
     a6e:	d1 05       	cpc	r29, r1
     a70:	21 f4       	brne	.+8      	; 0xa7a <reflex_run+0x38>
		reflexValue11 = compareData;
     a72:	90 93 ac 21 	sts	0x21AC, r25
     a76:	80 93 ab 21 	sts	0x21AB, r24
	}
	if (compareData < threshold){
     a7a:	20 91 a9 21 	lds	r18, 0x21A9
     a7e:	30 91 aa 21 	lds	r19, 0x21AA
     a82:	82 17       	cp	r24, r18
     a84:	93 07       	cpc	r25, r19
     a86:	a4 f4       	brge	.+40     	; 0xab0 <reflex_run+0x6e>
		reflex_data &= ~(1 << channel_select);
     a88:	20 91 ad 21 	lds	r18, 0x21AD
     a8c:	30 91 ae 21 	lds	r19, 0x21AE
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <reflex_run+0x58>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	ca 95       	dec	r28
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <reflex_run+0x54>
     a9e:	80 95       	com	r24
     aa0:	90 95       	com	r25
     aa2:	82 23       	and	r24, r18
     aa4:	93 23       	and	r25, r19
     aa6:	90 93 ae 21 	sts	0x21AE, r25
     aaa:	80 93 ad 21 	sts	0x21AD, r24
     aae:	11 c0       	rjmp	.+34     	; 0xad2 <reflex_run+0x90>
	}
	else{
		reflex_data |= (1 << channel_select);
     ab0:	20 91 ad 21 	lds	r18, 0x21AD
     ab4:	30 91 ae 21 	lds	r19, 0x21AE
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <reflex_run+0x80>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	ca 95       	dec	r28
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <reflex_run+0x7c>
     ac6:	82 2b       	or	r24, r18
     ac8:	93 2b       	or	r25, r19
     aca:	90 93 ae 21 	sts	0x21AE, r25
     ace:	80 93 ad 21 	sts	0x21AD, r24
	}
	
	/*
	reflex_data[channel_select] = (PINB & (1<<PB0));	
	*/
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <reflex_run_all>:

void reflex_run_all(){
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
	for (int i = 11; i >= 0; i--)
     adc:	cb e0       	ldi	r28, 0x0B	; 11
     ade:	d0 e0       	ldi	r29, 0x00	; 0
	{
		reflex_run(i);
     ae0:	ce 01       	movw	r24, r28
     ae2:	af df       	rcall	.-162    	; 0xa42 <reflex_run>
	reflex_data[channel_select] = (PINB & (1<<PB0));	
	*/
}

void reflex_run_all(){
	for (int i = 11; i >= 0; i--)
     ae4:	21 97       	sbiw	r28, 0x01	; 1
     ae6:	e0 f7       	brcc	.-8      	; 0xae0 <reflex_run_all+0x8>
	{
		reflex_run(i);
	}
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <calibrateReflexSensors>:


void calibrateReflexSensors(){	
	// Set threshold to the value in the middle of the values from sensor 1 and 11
	threshold = (reflexValue1 + reflexValue11)/2;	
     aee:	20 91 a7 21 	lds	r18, 0x21A7
     af2:	30 91 a8 21 	lds	r19, 0x21A8
     af6:	80 91 ab 21 	lds	r24, 0x21AB
     afa:	90 91 ac 21 	lds	r25, 0x21AC
     afe:	82 0f       	add	r24, r18
     b00:	93 1f       	adc	r25, r19
     b02:	99 23       	and	r25, r25
     b04:	0c f4       	brge	.+2      	; 0xb08 <calibrateReflexSensors+0x1a>
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	95 95       	asr	r25
     b0a:	87 95       	ror	r24
     b0c:	90 93 aa 21 	sts	0x21AA, r25
     b10:	80 93 a9 21 	sts	0x21A9, r24
     b14:	08 95       	ret

00000b16 <combineData>:
bool startButton;
//bool mode;
int reflex;
volatile bool mode; 

void combineData(){
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
	//startButton = false;
	TWIdata[0] = 0x00; // trash data because the first two bytes dont work
     b1a:	e0 91 5d 21 	lds	r30, 0x215D
     b1e:	f0 91 5e 21 	lds	r31, 0x215E
     b22:	10 82       	st	Z, r1
	TWIdata[1] = 0x00;
     b24:	e0 91 5d 21 	lds	r30, 0x215D
     b28:	f0 91 5e 21 	lds	r31, 0x215E
     b2c:	11 82       	std	Z+1, r1	; 0x01
	TWIdata[2] = (1<<7) | (startButton << 6) | (mode << 5);
     b2e:	c0 91 5d 21 	lds	r28, 0x215D
     b32:	d0 91 5e 21 	lds	r29, 0x215E
     b36:	90 91 b3 21 	lds	r25, 0x21B3
     b3a:	80 91 b4 21 	lds	r24, 0x21B4
     b3e:	40 e4       	ldi	r20, 0x40	; 64
     b40:	84 9f       	mul	r24, r20
     b42:	90 01       	movw	r18, r0
     b44:	11 24       	eor	r1, r1
     b46:	40 e2       	ldi	r20, 0x20	; 32
     b48:	94 9f       	mul	r25, r20
     b4a:	c0 01       	movw	r24, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	82 2b       	or	r24, r18
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	8a 83       	std	Y+2, r24	; 0x02
	TWIdata[3] = (reflex_data >> 8);
     b54:	80 91 ad 21 	lds	r24, 0x21AD
     b58:	90 91 ae 21 	lds	r25, 0x21AE
     b5c:	9b 83       	std	Y+3, r25	; 0x03
	TWIdata[4] = reflex_data;
     b5e:	80 91 ad 21 	lds	r24, 0x21AD
     b62:	90 91 ae 21 	lds	r25, 0x21AE
     b66:	8c 83       	std	Y+4, r24	; 0x04
	TWIdata[5] = ((int)currentAngle >> 8);
     b68:	60 91 53 21 	lds	r22, 0x2153
     b6c:	70 91 54 21 	lds	r23, 0x2154
     b70:	80 91 55 21 	lds	r24, 0x2155
     b74:	90 91 56 21 	lds	r25, 0x2156
     b78:	98 d2       	rcall	.+1328   	; 0x10aa <__fixsfsi>
     b7a:	7d 83       	std	Y+5, r23	; 0x05
	TWIdata[6] = (int)currentAngle;
     b7c:	60 91 53 21 	lds	r22, 0x2153
     b80:	70 91 54 21 	lds	r23, 0x2154
     b84:	80 91 55 21 	lds	r24, 0x2155
     b88:	90 91 56 21 	lds	r25, 0x2156
     b8c:	8e d2       	rcall	.+1308   	; 0x10aa <__fixsfsi>
     b8e:	6e 83       	std	Y+6, r22	; 0x06
	TWIdata[7] = ((int)distanceFront >> 8);
     b90:	60 91 af 21 	lds	r22, 0x21AF
     b94:	70 91 b0 21 	lds	r23, 0x21B0
     b98:	80 91 b1 21 	lds	r24, 0x21B1
     b9c:	90 91 b2 21 	lds	r25, 0x21B2
     ba0:	84 d2       	rcall	.+1288   	; 0x10aa <__fixsfsi>
     ba2:	7f 83       	std	Y+7, r23	; 0x07
	TWIdata[8] = (int)distanceFront;
     ba4:	60 91 af 21 	lds	r22, 0x21AF
     ba8:	70 91 b0 21 	lds	r23, 0x21B0
     bac:	80 91 b1 21 	lds	r24, 0x21B1
     bb0:	90 91 b2 21 	lds	r25, 0x21B2
     bb4:	7a d2       	rcall	.+1268   	; 0x10aa <__fixsfsi>
     bb6:	68 87       	std	Y+8, r22	; 0x08
	TWIdata[9] = ((int)distanceBack >> 8);
     bb8:	60 91 b5 21 	lds	r22, 0x21B5
     bbc:	70 91 b6 21 	lds	r23, 0x21B6
     bc0:	80 91 b7 21 	lds	r24, 0x21B7
     bc4:	90 91 b8 21 	lds	r25, 0x21B8
     bc8:	70 d2       	rcall	.+1248   	; 0x10aa <__fixsfsi>
     bca:	79 87       	std	Y+9, r23	; 0x09
	TWIdata[10] = (int)distanceBack;
     bcc:	60 91 b5 21 	lds	r22, 0x21B5
     bd0:	70 91 b6 21 	lds	r23, 0x21B6
     bd4:	80 91 b7 21 	lds	r24, 0x21B7
     bd8:	90 91 b8 21 	lds	r25, 0x21B8
     bdc:	66 d2       	rcall	.+1228   	; 0x10aa <__fixsfsi>
     bde:	6a 87       	std	Y+10, r22	; 0x0a
	TWIdata[11] = IRFR;
     be0:	80 91 59 21 	lds	r24, 0x2159
     be4:	8b 87       	std	Y+11, r24	; 0x0b
	TWIdata[12] = IRFL;
     be6:	80 91 5a 21 	lds	r24, 0x215A
     bea:	8c 87       	std	Y+12, r24	; 0x0c
	TWIdata[13] = IRBR;
     bec:	80 91 57 21 	lds	r24, 0x2157
     bf0:	8d 87       	std	Y+13, r24	; 0x0d
	TWIdata[14] = IRBL;
     bf2:	80 91 58 21 	lds	r24, 0x2158
     bf6:	8e 87       	std	Y+14, r24	; 0x0e
	TWIdata[15] = 0;
     bf8:	1f 86       	std	Y+15, r1	; 0x0f
	TWIdata[16] = 0;
     bfa:	18 8a       	std	Y+16, r1	; 0x10
	TWIdata[12] = 'm';
	TWIdata[13] = 'n';
	TWIdata[14] = 'o';
	TWIdata[15] = 'p';
	TWIdata[16] = 'q';*/
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <__vector_5>:

ISR(PCINT1_vect){
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
	if (bit_is_set(PINB,7)){
     c10:	1f 9b       	sbis	0x03, 7	; 3
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <__vector_5+0x1e>
		startButton ^= true;
     c14:	90 91 b4 21 	lds	r25, 0x21B4
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	89 27       	eor	r24, r25
     c1c:	80 93 b4 21 	sts	0x21B4, r24
	}
}
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <startButtonInit>:

void startButtonInit(){
	DDRB &= ~(1<<PB7);
     c2e:	27 98       	cbi	0x04, 7	; 4
	
	PCMSK1 |= (1 << PCINT15); // Enables external interrupt on PB7
     c30:	ec e6       	ldi	r30, 0x6C	; 108
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	80 83       	st	Z, r24
		
	PCICR |= (1 << PCIE1);			
     c3a:	e8 e6       	ldi	r30, 0x68	; 104
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	80 83       	st	Z, r24
     c44:	08 95       	ret

00000c46 <main>:
     c46:	2f e7       	ldi	r18, 0x7F	; 127
     c48:	84 e8       	ldi	r24, 0x84	; 132
     c4a:	9e e1       	ldi	r25, 0x1E	; 30
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <main+0x6>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <main+0x10>
     c56:	00 00       	nop
}

int main(void){
	_delay_ms(10000); // Gives time for everything to start up before we init.
	startButton = false;
     c58:	10 92 b4 21 	sts	0x21B4, r1
	mode = false;
     c5c:	10 92 b3 21 	sts	0x21B3, r1
	irInit();	
     c60:	5e de       	rcall	.-836    	; 0x91e <irInit>
	lcd_init();
     c62:	1b db       	rcall	.-2506   	; 0x29a <lcd_init>
	gyroInit();	
     c64:	39 de       	rcall	.-910    	; 0x8d8 <gyroInit>
	initBuss(0b00000100);
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	db da       	rcall	.-2634   	; 0x220 <initBuss>
	ultrasoundInit();
     c6a:	48 d1       	rcall	.+656    	; 0xefc <ultrasoundInit>
	reflex_init();
     c6c:	af de       	rcall	.-674    	; 0x9cc <reflex_init>
	startButtonInit();
     c6e:	df df       	rcall	.-66     	; 0xc2e <startButtonInit>
	combineData();
     c70:	52 df       	rcall	.-348    	; 0xb16 <combineData>
	test =0;
     c72:	10 92 62 21 	sts	0x2162, r1
     c76:	10 92 61 21 	sts	0x2161, r1
	getBias();
     c7a:	f1 dd       	rcall	.-1054   	; 0x85e <getBias>
	sei();
     c7c:	78 94       	sei
	DDRC |= (1 << 7); // Set PC7 as output for testing
     c7e:	3f 9a       	sbi	0x07, 7	; 7
	DDRB |= (1 << 0);
     c80:	20 9a       	sbi	0x04, 0	; 4
	// DDRA &= ~(1 << 7); // Set PA7 as input to get information from the switch ULTRA SOUND USES THIS PIN
	while(1){
		//int test = PINA7;
		if (bit_is_set(PINB, 0)){
			mode = true;
     c82:	88 24       	eor	r8, r8
     c84:	83 94       	inc	r8
	DDRC |= (1 << 7); // Set PC7 as output for testing
	DDRB |= (1 << 0);
	// DDRA &= ~(1 << 7); // Set PA7 as input to get information from the switch ULTRA SOUND USES THIS PIN
	while(1){
		//int test = PINA7;
		if (bit_is_set(PINB, 0)){
     c86:	18 9b       	sbis	0x03, 0	; 3
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <main+0x4a>
			mode = true;
     c8a:	80 92 b3 21 	sts	0x21B3, r8
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <main+0x4e>
		}
		else{
			mode = false;
     c90:	10 92 b3 21 	sts	0x21B3, r1
     c94:	83 ec       	ldi	r24, 0xC3	; 195
     c96:	99 e0       	ldi	r25, 0x09	; 9
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x52>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <main+0x58>
     c9e:	00 00       	nop
		}
						
		_delay_ms(10); // Necessary but why?
		readAllIr();
     ca0:	58 de       	rcall	.-848    	; 0x952 <readAllIr>
		reflex_run_all();
     ca2:	1a df       	rcall	.-460    	; 0xad8 <reflex_run_all>
		// OBS: If it is not used, it takes a lot of time for the data on the bus from the sensor module to the communications module to transfer. But everything else works properly.
		//while(sending); //wait with turning off interrupts until we are done sending data
		
		// OBS! ULTRA SOUND WORKS WORSE WHEN YOU USE CLI AND SEI
		
		cli();
     ca4:	f8 94       	cli
		lcd_update(mode,threshold,distanceFront, reflexValue1,IRFL, IRFR, IRBL, IRBR);
     ca6:	a0 90 57 21 	lds	r10, 0x2157
     caa:	c0 90 58 21 	lds	r12, 0x2158
     cae:	e0 90 59 21 	lds	r14, 0x2159
     cb2:	00 91 5a 21 	lds	r16, 0x215A
     cb6:	60 90 a7 21 	lds	r6, 0x21A7
     cba:	70 90 a8 21 	lds	r7, 0x21A8
     cbe:	60 91 af 21 	lds	r22, 0x21AF
     cc2:	70 91 b0 21 	lds	r23, 0x21B0
     cc6:	80 91 b1 21 	lds	r24, 0x21B1
     cca:	90 91 b2 21 	lds	r25, 0x21B2
     cce:	c0 91 a9 21 	lds	r28, 0x21A9
     cd2:	d0 91 aa 21 	lds	r29, 0x21AA
     cd6:	90 90 b3 21 	lds	r9, 0x21B3
     cda:	b1 2c       	mov	r11, r1
     cdc:	d1 2c       	mov	r13, r1
     cde:	f1 2c       	mov	r15, r1
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	e3 d1       	rcall	.+966    	; 0x10aa <__fixsfsi>
     ce4:	93 01       	movw	r18, r6
     ce6:	ab 01       	movw	r20, r22
     ce8:	be 01       	movw	r22, r28
     cea:	89 2d       	mov	r24, r9
     cec:	e5 db       	rcall	.-2102   	; 0x4b8 <lcd_update>
		combineData();
     cee:	13 df       	rcall	.-474    	; 0xb16 <combineData>
		sei();		
     cf0:	78 94       	sei
	}
     cf2:	c9 cf       	rjmp	.-110    	; 0xc86 <main+0x40>

00000cf4 <timer1_init>:
volatile double distance;

// initialize timer1
void timer1_init()
{
	TCNT1 = 0; // initialize counter
     cf4:	10 92 85 00 	sts	0x0085, r1
     cf8:	10 92 84 00 	sts	0x0084, r1
	
	// -- CALCULATION OF OCR1A VALUE TO GENERATE A PULSE EVERY 100ms --
	// OCR1A = (Clock_Speed / (Prescaler * Output_frequency)) - 1
	//		= (16000000 / (64 * 10)) - 1
	//		= 24999
	OCR1A = 24999; // Set CTC compare value to 24999, which is 100 ms (aka 10 Hz)
     cfc:	87 ea       	ldi	r24, 0xA7	; 167
     cfe:	91 e6       	ldi	r25, 0x61	; 97
     d00:	90 93 89 00 	sts	0x0089, r25
     d04:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A); // enable compare interrupt
     d08:	ef e6       	ldi	r30, 0x6F	; 111
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 60       	ori	r24, 0x02	; 2
     d10:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << WGM12); // Configure timer1 for CTC mode
     d12:	e1 e8       	ldi	r30, 0x81	; 129
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 60       	ori	r24, 0x08	; 8
     d1a:	80 83       	st	Z, r24
	
	// OBS!!! TESTING WITH CS12 instead of CS11 which gives a prescale with 1024
	TCCR1B |= (1 << CS11)|(1 << CS10);  // Prescale with 64, setting the frequency of timer1 to 2MHz
     d1c:	80 81       	ld	r24, Z
     d1e:	83 60       	ori	r24, 0x03	; 3
     d20:	80 83       	st	Z, r24
     d22:	08 95       	ret

00000d24 <ext_interrupt_init>:
}

// initialize external interrupt on PCINT0 and PCINT2
void ext_interrupt_init() {
	PCMSK2 |= (1 << PCINT22); // Enables external interrupt on PC6 (Front)
     d24:	ed e6       	ldi	r30, 0x6D	; 109
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 64       	ori	r24, 0x40	; 64
     d2c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT7); // Enables external interrupt on PA7 (Rear)
     d2e:	eb e6       	ldi	r30, 0x6B	; 107
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 68       	ori	r24, 0x80	; 128
     d36:	80 83       	st	Z, r24
	
	// When the PCIE2 bit is set (one) and the I-bit in the Status Register (SREG) is set (one), pin
	// change interrupt 2 is enabled. Any change on any enabled PCINT23..16 pin will cause an interrupt.
	// When the PCIE0 bit is set (one) and the I-bit in the Status Register (SREG) is set (one), pin
	//change interrupt 0 is enabled. Any change on any enabled PCINT7..0 pin will cause an interrupt.
	PCICR |= (1 << PCIE2) | (1 << PCIE0);	
     d38:	e8 e6       	ldi	r30, 0x68	; 104
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	85 60       	ori	r24, 0x05	; 5
     d40:	80 83       	st	Z, r24
     d42:	08 95       	ret

00000d44 <calculate_distance>:
}

double calculate_distance(volatile int end_value){
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	00 d0       	rcall	.+0      	; 0xd4a <calculate_distance+0x6>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
	double time = end_value * 0.0004;	// SHOULD BE 0.0004!!! 0.0064 is for testing! 4 is how long a clock time period takes in centiseconds
     d52:	69 81       	ldd	r22, Y+1	; 0x01
     d54:	7a 81       	ldd	r23, Y+2	; 0x02
     d56:	07 2e       	mov	r0, r23
     d58:	00 0c       	add	r0, r0
     d5a:	88 0b       	sbc	r24, r24
     d5c:	99 0b       	sbc	r25, r25
     d5e:	d8 d1       	rcall	.+944    	; 0x1110 <__floatsisf>
     d60:	27 e1       	ldi	r18, 0x17	; 23
     d62:	37 eb       	ldi	r19, 0xB7	; 183
     d64:	41 ed       	ldi	r20, 0xD1	; 209
     d66:	59 e3       	ldi	r21, 0x39	; 57
     d68:	87 d2       	rcall	.+1294   	; 0x1278 <__mulsf3>
	double distance = 343 * time/2;		// distance = 343 * time/2, (Speed of sound = 343 m/s in air. Divided by two because the signal bounces back and forth)
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e8       	ldi	r19, 0x80	; 128
     d6e:	4b ea       	ldi	r20, 0xAB	; 171
     d70:	53 e4       	ldi	r21, 0x43	; 67
     d72:	82 d2       	rcall	.+1284   	; 0x1278 <__mulsf3>
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	7d d2       	rcall	.+1274   	; 0x1278 <__mulsf3>
	return distance; // Distance is in centimeters
	// return end_value*0.0686 also works for returning centimeters probably (it's a simplified version)
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <__vector_13>:

ISR (TIMER1_COMPA_vect) {
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	8f 93       	push	r24
	//_delay_us(250);
	//PCMSK2 &= ~(1 << PCINT22); // Disables external interrupt on PC6 (Front)
	//PCMSK0 &= ~(1 << PCINT7); // Disables external interrupt on PA7 (Rear)
	
	PORTA |= (1 << DDA6);	// Set PTI to 1
     d94:	16 9a       	sbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d96:	8a e6       	ldi	r24, 0x6A	; 106
     d98:	8a 95       	dec	r24
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <__vector_13+0x10>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <__vector_13+0x16>
	_delay_us(20);			// Count for 20 micro seconds
	PORTA &= ~(1 << DDA6);	// Set PTI to 0
     d9e:	16 98       	cbi	0x02, 6	; 2
	//_delay_us(250);
	
	//PCMSK2 |= (1 << PCINT22); // Enables external interrupt on PC6 (Front)
	//PCMSK0 |= (1 << PCINT7); // Enables external interrupt on PA7 (Rear)
}
     da0:	8f 91       	pop	r24
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <__vector_6>:

ISR(PCINT2_vect) //interrupt service routine when PCINT2 changes (PC6)
{
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	0b b6       	in	r0, 0x3b	; 59
     db8:	0f 92       	push	r0
     dba:	2f 93       	push	r18
     dbc:	3f 93       	push	r19
     dbe:	4f 93       	push	r20
     dc0:	5f 93       	push	r21
     dc2:	6f 93       	push	r22
     dc4:	7f 93       	push	r23
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
     dca:	af 93       	push	r26
     dcc:	bf 93       	push	r27
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
	if (!(PINC & (1 << DDC6))) // Check if echo line is falling, thats when we want to stop counting. 
     dd2:	36 99       	sbic	0x06, 6	; 6
     dd4:	24 c0       	rjmp	.+72     	; 0xe1e <__vector_6+0x72>
	{
		end_value_front = TCNT1;	// Save the timer value when echo input (PC6) goes low
     dd6:	80 91 84 00 	lds	r24, 0x0084
     dda:	90 91 85 00 	lds	r25, 0x0085
     dde:	90 93 c8 21 	sts	0x21C8, r25
     de2:	80 93 c7 21 	sts	0x21C7, r24
		difference_front = end_value_front - start_value_front;
     de6:	80 91 c7 21 	lds	r24, 0x21C7
     dea:	90 91 c8 21 	lds	r25, 0x21C8
     dee:	20 91 bb 21 	lds	r18, 0x21BB
     df2:	30 91 bc 21 	lds	r19, 0x21BC
     df6:	82 1b       	sub	r24, r18
     df8:	93 0b       	sbc	r25, r19
     dfa:	90 93 c0 21 	sts	0x21C0, r25
     dfe:	80 93 bf 21 	sts	0x21BF, r24
		distanceFront = calculate_distance(difference_front);
     e02:	80 91 bf 21 	lds	r24, 0x21BF
     e06:	90 91 c0 21 	lds	r25, 0x21C0
     e0a:	9c df       	rcall	.-200    	; 0xd44 <calculate_distance>
     e0c:	60 93 af 21 	sts	0x21AF, r22
     e10:	70 93 b0 21 	sts	0x21B0, r23
     e14:	80 93 b1 21 	sts	0x21B1, r24
     e18:	90 93 b2 21 	sts	0x21B2, r25
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <__vector_6+0x82>
	}
	else{
		start_value_front = TCNT1;
     e1e:	80 91 84 00 	lds	r24, 0x0084
     e22:	90 91 85 00 	lds	r25, 0x0085
     e26:	90 93 bc 21 	sts	0x21BC, r25
     e2a:	80 93 bb 21 	sts	0x21BB, r24
	}
}
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0b be       	out	0x3b, r0	; 59
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <__vector_4>:

ISR(PCINT0_vect) //interrupt service routine when PCINT0 changes(PA7)
{	
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	0b b6       	in	r0, 0x3b	; 59
     e60:	0f 92       	push	r0
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
	if (!(PINA & (1 << DDA7)))	// Check if Echo Line is falling, thats when we want to stop counting. 
     e7a:	07 99       	sbic	0x00, 7	; 0
     e7c:	24 c0       	rjmp	.+72     	; 0xec6 <__vector_4+0x72>
	{
		end_value_back = TCNT1;	// Save the timer value when echo input (PA7) goes low
     e7e:	80 91 84 00 	lds	r24, 0x0084
     e82:	90 91 85 00 	lds	r25, 0x0085
     e86:	90 93 ca 21 	sts	0x21CA, r25
     e8a:	80 93 c9 21 	sts	0x21C9, r24
		difference_back = end_value_back - start_value_back;
     e8e:	80 91 c9 21 	lds	r24, 0x21C9
     e92:	90 91 ca 21 	lds	r25, 0x21CA
     e96:	20 91 c1 21 	lds	r18, 0x21C1
     e9a:	30 91 c2 21 	lds	r19, 0x21C2
     e9e:	82 1b       	sub	r24, r18
     ea0:	93 0b       	sbc	r25, r19
     ea2:	90 93 be 21 	sts	0x21BE, r25
     ea6:	80 93 bd 21 	sts	0x21BD, r24
		distanceBack = calculate_distance(difference_back);
     eaa:	80 91 bd 21 	lds	r24, 0x21BD
     eae:	90 91 be 21 	lds	r25, 0x21BE
     eb2:	48 df       	rcall	.-368    	; 0xd44 <calculate_distance>
     eb4:	60 93 b5 21 	sts	0x21B5, r22
     eb8:	70 93 b6 21 	sts	0x21B6, r23
     ebc:	80 93 b7 21 	sts	0x21B7, r24
     ec0:	90 93 b8 21 	sts	0x21B8, r25
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <__vector_4+0x82>
	} else 
	{
		start_value_back = TCNT1;
     ec6:	80 91 84 00 	lds	r24, 0x0084
     eca:	90 91 85 00 	lds	r25, 0x0085
     ece:	90 93 c2 21 	sts	0x21C2, r25
     ed2:	80 93 c1 21 	sts	0x21C1, r24
	}
}
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0b be       	out	0x3b, r0	; 59
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <ultrasoundInit>:

void ultrasoundInit()
{
	DDRA |= (1<<DDA6); // Set PTI (PA6) as output
     efc:	0e 9a       	sbi	0x01, 6	; 1
	DDRA &= ~(1 << 7); // Set PA7 as input
     efe:	0f 98       	cbi	0x01, 7	; 1
	DDRC &= ~(1 << 6); // Set PC6 as input
     f00:	3e 98       	cbi	0x07, 6	; 7
	
	ext_interrupt_init();
     f02:	10 df       	rcall	.-480    	; 0xd24 <ext_interrupt_init>
	timer1_init();
     f04:	f7 ce       	rjmp	.-530    	; 0xcf4 <timer1_init>
     f06:	08 95       	ret

00000f08 <__subsf3>:
     f08:	50 58       	subi	r21, 0x80	; 128

00000f0a <__addsf3>:
     f0a:	bb 27       	eor	r27, r27
     f0c:	aa 27       	eor	r26, r26
     f0e:	0e d0       	rcall	.+28     	; 0xf2c <__addsf3x>
     f10:	75 c1       	rjmp	.+746    	; 0x11fc <__fp_round>
     f12:	66 d1       	rcall	.+716    	; 0x11e0 <__fp_pscA>
     f14:	30 f0       	brcs	.+12     	; 0xf22 <__addsf3+0x18>
     f16:	6b d1       	rcall	.+726    	; 0x11ee <__fp_pscB>
     f18:	20 f0       	brcs	.+8      	; 0xf22 <__addsf3+0x18>
     f1a:	31 f4       	brne	.+12     	; 0xf28 <__addsf3+0x1e>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	11 f4       	brne	.+4      	; 0xf24 <__addsf3+0x1a>
     f20:	1e f4       	brtc	.+6      	; 0xf28 <__addsf3+0x1e>
     f22:	5b c1       	rjmp	.+694    	; 0x11da <__fp_nan>
     f24:	0e f4       	brtc	.+2      	; 0xf28 <__addsf3+0x1e>
     f26:	e0 95       	com	r30
     f28:	e7 fb       	bst	r30, 7
     f2a:	51 c1       	rjmp	.+674    	; 0x11ce <__fp_inf>

00000f2c <__addsf3x>:
     f2c:	e9 2f       	mov	r30, r25
     f2e:	77 d1       	rcall	.+750    	; 0x121e <__fp_split3>
     f30:	80 f3       	brcs	.-32     	; 0xf12 <__addsf3+0x8>
     f32:	ba 17       	cp	r27, r26
     f34:	62 07       	cpc	r22, r18
     f36:	73 07       	cpc	r23, r19
     f38:	84 07       	cpc	r24, r20
     f3a:	95 07       	cpc	r25, r21
     f3c:	18 f0       	brcs	.+6      	; 0xf44 <__addsf3x+0x18>
     f3e:	71 f4       	brne	.+28     	; 0xf5c <__addsf3x+0x30>
     f40:	9e f5       	brtc	.+102    	; 0xfa8 <__addsf3x+0x7c>
     f42:	8f c1       	rjmp	.+798    	; 0x1262 <__fp_zero>
     f44:	0e f4       	brtc	.+2      	; 0xf48 <__addsf3x+0x1c>
     f46:	e0 95       	com	r30
     f48:	0b 2e       	mov	r0, r27
     f4a:	ba 2f       	mov	r27, r26
     f4c:	a0 2d       	mov	r26, r0
     f4e:	0b 01       	movw	r0, r22
     f50:	b9 01       	movw	r22, r18
     f52:	90 01       	movw	r18, r0
     f54:	0c 01       	movw	r0, r24
     f56:	ca 01       	movw	r24, r20
     f58:	a0 01       	movw	r20, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	ff 27       	eor	r31, r31
     f5e:	59 1b       	sub	r21, r25
     f60:	99 f0       	breq	.+38     	; 0xf88 <__addsf3x+0x5c>
     f62:	59 3f       	cpi	r21, 0xF9	; 249
     f64:	50 f4       	brcc	.+20     	; 0xf7a <__addsf3x+0x4e>
     f66:	50 3e       	cpi	r21, 0xE0	; 224
     f68:	68 f1       	brcs	.+90     	; 0xfc4 <__addsf3x+0x98>
     f6a:	1a 16       	cp	r1, r26
     f6c:	f0 40       	sbci	r31, 0x00	; 0
     f6e:	a2 2f       	mov	r26, r18
     f70:	23 2f       	mov	r18, r19
     f72:	34 2f       	mov	r19, r20
     f74:	44 27       	eor	r20, r20
     f76:	58 5f       	subi	r21, 0xF8	; 248
     f78:	f3 cf       	rjmp	.-26     	; 0xf60 <__addsf3x+0x34>
     f7a:	46 95       	lsr	r20
     f7c:	37 95       	ror	r19
     f7e:	27 95       	ror	r18
     f80:	a7 95       	ror	r26
     f82:	f0 40       	sbci	r31, 0x00	; 0
     f84:	53 95       	inc	r21
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__addsf3x+0x4e>
     f88:	7e f4       	brtc	.+30     	; 0xfa8 <__addsf3x+0x7c>
     f8a:	1f 16       	cp	r1, r31
     f8c:	ba 0b       	sbc	r27, r26
     f8e:	62 0b       	sbc	r22, r18
     f90:	73 0b       	sbc	r23, r19
     f92:	84 0b       	sbc	r24, r20
     f94:	ba f0       	brmi	.+46     	; 0xfc4 <__addsf3x+0x98>
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	a1 f0       	breq	.+40     	; 0xfc2 <__addsf3x+0x96>
     f9a:	ff 0f       	add	r31, r31
     f9c:	bb 1f       	adc	r27, r27
     f9e:	66 1f       	adc	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	c2 f7       	brpl	.-16     	; 0xf96 <__addsf3x+0x6a>
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <__addsf3x+0x98>
     fa8:	ba 0f       	add	r27, r26
     faa:	62 1f       	adc	r22, r18
     fac:	73 1f       	adc	r23, r19
     fae:	84 1f       	adc	r24, r20
     fb0:	48 f4       	brcc	.+18     	; 0xfc4 <__addsf3x+0x98>
     fb2:	87 95       	ror	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	f7 95       	ror	r31
     fbc:	9e 3f       	cpi	r25, 0xFE	; 254
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <__addsf3x+0x96>
     fc0:	b3 cf       	rjmp	.-154    	; 0xf28 <__addsf3+0x1e>
     fc2:	93 95       	inc	r25
     fc4:	88 0f       	add	r24, r24
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__addsf3x+0x9e>
     fc8:	99 27       	eor	r25, r25
     fca:	ee 0f       	add	r30, r30
     fcc:	97 95       	ror	r25
     fce:	87 95       	ror	r24
     fd0:	08 95       	ret

00000fd2 <__cmpsf2>:
     fd2:	d9 d0       	rcall	.+434    	; 0x1186 <__fp_cmp>
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <__cmpsf2+0x6>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	08 95       	ret

00000fda <__divsf3>:
     fda:	0c d0       	rcall	.+24     	; 0xff4 <__divsf3x>
     fdc:	0f c1       	rjmp	.+542    	; 0x11fc <__fp_round>
     fde:	07 d1       	rcall	.+526    	; 0x11ee <__fp_pscB>
     fe0:	40 f0       	brcs	.+16     	; 0xff2 <__divsf3+0x18>
     fe2:	fe d0       	rcall	.+508    	; 0x11e0 <__fp_pscA>
     fe4:	30 f0       	brcs	.+12     	; 0xff2 <__divsf3+0x18>
     fe6:	21 f4       	brne	.+8      	; 0xff0 <__divsf3+0x16>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	19 f0       	breq	.+6      	; 0xff2 <__divsf3+0x18>
     fec:	f0 c0       	rjmp	.+480    	; 0x11ce <__fp_inf>
     fee:	51 11       	cpse	r21, r1
     ff0:	39 c1       	rjmp	.+626    	; 0x1264 <__fp_szero>
     ff2:	f3 c0       	rjmp	.+486    	; 0x11da <__fp_nan>

00000ff4 <__divsf3x>:
     ff4:	14 d1       	rcall	.+552    	; 0x121e <__fp_split3>
     ff6:	98 f3       	brcs	.-26     	; 0xfde <__divsf3+0x4>

00000ff8 <__divsf3_pse>:
     ff8:	99 23       	and	r25, r25
     ffa:	c9 f3       	breq	.-14     	; 0xfee <__divsf3+0x14>
     ffc:	55 23       	and	r21, r21
     ffe:	b1 f3       	breq	.-20     	; 0xfec <__divsf3+0x12>
    1000:	95 1b       	sub	r25, r21
    1002:	55 0b       	sbc	r21, r21
    1004:	bb 27       	eor	r27, r27
    1006:	aa 27       	eor	r26, r26
    1008:	62 17       	cp	r22, r18
    100a:	73 07       	cpc	r23, r19
    100c:	84 07       	cpc	r24, r20
    100e:	38 f0       	brcs	.+14     	; 0x101e <__divsf3_pse+0x26>
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	5f 4f       	sbci	r21, 0xFF	; 255
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	44 1f       	adc	r20, r20
    101a:	aa 1f       	adc	r26, r26
    101c:	a9 f3       	breq	.-22     	; 0x1008 <__divsf3_pse+0x10>
    101e:	33 d0       	rcall	.+102    	; 0x1086 <__divsf3_pse+0x8e>
    1020:	0e 2e       	mov	r0, r30
    1022:	3a f0       	brmi	.+14     	; 0x1032 <__divsf3_pse+0x3a>
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	30 d0       	rcall	.+96     	; 0x1088 <__divsf3_pse+0x90>
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	e6 95       	lsr	r30
    102e:	00 1c       	adc	r0, r0
    1030:	ca f7       	brpl	.-14     	; 0x1024 <__divsf3_pse+0x2c>
    1032:	29 d0       	rcall	.+82     	; 0x1086 <__divsf3_pse+0x8e>
    1034:	fe 2f       	mov	r31, r30
    1036:	27 d0       	rcall	.+78     	; 0x1086 <__divsf3_pse+0x8e>
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	bb 1f       	adc	r27, r27
    1040:	26 17       	cp	r18, r22
    1042:	37 07       	cpc	r19, r23
    1044:	48 07       	cpc	r20, r24
    1046:	ab 07       	cpc	r26, r27
    1048:	b0 e8       	ldi	r27, 0x80	; 128
    104a:	09 f0       	breq	.+2      	; 0x104e <__divsf3_pse+0x56>
    104c:	bb 0b       	sbc	r27, r27
    104e:	80 2d       	mov	r24, r0
    1050:	bf 01       	movw	r22, r30
    1052:	ff 27       	eor	r31, r31
    1054:	93 58       	subi	r25, 0x83	; 131
    1056:	5f 4f       	sbci	r21, 0xFF	; 255
    1058:	2a f0       	brmi	.+10     	; 0x1064 <__divsf3_pse+0x6c>
    105a:	9e 3f       	cpi	r25, 0xFE	; 254
    105c:	51 05       	cpc	r21, r1
    105e:	68 f0       	brcs	.+26     	; 0x107a <__divsf3_pse+0x82>
    1060:	b6 c0       	rjmp	.+364    	; 0x11ce <__fp_inf>
    1062:	00 c1       	rjmp	.+512    	; 0x1264 <__fp_szero>
    1064:	5f 3f       	cpi	r21, 0xFF	; 255
    1066:	ec f3       	brlt	.-6      	; 0x1062 <__divsf3_pse+0x6a>
    1068:	98 3e       	cpi	r25, 0xE8	; 232
    106a:	dc f3       	brlt	.-10     	; 0x1062 <__divsf3_pse+0x6a>
    106c:	86 95       	lsr	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	f7 95       	ror	r31
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	c9 f7       	brne	.-14     	; 0x106c <__divsf3_pse+0x74>
    107a:	88 0f       	add	r24, r24
    107c:	91 1d       	adc	r25, r1
    107e:	96 95       	lsr	r25
    1080:	87 95       	ror	r24
    1082:	97 f9       	bld	r25, 7
    1084:	08 95       	ret
    1086:	e1 e0       	ldi	r30, 0x01	; 1
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	bb 1f       	adc	r27, r27
    1090:	62 17       	cp	r22, r18
    1092:	73 07       	cpc	r23, r19
    1094:	84 07       	cpc	r24, r20
    1096:	ba 07       	cpc	r27, r26
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <__divsf3_pse+0xaa>
    109a:	62 1b       	sub	r22, r18
    109c:	73 0b       	sbc	r23, r19
    109e:	84 0b       	sbc	r24, r20
    10a0:	ba 0b       	sbc	r27, r26
    10a2:	ee 1f       	adc	r30, r30
    10a4:	88 f7       	brcc	.-30     	; 0x1088 <__divsf3_pse+0x90>
    10a6:	e0 95       	com	r30
    10a8:	08 95       	ret

000010aa <__fixsfsi>:
    10aa:	04 d0       	rcall	.+8      	; 0x10b4 <__fixunssfsi>
    10ac:	68 94       	set
    10ae:	b1 11       	cpse	r27, r1
    10b0:	d9 c0       	rjmp	.+434    	; 0x1264 <__fp_szero>
    10b2:	08 95       	ret

000010b4 <__fixunssfsi>:
    10b4:	bc d0       	rcall	.+376    	; 0x122e <__fp_splitA>
    10b6:	88 f0       	brcs	.+34     	; 0x10da <__fixunssfsi+0x26>
    10b8:	9f 57       	subi	r25, 0x7F	; 127
    10ba:	90 f0       	brcs	.+36     	; 0x10e0 <__fixunssfsi+0x2c>
    10bc:	b9 2f       	mov	r27, r25
    10be:	99 27       	eor	r25, r25
    10c0:	b7 51       	subi	r27, 0x17	; 23
    10c2:	a0 f0       	brcs	.+40     	; 0x10ec <__fixunssfsi+0x38>
    10c4:	d1 f0       	breq	.+52     	; 0x10fa <__fixunssfsi+0x46>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	1a f0       	brmi	.+6      	; 0x10d6 <__fixunssfsi+0x22>
    10d0:	ba 95       	dec	r27
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__fixunssfsi+0x12>
    10d4:	12 c0       	rjmp	.+36     	; 0x10fa <__fixunssfsi+0x46>
    10d6:	b1 30       	cpi	r27, 0x01	; 1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <__fixunssfsi+0x46>
    10da:	c3 d0       	rcall	.+390    	; 0x1262 <__fp_zero>
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	08 95       	ret
    10e0:	c0 c0       	rjmp	.+384    	; 0x1262 <__fp_zero>
    10e2:	67 2f       	mov	r22, r23
    10e4:	78 2f       	mov	r23, r24
    10e6:	88 27       	eor	r24, r24
    10e8:	b8 5f       	subi	r27, 0xF8	; 248
    10ea:	39 f0       	breq	.+14     	; 0x10fa <__fixunssfsi+0x46>
    10ec:	b9 3f       	cpi	r27, 0xF9	; 249
    10ee:	cc f3       	brlt	.-14     	; 0x10e2 <__fixunssfsi+0x2e>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b3 95       	inc	r27
    10f8:	d9 f7       	brne	.-10     	; 0x10f0 <__fixunssfsi+0x3c>
    10fa:	3e f4       	brtc	.+14     	; 0x110a <__fixunssfsi+0x56>
    10fc:	90 95       	com	r25
    10fe:	80 95       	com	r24
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__floatunsisf>:
    110c:	e8 94       	clt
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <__floatsisf+0x12>

00001110 <__floatsisf>:
    1110:	97 fb       	bst	r25, 7
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__floatsisf+0x12>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	99 23       	and	r25, r25
    1124:	a9 f0       	breq	.+42     	; 0x1150 <__floatsisf+0x40>
    1126:	f9 2f       	mov	r31, r25
    1128:	96 e9       	ldi	r25, 0x96	; 150
    112a:	bb 27       	eor	r27, r27
    112c:	93 95       	inc	r25
    112e:	f6 95       	lsr	r31
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f1 11       	cpse	r31, r1
    113a:	f8 cf       	rjmp	.-16     	; 0x112c <__floatsisf+0x1c>
    113c:	fa f4       	brpl	.+62     	; 0x117c <__floatsisf+0x6c>
    113e:	bb 0f       	add	r27, r27
    1140:	11 f4       	brne	.+4      	; 0x1146 <__floatsisf+0x36>
    1142:	60 ff       	sbrs	r22, 0
    1144:	1b c0       	rjmp	.+54     	; 0x117c <__floatsisf+0x6c>
    1146:	6f 5f       	subi	r22, 0xFF	; 255
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	16 c0       	rjmp	.+44     	; 0x117c <__floatsisf+0x6c>
    1150:	88 23       	and	r24, r24
    1152:	11 f0       	breq	.+4      	; 0x1158 <__floatsisf+0x48>
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	11 c0       	rjmp	.+34     	; 0x117a <__floatsisf+0x6a>
    1158:	77 23       	and	r23, r23
    115a:	21 f0       	breq	.+8      	; 0x1164 <__floatsisf+0x54>
    115c:	9e e8       	ldi	r25, 0x8E	; 142
    115e:	87 2f       	mov	r24, r23
    1160:	76 2f       	mov	r23, r22
    1162:	05 c0       	rjmp	.+10     	; 0x116e <__floatsisf+0x5e>
    1164:	66 23       	and	r22, r22
    1166:	71 f0       	breq	.+28     	; 0x1184 <__floatsisf+0x74>
    1168:	96 e8       	ldi	r25, 0x86	; 134
    116a:	86 2f       	mov	r24, r22
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	2a f0       	brmi	.+10     	; 0x117c <__floatsisf+0x6c>
    1172:	9a 95       	dec	r25
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	da f7       	brpl	.-10     	; 0x1172 <__floatsisf+0x62>
    117c:	88 0f       	add	r24, r24
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret

00001186 <__fp_cmp>:
    1186:	99 0f       	add	r25, r25
    1188:	00 08       	sbc	r0, r0
    118a:	55 0f       	add	r21, r21
    118c:	aa 0b       	sbc	r26, r26
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	fe ef       	ldi	r31, 0xFE	; 254
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	e8 07       	cpc	r30, r24
    1198:	f9 07       	cpc	r31, r25
    119a:	c0 f0       	brcs	.+48     	; 0x11cc <__fp_cmp+0x46>
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	98 f0       	brcs	.+38     	; 0x11cc <__fp_cmp+0x46>
    11a6:	62 1b       	sub	r22, r18
    11a8:	73 0b       	sbc	r23, r19
    11aa:	84 0b       	sbc	r24, r20
    11ac:	95 0b       	sbc	r25, r21
    11ae:	39 f4       	brne	.+14     	; 0x11be <__fp_cmp+0x38>
    11b0:	0a 26       	eor	r0, r26
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__fp_cmp+0x46>
    11b4:	23 2b       	or	r18, r19
    11b6:	24 2b       	or	r18, r20
    11b8:	25 2b       	or	r18, r21
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__fp_cmp+0x3e>
    11bc:	08 95       	ret
    11be:	0a 26       	eor	r0, r26
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__fp_cmp+0x3e>
    11c2:	a1 40       	sbci	r26, 0x01	; 1
    11c4:	a6 95       	lsr	r26
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	81 1d       	adc	r24, r1
    11ca:	81 1d       	adc	r24, r1
    11cc:	08 95       	ret

000011ce <__fp_inf>:
    11ce:	97 f9       	bld	r25, 7
    11d0:	9f 67       	ori	r25, 0x7F	; 127
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	08 95       	ret

000011da <__fp_nan>:
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	80 ec       	ldi	r24, 0xC0	; 192
    11de:	08 95       	ret

000011e0 <__fp_pscA>:
    11e0:	00 24       	eor	r0, r0
    11e2:	0a 94       	dec	r0
    11e4:	16 16       	cp	r1, r22
    11e6:	17 06       	cpc	r1, r23
    11e8:	18 06       	cpc	r1, r24
    11ea:	09 06       	cpc	r0, r25
    11ec:	08 95       	ret

000011ee <__fp_pscB>:
    11ee:	00 24       	eor	r0, r0
    11f0:	0a 94       	dec	r0
    11f2:	12 16       	cp	r1, r18
    11f4:	13 06       	cpc	r1, r19
    11f6:	14 06       	cpc	r1, r20
    11f8:	05 06       	cpc	r0, r21
    11fa:	08 95       	ret

000011fc <__fp_round>:
    11fc:	09 2e       	mov	r0, r25
    11fe:	03 94       	inc	r0
    1200:	00 0c       	add	r0, r0
    1202:	11 f4       	brne	.+4      	; 0x1208 <__fp_round+0xc>
    1204:	88 23       	and	r24, r24
    1206:	52 f0       	brmi	.+20     	; 0x121c <__fp_round+0x20>
    1208:	bb 0f       	add	r27, r27
    120a:	40 f4       	brcc	.+16     	; 0x121c <__fp_round+0x20>
    120c:	bf 2b       	or	r27, r31
    120e:	11 f4       	brne	.+4      	; 0x1214 <__fp_round+0x18>
    1210:	60 ff       	sbrs	r22, 0
    1212:	04 c0       	rjmp	.+8      	; 0x121c <__fp_round+0x20>
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <__fp_split3>:
    121e:	57 fd       	sbrc	r21, 7
    1220:	90 58       	subi	r25, 0x80	; 128
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	59 f0       	breq	.+22     	; 0x123e <__fp_splitA+0x10>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	71 f0       	breq	.+28     	; 0x1248 <__fp_splitA+0x1a>
    122c:	47 95       	ror	r20

0000122e <__fp_splitA>:
    122e:	88 0f       	add	r24, r24
    1230:	97 fb       	bst	r25, 7
    1232:	99 1f       	adc	r25, r25
    1234:	61 f0       	breq	.+24     	; 0x124e <__fp_splitA+0x20>
    1236:	9f 3f       	cpi	r25, 0xFF	; 255
    1238:	79 f0       	breq	.+30     	; 0x1258 <__fp_splitA+0x2a>
    123a:	87 95       	ror	r24
    123c:	08 95       	ret
    123e:	12 16       	cp	r1, r18
    1240:	13 06       	cpc	r1, r19
    1242:	14 06       	cpc	r1, r20
    1244:	55 1f       	adc	r21, r21
    1246:	f2 cf       	rjmp	.-28     	; 0x122c <__fp_split3+0xe>
    1248:	46 95       	lsr	r20
    124a:	f1 df       	rcall	.-30     	; 0x122e <__fp_splitA>
    124c:	08 c0       	rjmp	.+16     	; 0x125e <__fp_splitA+0x30>
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	18 06       	cpc	r1, r24
    1254:	99 1f       	adc	r25, r25
    1256:	f1 cf       	rjmp	.-30     	; 0x123a <__fp_splitA+0xc>
    1258:	86 95       	lsr	r24
    125a:	71 05       	cpc	r23, r1
    125c:	61 05       	cpc	r22, r1
    125e:	08 94       	sec
    1260:	08 95       	ret

00001262 <__fp_zero>:
    1262:	e8 94       	clt

00001264 <__fp_szero>:
    1264:	bb 27       	eor	r27, r27
    1266:	66 27       	eor	r22, r22
    1268:	77 27       	eor	r23, r23
    126a:	cb 01       	movw	r24, r22
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__gesf2>:
    1270:	8a df       	rcall	.-236    	; 0x1186 <__fp_cmp>
    1272:	08 f4       	brcc	.+2      	; 0x1276 <__gesf2+0x6>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__mulsf3>:
    1278:	0b d0       	rcall	.+22     	; 0x1290 <__mulsf3x>
    127a:	c0 cf       	rjmp	.-128    	; 0x11fc <__fp_round>
    127c:	b1 df       	rcall	.-158    	; 0x11e0 <__fp_pscA>
    127e:	28 f0       	brcs	.+10     	; 0x128a <__mulsf3+0x12>
    1280:	b6 df       	rcall	.-148    	; 0x11ee <__fp_pscB>
    1282:	18 f0       	brcs	.+6      	; 0x128a <__mulsf3+0x12>
    1284:	95 23       	and	r25, r21
    1286:	09 f0       	breq	.+2      	; 0x128a <__mulsf3+0x12>
    1288:	a2 cf       	rjmp	.-188    	; 0x11ce <__fp_inf>
    128a:	a7 cf       	rjmp	.-178    	; 0x11da <__fp_nan>
    128c:	11 24       	eor	r1, r1
    128e:	ea cf       	rjmp	.-44     	; 0x1264 <__fp_szero>

00001290 <__mulsf3x>:
    1290:	c6 df       	rcall	.-116    	; 0x121e <__fp_split3>
    1292:	a0 f3       	brcs	.-24     	; 0x127c <__mulsf3+0x4>

00001294 <__mulsf3_pse>:
    1294:	95 9f       	mul	r25, r21
    1296:	d1 f3       	breq	.-12     	; 0x128c <__mulsf3+0x14>
    1298:	95 0f       	add	r25, r21
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	55 1f       	adc	r21, r21
    129e:	62 9f       	mul	r22, r18
    12a0:	f0 01       	movw	r30, r0
    12a2:	72 9f       	mul	r23, r18
    12a4:	bb 27       	eor	r27, r27
    12a6:	f0 0d       	add	r31, r0
    12a8:	b1 1d       	adc	r27, r1
    12aa:	63 9f       	mul	r22, r19
    12ac:	aa 27       	eor	r26, r26
    12ae:	f0 0d       	add	r31, r0
    12b0:	b1 1d       	adc	r27, r1
    12b2:	aa 1f       	adc	r26, r26
    12b4:	64 9f       	mul	r22, r20
    12b6:	66 27       	eor	r22, r22
    12b8:	b0 0d       	add	r27, r0
    12ba:	a1 1d       	adc	r26, r1
    12bc:	66 1f       	adc	r22, r22
    12be:	82 9f       	mul	r24, r18
    12c0:	22 27       	eor	r18, r18
    12c2:	b0 0d       	add	r27, r0
    12c4:	a1 1d       	adc	r26, r1
    12c6:	62 1f       	adc	r22, r18
    12c8:	73 9f       	mul	r23, r19
    12ca:	b0 0d       	add	r27, r0
    12cc:	a1 1d       	adc	r26, r1
    12ce:	62 1f       	adc	r22, r18
    12d0:	83 9f       	mul	r24, r19
    12d2:	a0 0d       	add	r26, r0
    12d4:	61 1d       	adc	r22, r1
    12d6:	22 1f       	adc	r18, r18
    12d8:	74 9f       	mul	r23, r20
    12da:	33 27       	eor	r19, r19
    12dc:	a0 0d       	add	r26, r0
    12de:	61 1d       	adc	r22, r1
    12e0:	23 1f       	adc	r18, r19
    12e2:	84 9f       	mul	r24, r20
    12e4:	60 0d       	add	r22, r0
    12e6:	21 1d       	adc	r18, r1
    12e8:	82 2f       	mov	r24, r18
    12ea:	76 2f       	mov	r23, r22
    12ec:	6a 2f       	mov	r22, r26
    12ee:	11 24       	eor	r1, r1
    12f0:	9f 57       	subi	r25, 0x7F	; 127
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	8a f0       	brmi	.+34     	; 0x1318 <__mulsf3_pse+0x84>
    12f6:	e1 f0       	breq	.+56     	; 0x1330 <__mulsf3_pse+0x9c>
    12f8:	88 23       	and	r24, r24
    12fa:	4a f0       	brmi	.+18     	; 0x130e <__mulsf3_pse+0x7a>
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	bb 1f       	adc	r27, r27
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	a9 f7       	brne	.-22     	; 0x12f8 <__mulsf3_pse+0x64>
    130e:	9e 3f       	cpi	r25, 0xFE	; 254
    1310:	51 05       	cpc	r21, r1
    1312:	70 f0       	brcs	.+28     	; 0x1330 <__mulsf3_pse+0x9c>
    1314:	5c cf       	rjmp	.-328    	; 0x11ce <__fp_inf>
    1316:	a6 cf       	rjmp	.-180    	; 0x1264 <__fp_szero>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	ec f3       	brlt	.-6      	; 0x1316 <__mulsf3_pse+0x82>
    131c:	98 3e       	cpi	r25, 0xE8	; 232
    131e:	dc f3       	brlt	.-10     	; 0x1316 <__mulsf3_pse+0x82>
    1320:	86 95       	lsr	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	f7 95       	ror	r31
    132a:	e7 95       	ror	r30
    132c:	9f 5f       	subi	r25, 0xFF	; 255
    132e:	c1 f7       	brne	.-16     	; 0x1320 <__mulsf3_pse+0x8c>
    1330:	fe 2b       	or	r31, r30
    1332:	88 0f       	add	r24, r24
    1334:	91 1d       	adc	r25, r1
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret

0000133e <__divmodhi4>:
    133e:	97 fb       	bst	r25, 7
    1340:	07 2e       	mov	r0, r23
    1342:	16 f4       	brtc	.+4      	; 0x1348 <__divmodhi4+0xa>
    1344:	00 94       	com	r0
    1346:	06 d0       	rcall	.+12     	; 0x1354 <__divmodhi4_neg1>
    1348:	77 fd       	sbrc	r23, 7
    134a:	08 d0       	rcall	.+16     	; 0x135c <__divmodhi4_neg2>
    134c:	0b d0       	rcall	.+22     	; 0x1364 <__udivmodhi4>
    134e:	07 fc       	sbrc	r0, 7
    1350:	05 d0       	rcall	.+10     	; 0x135c <__divmodhi4_neg2>
    1352:	3e f4       	brtc	.+14     	; 0x1362 <__divmodhi4_exit>

00001354 <__divmodhi4_neg1>:
    1354:	90 95       	com	r25
    1356:	81 95       	neg	r24
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	08 95       	ret

0000135c <__divmodhi4_neg2>:
    135c:	70 95       	com	r23
    135e:	61 95       	neg	r22
    1360:	7f 4f       	sbci	r23, 0xFF	; 255

00001362 <__divmodhi4_exit>:
    1362:	08 95       	ret

00001364 <__udivmodhi4>:
    1364:	aa 1b       	sub	r26, r26
    1366:	bb 1b       	sub	r27, r27
    1368:	51 e1       	ldi	r21, 0x11	; 17
    136a:	07 c0       	rjmp	.+14     	; 0x137a <__udivmodhi4_ep>

0000136c <__udivmodhi4_loop>:
    136c:	aa 1f       	adc	r26, r26
    136e:	bb 1f       	adc	r27, r27
    1370:	a6 17       	cp	r26, r22
    1372:	b7 07       	cpc	r27, r23
    1374:	10 f0       	brcs	.+4      	; 0x137a <__udivmodhi4_ep>
    1376:	a6 1b       	sub	r26, r22
    1378:	b7 0b       	sbc	r27, r23

0000137a <__udivmodhi4_ep>:
    137a:	88 1f       	adc	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	5a 95       	dec	r21
    1380:	a9 f7       	brne	.-22     	; 0x136c <__udivmodhi4_loop>
    1382:	80 95       	com	r24
    1384:	90 95       	com	r25
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	08 95       	ret

0000138c <strcat>:
    138c:	fb 01       	movw	r30, r22
    138e:	dc 01       	movw	r26, r24
    1390:	0d 90       	ld	r0, X+
    1392:	00 20       	and	r0, r0
    1394:	e9 f7       	brne	.-6      	; 0x1390 <strcat+0x4>
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	01 90       	ld	r0, Z+
    139a:	0d 92       	st	X+, r0
    139c:	00 20       	and	r0, r0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <strcat+0xc>
    13a0:	08 95       	ret

000013a2 <strcpy>:
    13a2:	fb 01       	movw	r30, r22
    13a4:	dc 01       	movw	r26, r24
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	00 20       	and	r0, r0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <strcpy+0x4>
    13ae:	08 95       	ret

000013b0 <__itoa_ncheck>:
    13b0:	bb 27       	eor	r27, r27
    13b2:	4a 30       	cpi	r20, 0x0A	; 10
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <__itoa_ncheck+0x12>
    13b6:	99 23       	and	r25, r25
    13b8:	22 f4       	brpl	.+8      	; 0x13c2 <__itoa_ncheck+0x12>
    13ba:	bd e2       	ldi	r27, 0x2D	; 45
    13bc:	90 95       	com	r25
    13be:	81 95       	neg	r24
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <__utoa_common>

000013c4 <__utoa_ncheck>:
    13c4:	bb 27       	eor	r27, r27

000013c6 <__utoa_common>:
    13c6:	fb 01       	movw	r30, r22
    13c8:	55 27       	eor	r21, r21
    13ca:	aa 27       	eor	r26, r26
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	aa 1f       	adc	r26, r26
    13d2:	a4 17       	cp	r26, r20
    13d4:	10 f0       	brcs	.+4      	; 0x13da <__utoa_common+0x14>
    13d6:	a4 1b       	sub	r26, r20
    13d8:	83 95       	inc	r24
    13da:	50 51       	subi	r21, 0x10	; 16
    13dc:	b9 f7       	brne	.-18     	; 0x13cc <__utoa_common+0x6>
    13de:	a0 5d       	subi	r26, 0xD0	; 208
    13e0:	aa 33       	cpi	r26, 0x3A	; 58
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <__utoa_common+0x20>
    13e4:	a9 5d       	subi	r26, 0xD9	; 217
    13e6:	a1 93       	st	Z+, r26
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	79 f7       	brne	.-34     	; 0x13ca <__utoa_common+0x4>
    13ec:	b1 11       	cpse	r27, r1
    13ee:	b1 93       	st	Z+, r27
    13f0:	11 92       	st	Z+, r1
    13f2:	cb 01       	movw	r24, r22
    13f4:	00 c0       	rjmp	.+0      	; 0x13f6 <strrev>

000013f6 <strrev>:
    13f6:	dc 01       	movw	r26, r24
    13f8:	fc 01       	movw	r30, r24
    13fa:	67 2f       	mov	r22, r23
    13fc:	71 91       	ld	r23, Z+
    13fe:	77 23       	and	r23, r23
    1400:	e1 f7       	brne	.-8      	; 0x13fa <strrev+0x4>
    1402:	32 97       	sbiw	r30, 0x02	; 2
    1404:	04 c0       	rjmp	.+8      	; 0x140e <strrev+0x18>
    1406:	7c 91       	ld	r23, X
    1408:	6d 93       	st	X+, r22
    140a:	70 83       	st	Z, r23
    140c:	62 91       	ld	r22, -Z
    140e:	ae 17       	cp	r26, r30
    1410:	bf 07       	cpc	r27, r31
    1412:	c8 f3       	brcs	.-14     	; 0x1406 <strrev+0x10>
    1414:	08 95       	ret

00001416 <_exit>:
    1416:	f8 94       	cli

00001418 <__stop_program>:
    1418:	ff cf       	rjmp	.-2      	; 0x1418 <__stop_program>
